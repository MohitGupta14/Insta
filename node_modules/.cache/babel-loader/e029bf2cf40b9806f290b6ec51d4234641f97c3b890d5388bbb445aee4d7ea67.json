{"ast":null,"code":"'use strict';\n\nvar compileSchema = require('./compile'),\n  resolve = require('./compile/resolve'),\n  Cache = require('./cache'),\n  SchemaObject = require('./compile/schema_obj'),\n  stableStringify = require('fast-json-stable-stringify'),\n  formats = require('./compile/formats'),\n  rules = require('./compile/rules'),\n  $dataMetaSchema = require('./$data'),\n  patternGroups = require('./patternGroups'),\n  util = require('./compile/util'),\n  co = require('co');\nmodule.exports = Ajv;\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';\nvar META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes'];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n  var schemaUriFormat = this._schemaUriFormat = this._formats['uri-reference'];\n  this._schemaUriFormatFunc = function (str) {\n    return schemaUriFormat.test(str);\n  };\n  this._cache = opts.cache || new Cache();\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n  if (opts.formats) addInitialFormats(this);\n  addDraft6MetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  addInitialSchemas(this);\n  if (opts.patternGroups) patternGroups(this);\n}\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n  var valid = v(data);\n  if (v.$async === true) return this._opts.async == '*' ? co(valid) : valid;\n  this.errors = v.errors;\n  return valid;\n}\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)) {\n    for (var i = 0; i < schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var currentUriFormat = this._formats.uri;\n  this._formats.uri = typeof currentUriFormat == 'function' ? this._schemaUriFormatFunc : this._schemaUriFormat;\n  var valid;\n  try {\n    valid = this.validate($schema, schema);\n  } finally {\n    this._formats.uri = currentUriFormat;\n  }\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);else throw new Error(message);\n  }\n  return valid;\n}\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object' ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;\n  return self._opts.defaultMeta;\n}\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object':\n      return schemaObj.validate || this._compile(schemaObj);\n    case 'string':\n      return this.getSchema(schemaObj);\n    case 'undefined':\n      return _getSchemaFragment(this, keyRef);\n  }\n}\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, {\n    schema: {}\n  }, ref);\n  if (res) {\n    var schema = res.schema,\n      root = res.root,\n      baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema))) this.validateSchema(schema, true);\n  var localRefs = resolve.ids.call(this, schema);\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n  return schemaObj;\n}\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true) callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n  var v;\n  try {\n    v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);\n  } finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n  function callValidate() {\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(null, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case '$id':\n      return _get$Id;\n    case 'id':\n      return _getId;\n    default:\n      return _get$IdOrId;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n  var text = '';\n  for (var i = 0; i < errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\nfunction addDraft6MetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/$data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-06.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id \"' + id + '\" already exists');\n}\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {\n      log: noop,\n      warn: noop,\n      error: noop\n    };\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error)) throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\nfunction noop() {}","map":{"version":3,"names":["compileSchema","require","resolve","Cache","SchemaObject","stableStringify","formats","rules","$dataMetaSchema","patternGroups","util","co","module","exports","Ajv","prototype","validate","compile","addSchema","addMetaSchema","validateSchema","getSchema","removeSchema","addFormat","errorsText","_addSchema","_compile","compileAsync","customKeyword","addKeyword","add","getKeyword","get","removeKeyword","remove","errorClasses","ValidationError","Validation","MissingRefError","MissingRef","META_SCHEMA_ID","META_IGNORE_OPTIONS","META_SUPPORT_DATA","opts","_opts","copy","setLogger","_schemas","_refs","_fragments","_formats","format","schemaUriFormat","_schemaUriFormat","_schemaUriFormatFunc","str","test","_cache","cache","_loadingSchemas","_compilations","RULES","_getId","chooseGetId","loopRequired","Infinity","errorDataPath","_errorDataPathProperty","serialize","undefined","_metaOpts","getMetaSchemaOptions","addInitialFormats","addDraft6MetaSchema","meta","addInitialSchemas","schemaKeyRef","data","v","Error","schemaObj","valid","$async","async","errors","schema","_meta","key","_skipValidation","Array","isArray","i","length","id","normalizeId","checkUnique","skipValidation","throwOrLogError","$schema","defaultMeta","logger","warn","currentUriFormat","uri","message","error","self","keyRef","_getSchemaObj","_getSchemaFragment","ref","res","call","root","baseId","fragment","RegExp","_removeAllSchemas","clear","del","cacheKey","schemas","regex","shouldAddSchema","cached","addUsedSchema","willValidate","recursiveMeta","localRefs","ids","put","compiling","callValidate","currentOpts","refs","refVal","_validate","result","apply","arguments","schemaId","_get$Id","_get$IdOrId","$id","options","separator","dataVar","text","e","dataPath","slice","name","$dataSchema","$data","metaSchema","optsSchemas","metaOpts","log","noop","console"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/har-validator/node_modules/ajv/lib/ajv.js"],"sourcesContent":["'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('fast-json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , $dataMetaSchema = require('./$data')\n  , patternGroups = require('./patternGroups')\n  , util = require('./compile/util')\n  , co = require('co');\n\nmodule.exports = Ajv;\n\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\n\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\n\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\n\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes' ];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n  var schemaUriFormat = this._schemaUriFormat = this._formats['uri-reference'];\n  this._schemaUriFormatFunc = function (str) { return schemaUriFormat.test(str); };\n\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n\n  if (opts.formats) addInitialFormats(this);\n  addDraft6MetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  addInitialSchemas(this);\n  if (opts.patternGroups) patternGroups(this);\n}\n\n\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n\n  var valid = v(data);\n  if (v.$async === true)\n    return this._opts.async == '*' ? co(valid) : valid;\n  this.errors = v.errors;\n  return valid;\n}\n\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)){\n    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string')\n    throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string')\n    throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var currentUriFormat = this._formats.uri;\n  this._formats.uri = typeof currentUriFormat == 'function'\n                      ? this._schemaUriFormatFunc\n                      : this._schemaUriFormat;\n  var valid;\n  try { valid = this.validate($schema, schema); }\n  finally { this._formats.uri = currentUriFormat; }\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);\n    else throw new Error(message);\n  }\n  return valid;\n}\n\n\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object'\n                            ? self._getId(meta) || meta\n                            : self.getSchema(META_SCHEMA_ID)\n                              ? META_SCHEMA_ID\n                              : undefined;\n  return self._opts.defaultMeta;\n}\n\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object': return schemaObj.validate || this._compile(schemaObj);\n    case 'string': return this.getSchema(schemaObj);\n    case 'undefined': return _getSchemaFragment(this, keyRef);\n  }\n}\n\n\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, { schema: {} }, ref);\n  if (res) {\n    var schema = res.schema\n      , root = res.root\n      , baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\n\n\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\n\n\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean')\n    throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n    this.validateSchema(schema, true);\n\n  var localRefs = resolve.ids.call(this, schema);\n\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n\n  return schemaObj;\n}\n\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true)\n      callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n\n  var v;\n  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\n  finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n\n\n  function callValidate() {\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(null, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\n\n\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case '$id': return _get$Id;\n    case 'id': return _getId;\n    default: return _get$IdOrId;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\n\n\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id)\n    throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n  var text = '';\n  for (var i=0; i<errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\n\n\nfunction addDraft6MetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/$data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-06.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\n\n\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\n  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\n\n\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\n\n\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id])\n    throw new Error('schema with key or id \"' + id + '\" already exists');\n}\n\n\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\n\n\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {log: noop, warn: noop, error: noop};\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\n      throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\n\n\nfunction noop() {}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}