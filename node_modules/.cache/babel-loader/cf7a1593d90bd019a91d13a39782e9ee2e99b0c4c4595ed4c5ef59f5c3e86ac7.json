{"ast":null,"code":"/*\n * verror.js: richer JavaScript errors\n */\n\nvar mod_assertplus = require('assert-plus');\nvar mod_util = require('util');\nvar mod_extsprintf = require('extsprintf');\nvar mod_isError = require('core-util-is').isError;\nvar sprintf = mod_extsprintf.sprintf;\n\n/*\n * Public interface\n */\n\n/* So you can 'var VError = require('verror')' */\nmodule.exports = VError;\n/* For compatibility */\nVError.VError = VError;\n/* Other exported classes */\nVError.SError = SError;\nVError.WError = WError;\nVError.MultiError = MultiError;\n\n/*\n * Common function used to parse constructor arguments for VError, WError, and\n * SError.  Named arguments to this function:\n *\n *     strict\t\tforce strict interpretation of sprintf arguments, even\n *     \t\t\tif the options in \"argv\" don't say so\n *\n *     argv\t\terror's constructor arguments, which are to be\n *     \t\t\tinterpreted as described in README.md.  For quick\n *     \t\t\treference, \"argv\" has one of the following forms:\n *\n *          [ sprintf_args... ]           (argv[0] is a string)\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\n *          [ options, sprintf_args... ]  (argv[0] is an object)\n *\n * This function normalizes these forms, producing an object with the following\n * properties:\n *\n *    options           equivalent to \"options\" in third form.  This will never\n *    \t\t\tbe a direct reference to what the caller passed in\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\n *    \t\t\tmodified.\n *\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\n *    \t\t\tinto account as described in README.md.\n */\nfunction parseConstructorArguments(args) {\n  var argv, options, sprintf_args, shortmessage, k;\n  mod_assertplus.object(args, 'args');\n  mod_assertplus.bool(args.strict, 'args.strict');\n  mod_assertplus.array(args.argv, 'args.argv');\n  argv = args.argv;\n\n  /*\n   * First, figure out which form of invocation we've been given.\n   */\n  if (argv.length === 0) {\n    options = {};\n    sprintf_args = [];\n  } else if (mod_isError(argv[0])) {\n    options = {\n      'cause': argv[0]\n    };\n    sprintf_args = argv.slice(1);\n  } else if (typeof argv[0] === 'object') {\n    options = {};\n    for (k in argv[0]) {\n      options[k] = argv[0][k];\n    }\n    sprintf_args = argv.slice(1);\n  } else {\n    mod_assertplus.string(argv[0], 'first argument to VError, SError, or WError ' + 'constructor must be a string, object, or Error');\n    options = {};\n    sprintf_args = argv;\n  }\n\n  /*\n   * Now construct the error's message.\n   *\n   * extsprintf (which we invoke here with our caller's arguments in order\n   * to construct this Error's message) is strict in its interpretation of\n   * values to be processed by the \"%s\" specifier.  The value passed to\n   * extsprintf must actually be a string or something convertible to a\n   * String using .toString().  Passing other values (notably \"null\" and\n   * \"undefined\") is considered a programmer error.  The assumption is\n   * that if you actually want to print the string \"null\" or \"undefined\",\n   * then that's easy to do that when you're calling extsprintf; on the\n   * other hand, if you did NOT want that (i.e., there's actually a bug\n   * where the program assumes some variable is non-null and tries to\n   * print it, which might happen when constructing a packet or file in\n   * some specific format), then it's better to stop immediately than\n   * produce bogus output.\n   *\n   * However, sometimes the bug is only in the code calling VError, and a\n   * programmer might prefer to have the error message contain \"null\" or\n   * \"undefined\" rather than have the bug in the error path crash the\n   * program (making the first bug harder to identify).  For that reason,\n   * by default VError converts \"null\" or \"undefined\" arguments to their\n   * string representations and passes those to extsprintf.  Programmers\n   * desiring the strict behavior can use the SError class or pass the\n   * \"strict\" option to the VError constructor.\n   */\n  mod_assertplus.object(options);\n  if (!options.strict && !args.strict) {\n    sprintf_args = sprintf_args.map(function (a) {\n      return a === null ? 'null' : a === undefined ? 'undefined' : a;\n    });\n  }\n  if (sprintf_args.length === 0) {\n    shortmessage = '';\n  } else {\n    shortmessage = sprintf.apply(null, sprintf_args);\n  }\n  return {\n    'options': options,\n    'shortmessage': shortmessage\n  };\n}\n\n/*\n * See README.md for reference documentation.\n */\nfunction VError() {\n  var args, obj, parsed, cause, ctor, message, k;\n  args = Array.prototype.slice.call(arguments, 0);\n\n  /*\n   * This is a regrettable pattern, but JavaScript's built-in Error class\n   * is defined to work this way, so we allow the constructor to be called\n   * without \"new\".\n   */\n  if (!(this instanceof VError)) {\n    obj = Object.create(VError.prototype);\n    VError.apply(obj, arguments);\n    return obj;\n  }\n\n  /*\n   * For convenience and backwards compatibility, we support several\n   * different calling forms.  Normalize them here.\n   */\n  parsed = parseConstructorArguments({\n    'argv': args,\n    'strict': false\n  });\n\n  /*\n   * If we've been given a name, apply it now.\n   */\n  if (parsed.options.name) {\n    mod_assertplus.string(parsed.options.name, 'error\\'s \"name\" must be a string');\n    this.name = parsed.options.name;\n  }\n\n  /*\n   * For debugging, we keep track of the original short message (attached\n   * this Error particularly) separately from the complete message (which\n   * includes the messages of our cause chain).\n   */\n  this.jse_shortmsg = parsed.shortmessage;\n  message = parsed.shortmessage;\n\n  /*\n   * If we've been given a cause, record a reference to it and update our\n   * message appropriately.\n   */\n  cause = parsed.options.cause;\n  if (cause) {\n    mod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\n    this.jse_cause = cause;\n    if (!parsed.options.skipCauseMessage) {\n      message += ': ' + cause.message;\n    }\n  }\n\n  /*\n   * If we've been given an object with properties, shallow-copy that\n   * here.  We don't want to use a deep copy in case there are non-plain\n   * objects here, but we don't want to use the original object in case\n   * the caller modifies it later.\n   */\n  this.jse_info = {};\n  if (parsed.options.info) {\n    for (k in parsed.options.info) {\n      this.jse_info[k] = parsed.options.info[k];\n    }\n  }\n  this.message = message;\n  Error.call(this, message);\n  if (Error.captureStackTrace) {\n    ctor = parsed.options.constructorOpt || this.constructor;\n    Error.captureStackTrace(this, ctor);\n  }\n  return this;\n}\nmod_util.inherits(VError, Error);\nVError.prototype.name = 'VError';\nVError.prototype.toString = function ve_toString() {\n  var str = this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name;\n  if (this.message) str += ': ' + this.message;\n  return str;\n};\n\n/*\n * This method is provided for compatibility.  New callers should use\n * VError.cause() instead.  That method also uses the saner `null` return value\n * when there is no cause.\n */\nVError.prototype.cause = function ve_cause() {\n  var cause = VError.cause(this);\n  return cause === null ? undefined : cause;\n};\n\n/*\n * Static methods\n *\n * These class-level methods are provided so that callers can use them on\n * instances of Errors that are not VErrors.  New interfaces should be provided\n * only using static methods to eliminate the class of programming mistake where\n * people fail to check whether the Error object has the corresponding methods.\n */\n\nVError.cause = function (err) {\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  return mod_isError(err.jse_cause) ? err.jse_cause : null;\n};\nVError.info = function (err) {\n  var rv, cause, k;\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  cause = VError.cause(err);\n  if (cause !== null) {\n    rv = VError.info(cause);\n  } else {\n    rv = {};\n  }\n  if (typeof err.jse_info == 'object' && err.jse_info !== null) {\n    for (k in err.jse_info) {\n      rv[k] = err.jse_info[k];\n    }\n  }\n  return rv;\n};\nVError.findCauseByName = function (err, name) {\n  var cause;\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  mod_assertplus.string(name, 'name');\n  mod_assertplus.ok(name.length > 0, 'name cannot be empty');\n  for (cause = err; cause !== null; cause = VError.cause(cause)) {\n    mod_assertplus.ok(mod_isError(cause));\n    if (cause.name == name) {\n      return cause;\n    }\n  }\n  return null;\n};\nVError.hasCauseWithName = function (err, name) {\n  return VError.findCauseByName(err, name) !== null;\n};\nVError.fullStack = function (err) {\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  var cause = VError.cause(err);\n  if (cause) {\n    return err.stack + '\\ncaused by: ' + VError.fullStack(cause);\n  }\n  return err.stack;\n};\nVError.errorFromList = function (errors) {\n  mod_assertplus.arrayOfObject(errors, 'errors');\n  if (errors.length === 0) {\n    return null;\n  }\n  errors.forEach(function (e) {\n    mod_assertplus.ok(mod_isError(e));\n  });\n  if (errors.length == 1) {\n    return errors[0];\n  }\n  return new MultiError(errors);\n};\nVError.errorForEach = function (err, func) {\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  mod_assertplus.func(func, 'func');\n  if (err instanceof MultiError) {\n    err.errors().forEach(function iterError(e) {\n      func(e);\n    });\n  } else {\n    func(err);\n  }\n};\n\n/*\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\n * \"undefined\" as string arguments to the formatter.\n */\nfunction SError() {\n  var args, obj, parsed, options;\n  args = Array.prototype.slice.call(arguments, 0);\n  if (!(this instanceof SError)) {\n    obj = Object.create(SError.prototype);\n    SError.apply(obj, arguments);\n    return obj;\n  }\n  parsed = parseConstructorArguments({\n    'argv': args,\n    'strict': true\n  });\n  options = parsed.options;\n  VError.call(this, options, '%s', parsed.shortmessage);\n  return this;\n}\n\n/*\n * We don't bother setting SError.prototype.name because once constructed,\n * SErrors are just like VErrors.\n */\nmod_util.inherits(SError, VError);\n\n/*\n * Represents a collection of errors for the purpose of consumers that generally\n * only deal with one error.  Callers can extract the individual errors\n * contained in this object, but may also just treat it as a normal single\n * error, in which case a summary message will be printed.\n */\nfunction MultiError(errors) {\n  mod_assertplus.array(errors, 'list of errors');\n  mod_assertplus.ok(errors.length > 0, 'must be at least one error');\n  this.ase_errors = errors;\n  VError.call(this, {\n    'cause': errors[0]\n  }, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\n}\nmod_util.inherits(MultiError, VError);\nMultiError.prototype.name = 'MultiError';\nMultiError.prototype.errors = function me_errors() {\n  return this.ase_errors.slice(0);\n};\n\n/*\n * See README.md for reference details.\n */\nfunction WError() {\n  var args, obj, parsed, options;\n  args = Array.prototype.slice.call(arguments, 0);\n  if (!(this instanceof WError)) {\n    obj = Object.create(WError.prototype);\n    WError.apply(obj, args);\n    return obj;\n  }\n  parsed = parseConstructorArguments({\n    'argv': args,\n    'strict': false\n  });\n  options = parsed.options;\n  options['skipCauseMessage'] = true;\n  VError.call(this, options, '%s', parsed.shortmessage);\n  return this;\n}\nmod_util.inherits(WError, VError);\nWError.prototype.name = 'WError';\nWError.prototype.toString = function we_toString() {\n  var str = this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name;\n  if (this.message) str += ': ' + this.message;\n  if (this.jse_cause && this.jse_cause.message) str += '; caused by ' + this.jse_cause.toString();\n  return str;\n};\n\n/*\n * For purely historical reasons, WError's cause() function allows you to set\n * the cause.\n */\nWError.prototype.cause = function we_cause(c) {\n  if (mod_isError(c)) this.jse_cause = c;\n  return this.jse_cause;\n};","map":{"version":3,"names":["mod_assertplus","require","mod_util","mod_extsprintf","mod_isError","isError","sprintf","module","exports","VError","SError","WError","MultiError","parseConstructorArguments","args","argv","options","sprintf_args","shortmessage","k","object","bool","strict","array","length","slice","string","map","a","undefined","apply","obj","parsed","cause","ctor","message","Array","prototype","call","arguments","Object","create","name","jse_shortmsg","ok","jse_cause","skipCauseMessage","jse_info","info","Error","captureStackTrace","constructorOpt","constructor","inherits","toString","ve_toString","str","hasOwnProperty","ve_cause","err","rv","findCauseByName","hasCauseWithName","fullStack","stack","errorFromList","errors","arrayOfObject","forEach","e","errorForEach","func","iterError","ase_errors","me_errors","we_toString","we_cause","c"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/verror/lib/verror.js"],"sourcesContent":["/*\n * verror.js: richer JavaScript errors\n */\n\nvar mod_assertplus = require('assert-plus');\nvar mod_util = require('util');\n\nvar mod_extsprintf = require('extsprintf');\nvar mod_isError = require('core-util-is').isError;\nvar sprintf = mod_extsprintf.sprintf;\n\n/*\n * Public interface\n */\n\n/* So you can 'var VError = require('verror')' */\nmodule.exports = VError;\n/* For compatibility */\nVError.VError = VError;\n/* Other exported classes */\nVError.SError = SError;\nVError.WError = WError;\nVError.MultiError = MultiError;\n\n/*\n * Common function used to parse constructor arguments for VError, WError, and\n * SError.  Named arguments to this function:\n *\n *     strict\t\tforce strict interpretation of sprintf arguments, even\n *     \t\t\tif the options in \"argv\" don't say so\n *\n *     argv\t\terror's constructor arguments, which are to be\n *     \t\t\tinterpreted as described in README.md.  For quick\n *     \t\t\treference, \"argv\" has one of the following forms:\n *\n *          [ sprintf_args... ]           (argv[0] is a string)\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\n *          [ options, sprintf_args... ]  (argv[0] is an object)\n *\n * This function normalizes these forms, producing an object with the following\n * properties:\n *\n *    options           equivalent to \"options\" in third form.  This will never\n *    \t\t\tbe a direct reference to what the caller passed in\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\n *    \t\t\tmodified.\n *\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\n *    \t\t\tinto account as described in README.md.\n */\nfunction parseConstructorArguments(args)\n{\n\tvar argv, options, sprintf_args, shortmessage, k;\n\n\tmod_assertplus.object(args, 'args');\n\tmod_assertplus.bool(args.strict, 'args.strict');\n\tmod_assertplus.array(args.argv, 'args.argv');\n\targv = args.argv;\n\n\t/*\n\t * First, figure out which form of invocation we've been given.\n\t */\n\tif (argv.length === 0) {\n\t\toptions = {};\n\t\tsprintf_args = [];\n\t} else if (mod_isError(argv[0])) {\n\t\toptions = { 'cause': argv[0] };\n\t\tsprintf_args = argv.slice(1);\n\t} else if (typeof (argv[0]) === 'object') {\n\t\toptions = {};\n\t\tfor (k in argv[0]) {\n\t\t\toptions[k] = argv[0][k];\n\t\t}\n\t\tsprintf_args = argv.slice(1);\n\t} else {\n\t\tmod_assertplus.string(argv[0],\n\t\t    'first argument to VError, SError, or WError ' +\n\t\t    'constructor must be a string, object, or Error');\n\t\toptions = {};\n\t\tsprintf_args = argv;\n\t}\n\n\t/*\n\t * Now construct the error's message.\n\t *\n\t * extsprintf (which we invoke here with our caller's arguments in order\n\t * to construct this Error's message) is strict in its interpretation of\n\t * values to be processed by the \"%s\" specifier.  The value passed to\n\t * extsprintf must actually be a string or something convertible to a\n\t * String using .toString().  Passing other values (notably \"null\" and\n\t * \"undefined\") is considered a programmer error.  The assumption is\n\t * that if you actually want to print the string \"null\" or \"undefined\",\n\t * then that's easy to do that when you're calling extsprintf; on the\n\t * other hand, if you did NOT want that (i.e., there's actually a bug\n\t * where the program assumes some variable is non-null and tries to\n\t * print it, which might happen when constructing a packet or file in\n\t * some specific format), then it's better to stop immediately than\n\t * produce bogus output.\n\t *\n\t * However, sometimes the bug is only in the code calling VError, and a\n\t * programmer might prefer to have the error message contain \"null\" or\n\t * \"undefined\" rather than have the bug in the error path crash the\n\t * program (making the first bug harder to identify).  For that reason,\n\t * by default VError converts \"null\" or \"undefined\" arguments to their\n\t * string representations and passes those to extsprintf.  Programmers\n\t * desiring the strict behavior can use the SError class or pass the\n\t * \"strict\" option to the VError constructor.\n\t */\n\tmod_assertplus.object(options);\n\tif (!options.strict && !args.strict) {\n\t\tsprintf_args = sprintf_args.map(function (a) {\n\t\t\treturn (a === null ? 'null' :\n\t\t\t    a === undefined ? 'undefined' : a);\n\t\t});\n\t}\n\n\tif (sprintf_args.length === 0) {\n\t\tshortmessage = '';\n\t} else {\n\t\tshortmessage = sprintf.apply(null, sprintf_args);\n\t}\n\n\treturn ({\n\t    'options': options,\n\t    'shortmessage': shortmessage\n\t});\n}\n\n/*\n * See README.md for reference documentation.\n */\nfunction VError()\n{\n\tvar args, obj, parsed, cause, ctor, message, k;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\n\t/*\n\t * This is a regrettable pattern, but JavaScript's built-in Error class\n\t * is defined to work this way, so we allow the constructor to be called\n\t * without \"new\".\n\t */\n\tif (!(this instanceof VError)) {\n\t\tobj = Object.create(VError.prototype);\n\t\tVError.apply(obj, arguments);\n\t\treturn (obj);\n\t}\n\n\t/*\n\t * For convenience and backwards compatibility, we support several\n\t * different calling forms.  Normalize them here.\n\t */\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': false\n\t});\n\n\t/*\n\t * If we've been given a name, apply it now.\n\t */\n\tif (parsed.options.name) {\n\t\tmod_assertplus.string(parsed.options.name,\n\t\t    'error\\'s \"name\" must be a string');\n\t\tthis.name = parsed.options.name;\n\t}\n\n\t/*\n\t * For debugging, we keep track of the original short message (attached\n\t * this Error particularly) separately from the complete message (which\n\t * includes the messages of our cause chain).\n\t */\n\tthis.jse_shortmsg = parsed.shortmessage;\n\tmessage = parsed.shortmessage;\n\n\t/*\n\t * If we've been given a cause, record a reference to it and update our\n\t * message appropriately.\n\t */\n\tcause = parsed.options.cause;\n\tif (cause) {\n\t\tmod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\n\t\tthis.jse_cause = cause;\n\n\t\tif (!parsed.options.skipCauseMessage) {\n\t\t\tmessage += ': ' + cause.message;\n\t\t}\n\t}\n\n\t/*\n\t * If we've been given an object with properties, shallow-copy that\n\t * here.  We don't want to use a deep copy in case there are non-plain\n\t * objects here, but we don't want to use the original object in case\n\t * the caller modifies it later.\n\t */\n\tthis.jse_info = {};\n\tif (parsed.options.info) {\n\t\tfor (k in parsed.options.info) {\n\t\t\tthis.jse_info[k] = parsed.options.info[k];\n\t\t}\n\t}\n\n\tthis.message = message;\n\tError.call(this, message);\n\n\tif (Error.captureStackTrace) {\n\t\tctor = parsed.options.constructorOpt || this.constructor;\n\t\tError.captureStackTrace(this, ctor);\n\t}\n\n\treturn (this);\n}\n\nmod_util.inherits(VError, Error);\nVError.prototype.name = 'VError';\n\nVError.prototype.toString = function ve_toString()\n{\n\tvar str = (this.hasOwnProperty('name') && this.name ||\n\t\tthis.constructor.name || this.constructor.prototype.name);\n\tif (this.message)\n\t\tstr += ': ' + this.message;\n\n\treturn (str);\n};\n\n/*\n * This method is provided for compatibility.  New callers should use\n * VError.cause() instead.  That method also uses the saner `null` return value\n * when there is no cause.\n */\nVError.prototype.cause = function ve_cause()\n{\n\tvar cause = VError.cause(this);\n\treturn (cause === null ? undefined : cause);\n};\n\n/*\n * Static methods\n *\n * These class-level methods are provided so that callers can use them on\n * instances of Errors that are not VErrors.  New interfaces should be provided\n * only using static methods to eliminate the class of programming mistake where\n * people fail to check whether the Error object has the corresponding methods.\n */\n\nVError.cause = function (err)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\treturn (mod_isError(err.jse_cause) ? err.jse_cause : null);\n};\n\nVError.info = function (err)\n{\n\tvar rv, cause, k;\n\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tcause = VError.cause(err);\n\tif (cause !== null) {\n\t\trv = VError.info(cause);\n\t} else {\n\t\trv = {};\n\t}\n\n\tif (typeof (err.jse_info) == 'object' && err.jse_info !== null) {\n\t\tfor (k in err.jse_info) {\n\t\t\trv[k] = err.jse_info[k];\n\t\t}\n\t}\n\n\treturn (rv);\n};\n\nVError.findCauseByName = function (err, name)\n{\n\tvar cause;\n\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tmod_assertplus.string(name, 'name');\n\tmod_assertplus.ok(name.length > 0, 'name cannot be empty');\n\n\tfor (cause = err; cause !== null; cause = VError.cause(cause)) {\n\t\tmod_assertplus.ok(mod_isError(cause));\n\t\tif (cause.name == name) {\n\t\t\treturn (cause);\n\t\t}\n\t}\n\n\treturn (null);\n};\n\nVError.hasCauseWithName = function (err, name)\n{\n\treturn (VError.findCauseByName(err, name) !== null);\n};\n\nVError.fullStack = function (err)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\n\tvar cause = VError.cause(err);\n\n\tif (cause) {\n\t\treturn (err.stack + '\\ncaused by: ' + VError.fullStack(cause));\n\t}\n\n\treturn (err.stack);\n};\n\nVError.errorFromList = function (errors)\n{\n\tmod_assertplus.arrayOfObject(errors, 'errors');\n\n\tif (errors.length === 0) {\n\t\treturn (null);\n\t}\n\n\terrors.forEach(function (e) {\n\t\tmod_assertplus.ok(mod_isError(e));\n\t});\n\n\tif (errors.length == 1) {\n\t\treturn (errors[0]);\n\t}\n\n\treturn (new MultiError(errors));\n};\n\nVError.errorForEach = function (err, func)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tmod_assertplus.func(func, 'func');\n\n\tif (err instanceof MultiError) {\n\t\terr.errors().forEach(function iterError(e) { func(e); });\n\t} else {\n\t\tfunc(err);\n\t}\n};\n\n\n/*\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\n * \"undefined\" as string arguments to the formatter.\n */\nfunction SError()\n{\n\tvar args, obj, parsed, options;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\tif (!(this instanceof SError)) {\n\t\tobj = Object.create(SError.prototype);\n\t\tSError.apply(obj, arguments);\n\t\treturn (obj);\n\t}\n\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': true\n\t});\n\n\toptions = parsed.options;\n\tVError.call(this, options, '%s', parsed.shortmessage);\n\n\treturn (this);\n}\n\n/*\n * We don't bother setting SError.prototype.name because once constructed,\n * SErrors are just like VErrors.\n */\nmod_util.inherits(SError, VError);\n\n\n/*\n * Represents a collection of errors for the purpose of consumers that generally\n * only deal with one error.  Callers can extract the individual errors\n * contained in this object, but may also just treat it as a normal single\n * error, in which case a summary message will be printed.\n */\nfunction MultiError(errors)\n{\n\tmod_assertplus.array(errors, 'list of errors');\n\tmod_assertplus.ok(errors.length > 0, 'must be at least one error');\n\tthis.ase_errors = errors;\n\n\tVError.call(this, {\n\t    'cause': errors[0]\n\t}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\n}\n\nmod_util.inherits(MultiError, VError);\nMultiError.prototype.name = 'MultiError';\n\nMultiError.prototype.errors = function me_errors()\n{\n\treturn (this.ase_errors.slice(0));\n};\n\n\n/*\n * See README.md for reference details.\n */\nfunction WError()\n{\n\tvar args, obj, parsed, options;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\tif (!(this instanceof WError)) {\n\t\tobj = Object.create(WError.prototype);\n\t\tWError.apply(obj, args);\n\t\treturn (obj);\n\t}\n\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': false\n\t});\n\n\toptions = parsed.options;\n\toptions['skipCauseMessage'] = true;\n\tVError.call(this, options, '%s', parsed.shortmessage);\n\n\treturn (this);\n}\n\nmod_util.inherits(WError, VError);\nWError.prototype.name = 'WError';\n\nWError.prototype.toString = function we_toString()\n{\n\tvar str = (this.hasOwnProperty('name') && this.name ||\n\t\tthis.constructor.name || this.constructor.prototype.name);\n\tif (this.message)\n\t\tstr += ': ' + this.message;\n\tif (this.jse_cause && this.jse_cause.message)\n\t\tstr += '; caused by ' + this.jse_cause.toString();\n\n\treturn (str);\n};\n\n/*\n * For purely historical reasons, WError's cause() function allows you to set\n * the cause.\n */\nWError.prototype.cause = function we_cause(c)\n{\n\tif (mod_isError(c))\n\t\tthis.jse_cause = c;\n\n\treturn (this.jse_cause);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}