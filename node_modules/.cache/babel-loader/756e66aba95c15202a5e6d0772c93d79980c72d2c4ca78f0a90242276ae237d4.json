{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n  read: read,\n  write: write\n};\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar Key = require('../key');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar PrivateKey = require('../private-key');\nvar errors = require('../errors');\n\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n  var lines = buf.toString('ascii').split(/[\\r\\n]+/);\n  var found = false;\n  var parts;\n  var si = 0;\n  var formatVersion;\n  while (si < lines.length) {\n    parts = splitHeader(lines[si++]);\n    if (parts) {\n      formatVersion = {\n        'putty-user-key-file-2': 2,\n        'putty-user-key-file-3': 3\n      }[parts[0].toLowerCase()];\n      if (formatVersion) {\n        found = true;\n        break;\n      }\n    }\n  }\n  if (!found) {\n    throw new Error('No PuTTY format first line found');\n  }\n  var alg = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'encryption');\n  var encryption = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'comment');\n  var comment = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'public-lines');\n  var publicLines = parseInt(parts[1], 10);\n  if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n    throw new Error('Invalid public-lines count');\n  }\n  var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(''), 'base64');\n  var keyType = rfc4253.algToKeyType(alg);\n  var key = rfc4253.read(publicBuf);\n  if (key.type !== keyType) {\n    throw new Error('Outer key algorithm mismatch');\n  }\n  si += publicLines;\n  if (lines[si]) {\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), 'private-lines');\n    var privateLines = parseInt(parts[1], 10);\n    if (!isFinite(privateLines) || privateLines < 0 || privateLines > lines.length) {\n      throw new Error('Invalid private-lines count');\n    }\n    var privateBuf = Buffer.from(lines.slice(si, si + privateLines).join(''), 'base64');\n    if (encryption !== 'none' && formatVersion === 3) {\n      throw new Error('Encrypted keys arenot supported for' + ' PuTTY format version 3');\n    }\n    if (encryption === 'aes256-cbc') {\n      if (!options.passphrase) {\n        throw new errors.KeyEncryptedError(options.filename, 'PEM');\n      }\n      var iv = Buffer.alloc(16, 0);\n      var decipher = crypto.createDecipheriv('aes-256-cbc', derivePPK2EncryptionKey(options.passphrase), iv);\n      decipher.setAutoPadding(false);\n      privateBuf = Buffer.concat([decipher.update(privateBuf), decipher.final()]);\n    }\n    key = new PrivateKey(key);\n    if (key.type !== keyType) {\n      throw new Error('Outer key algorithm mismatch');\n    }\n    var sshbuf = new SSHBuffer({\n      buffer: privateBuf\n    });\n    var privateKeyParts;\n    if (alg === 'ssh-dss') {\n      privateKeyParts = [{\n        name: 'x',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg === 'ssh-rsa') {\n      privateKeyParts = [{\n        name: 'd',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'p',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'q',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'iqmp',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg.match(/^ecdsa-sha2-nistp/)) {\n      privateKeyParts = [{\n        name: 'd',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg === 'ssh-ed25519') {\n      privateKeyParts = [{\n        name: 'k',\n        data: sshbuf.readBuffer()\n      }];\n    } else {\n      throw new Error('Unsupported PPK key type: ' + alg);\n    }\n    key = new PrivateKey({\n      type: key.type,\n      parts: key.parts.concat(privateKeyParts)\n    });\n  }\n  key.comment = comment;\n  return key;\n}\nfunction derivePPK2EncryptionKey(passphrase) {\n  var hash1 = crypto.createHash('sha1').update(Buffer.concat([Buffer.from([0, 0, 0, 0]), Buffer.from(passphrase)])).digest();\n  var hash2 = crypto.createHash('sha1').update(Buffer.concat([Buffer.from([0, 0, 0, 1]), Buffer.from(passphrase)])).digest();\n  return Buffer.concat([hash1, hash2]).slice(0, 32);\n}\nfunction splitHeader(line) {\n  var idx = line.indexOf(':');\n  if (idx === -1) return null;\n  var header = line.slice(0, idx);\n  ++idx;\n  while (line[idx] === ' ') ++idx;\n  var rest = line.slice(idx);\n  return [header, rest];\n}\nfunction write(key, options) {\n  assert.object(key);\n  if (!Key.isKey(key)) throw new Error('Must be a public key');\n  var alg = rfc4253.keyTypeToAlg(key);\n  var buf = rfc4253.write(key);\n  var comment = key.comment || '';\n  var b64 = buf.toString('base64');\n  var lines = wrap(b64, 64);\n  lines.unshift('Public-Lines: ' + lines.length);\n  lines.unshift('Comment: ' + comment);\n  lines.unshift('Encryption: none');\n  lines.unshift('PuTTY-User-Key-File-2: ' + alg);\n  return Buffer.from(lines.join('\\n') + '\\n');\n}\nfunction wrap(txt, len) {\n  var lines = [];\n  var pos = 0;\n  while (pos < txt.length) {\n    lines.push(txt.slice(pos, pos + 64));\n    pos += 64;\n  }\n  return lines;\n}","map":{"version":3,"names":["module","exports","read","write","assert","require","Buffer","rfc4253","Key","SSHBuffer","crypto","PrivateKey","errors","buf","options","lines","toString","split","found","parts","si","formatVersion","length","splitHeader","toLowerCase","Error","alg","equal","encryption","comment","publicLines","parseInt","isFinite","publicBuf","from","slice","join","keyType","algToKeyType","key","type","privateLines","privateBuf","passphrase","KeyEncryptedError","filename","iv","alloc","decipher","createDecipheriv","derivePPK2EncryptionKey","setAutoPadding","concat","update","final","sshbuf","buffer","privateKeyParts","name","data","readBuffer","match","hash1","createHash","digest","hash2","line","idx","indexOf","header","rest","object","isKey","keyTypeToAlg","b64","wrap","unshift","txt","len","pos","push"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/formats/putty.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar Key = require('../key');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar PrivateKey = require('../private-key');\n\nvar errors = require('../errors');\n\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n\tvar lines = buf.toString('ascii').split(/[\\r\\n]+/);\n\tvar found = false;\n\tvar parts;\n\tvar si = 0;\n\tvar formatVersion;\n\twhile (si < lines.length) {\n\t\tparts = splitHeader(lines[si++]);\n\t\tif (parts) {\n\t\t\tformatVersion = {\n\t\t\t\t'putty-user-key-file-2': 2,\n\t\t\t\t'putty-user-key-file-3': 3\n\t\t\t}[parts[0].toLowerCase()];\n\t\t\tif (formatVersion) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (!found) {\n\t\tthrow (new Error('No PuTTY format first line found'));\n\t}\n\tvar alg = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'encryption');\n\tvar encryption = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'comment');\n\tvar comment = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'public-lines');\n\tvar publicLines = parseInt(parts[1], 10);\n\tif (!isFinite(publicLines) || publicLines < 0 ||\n\t    publicLines > lines.length) {\n\t\tthrow (new Error('Invalid public-lines count'));\n\t}\n\n\tvar publicBuf = Buffer.from(\n\t    lines.slice(si, si + publicLines).join(''), 'base64');\n\tvar keyType = rfc4253.algToKeyType(alg);\n\tvar key = rfc4253.read(publicBuf);\n\tif (key.type !== keyType) {\n\t\tthrow (new Error('Outer key algorithm mismatch'));\n\t}\n\n\tsi += publicLines;\n\tif (lines[si]) {\n\t\tparts = splitHeader(lines[si++]);\n\t\tassert.equal(parts[0].toLowerCase(), 'private-lines');\n\t\tvar privateLines = parseInt(parts[1], 10);\n\t\tif (!isFinite(privateLines) || privateLines < 0 ||\n\t\t    privateLines > lines.length) {\n\t\t\tthrow (new Error('Invalid private-lines count'));\n\t\t}\n\n\t\tvar privateBuf = Buffer.from(\n\t\t\tlines.slice(si, si + privateLines).join(''), 'base64');\n\n\t\tif (encryption !== 'none' && formatVersion === 3) {\n\t\t\tthrow new Error('Encrypted keys arenot supported for' +\n\t\t\t' PuTTY format version 3');\n\t\t}\n\n\t\tif (encryption === 'aes256-cbc') {\n\t\t\tif (!options.passphrase) {\n\t\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t\t\toptions.filename, 'PEM'));\n\t\t\t}\n\n\t\t\tvar iv = Buffer.alloc(16, 0);\n\t\t\tvar decipher = crypto.createDecipheriv(\n\t\t\t\t'aes-256-cbc',\n\t\t\t\tderivePPK2EncryptionKey(options.passphrase),\n\t\t\t\tiv);\n\t\t\tdecipher.setAutoPadding(false);\n\t\t\tprivateBuf = Buffer.concat([\n\t\t\t\tdecipher.update(privateBuf), decipher.final()]);\n\t\t}\n\n\t\tkey = new PrivateKey(key);\n\t\tif (key.type !== keyType) {\n\t\t\tthrow (new Error('Outer key algorithm mismatch'));\n\t\t}\n\n\t\tvar sshbuf = new SSHBuffer({buffer: privateBuf});\n\t\tvar privateKeyParts;\n\t\tif (alg === 'ssh-dss') {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'x',\n\t\t\t\tdata: sshbuf.readBuffer()\n\t\t\t}];\n\t\t} else if (alg === 'ssh-rsa') {\n\t\t\tprivateKeyParts = [\n\t\t\t\t{ name: 'd', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'p', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'q', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'iqmp', data: sshbuf.readBuffer() }\n\t\t\t];\n\t\t} else if (alg.match(/^ecdsa-sha2-nistp/)) {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'd', data: sshbuf.readBuffer()\n\t\t\t} ];\n\t\t} else if (alg === 'ssh-ed25519') {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'k', data: sshbuf.readBuffer()\n\t\t\t} ];\n\t\t} else {\n\t\t\tthrow new Error('Unsupported PPK key type: ' + alg);\n\t\t}\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: key.type,\n\t\t\tparts: key.parts.concat(privateKeyParts)\n\t\t});\n\t}\n\n\tkey.comment = comment;\n\treturn (key);\n}\n\nfunction derivePPK2EncryptionKey(passphrase) {\n\tvar hash1 = crypto.createHash('sha1').update(Buffer.concat([\n\t\tBuffer.from([0, 0, 0, 0]),\n\t\tBuffer.from(passphrase)\n\t])).digest();\n\tvar hash2 = crypto.createHash('sha1').update(Buffer.concat([\n\t\tBuffer.from([0, 0, 0, 1]),\n\t\tBuffer.from(passphrase)\n\t])).digest();\n\treturn (Buffer.concat([hash1, hash2]).slice(0, 32));\n}\n\nfunction splitHeader(line) {\n\tvar idx = line.indexOf(':');\n\tif (idx === -1)\n\t\treturn (null);\n\tvar header = line.slice(0, idx);\n\t++idx;\n\twhile (line[idx] === ' ')\n\t\t++idx;\n\tvar rest = line.slice(idx);\n\treturn ([header, rest]);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tvar buf = rfc4253.write(key);\n\tvar comment = key.comment || '';\n\n\tvar b64 = buf.toString('base64');\n\tvar lines = wrap(b64, 64);\n\n\tlines.unshift('Public-Lines: ' + lines.length);\n\tlines.unshift('Comment: ' + comment);\n\tlines.unshift('Encryption: none');\n\tlines.unshift('PuTTY-User-Key-File-2: ' + alg);\n\n\treturn (Buffer.from(lines.join('\\n') + '\\n'));\n}\n\nfunction wrap(txt, len) {\n\tvar lines = [];\n\tvar pos = 0;\n\twhile (pos < txt.length) {\n\t\tlines.push(txt.slice(pos, pos + 64));\n\t\tpos += 64;\n\t}\n\treturn (lines);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}