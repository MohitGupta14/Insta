{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Fingerprint;\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Certificate = require('./certificate');\nvar utils = require('./utils');\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Fingerprint(opts) {\n  assert.object(opts, 'options');\n  assert.string(opts.type, 'options.type');\n  assert.buffer(opts.hash, 'options.hash');\n  assert.string(opts.algorithm, 'options.algorithm');\n  this.algorithm = opts.algorithm.toLowerCase();\n  if (algs.hashAlgs[this.algorithm] !== true) throw new InvalidAlgorithmError(this.algorithm);\n  this.hash = opts.hash;\n  this.type = opts.type;\n  this.hashType = opts.hashType;\n}\nFingerprint.prototype.toString = function (format) {\n  if (format === undefined) {\n    if (this.algorithm === 'md5' || this.hashType === 'spki') format = 'hex';else format = 'base64';\n  }\n  assert.string(format);\n  switch (format) {\n    case 'hex':\n      if (this.hashType === 'spki') return this.hash.toString('hex');\n      return addColons(this.hash.toString('hex'));\n    case 'base64':\n      if (this.hashType === 'spki') return this.hash.toString('base64');\n      return sshBase64Format(this.algorithm, this.hash.toString('base64'));\n    default:\n      throw new FingerprintFormatError(undefined, format);\n  }\n};\nFingerprint.prototype.matches = function (other) {\n  assert.object(other, 'key or certificate');\n  if (this.type === 'key' && this.hashType !== 'ssh') {\n    utils.assertCompatible(other, Key, [1, 7], 'key with spki');\n    if (PrivateKey.isPrivateKey(other)) {\n      utils.assertCompatible(other, PrivateKey, [1, 6], 'privatekey with spki support');\n    }\n  } else if (this.type === 'key') {\n    utils.assertCompatible(other, Key, [1, 0], 'key');\n  } else {\n    utils.assertCompatible(other, Certificate, [1, 0], 'certificate');\n  }\n  var theirHash = other.hash(this.algorithm, this.hashType);\n  var theirHash2 = crypto.createHash(this.algorithm).update(theirHash).digest('base64');\n  if (this.hash2 === undefined) this.hash2 = crypto.createHash(this.algorithm).update(this.hash).digest('base64');\n  return this.hash2 === theirHash2;\n};\n\n/*JSSTYLED*/\nvar base64RE = /^[A-Za-z0-9+\\/=]+$/;\n/*JSSTYLED*/\nvar hexRE = /^[a-fA-F0-9]+$/;\nFingerprint.parse = function (fp, options) {\n  assert.string(fp, 'fingerprint');\n  var alg, hash, enAlgs;\n  if (Array.isArray(options)) {\n    enAlgs = options;\n    options = {};\n  }\n  assert.optionalObject(options, 'options');\n  if (options === undefined) options = {};\n  if (options.enAlgs !== undefined) enAlgs = options.enAlgs;\n  if (options.algorithms !== undefined) enAlgs = options.algorithms;\n  assert.optionalArrayOfString(enAlgs, 'algorithms');\n  var hashType = 'ssh';\n  if (options.hashType !== undefined) hashType = options.hashType;\n  assert.string(hashType, 'options.hashType');\n  var parts = fp.split(':');\n  if (parts.length == 2) {\n    alg = parts[0].toLowerCase();\n    if (!base64RE.test(parts[1])) throw new FingerprintFormatError(fp);\n    try {\n      hash = Buffer.from(parts[1], 'base64');\n    } catch (e) {\n      throw new FingerprintFormatError(fp);\n    }\n  } else if (parts.length > 2) {\n    alg = 'md5';\n    if (parts[0].toLowerCase() === 'md5') parts = parts.slice(1);\n    parts = parts.map(function (p) {\n      while (p.length < 2) p = '0' + p;\n      if (p.length > 2) throw new FingerprintFormatError(fp);\n      return p;\n    });\n    parts = parts.join('');\n    if (!hexRE.test(parts) || parts.length % 2 !== 0) throw new FingerprintFormatError(fp);\n    try {\n      hash = Buffer.from(parts, 'hex');\n    } catch (e) {\n      throw new FingerprintFormatError(fp);\n    }\n  } else {\n    if (hexRE.test(fp)) {\n      hash = Buffer.from(fp, 'hex');\n    } else if (base64RE.test(fp)) {\n      hash = Buffer.from(fp, 'base64');\n    } else {\n      throw new FingerprintFormatError(fp);\n    }\n    switch (hash.length) {\n      case 32:\n        alg = 'sha256';\n        break;\n      case 16:\n        alg = 'md5';\n        break;\n      case 20:\n        alg = 'sha1';\n        break;\n      case 64:\n        alg = 'sha512';\n        break;\n      default:\n        throw new FingerprintFormatError(fp);\n    }\n\n    /* Plain hex/base64: guess it's probably SPKI unless told. */\n    if (options.hashType === undefined) hashType = 'spki';\n  }\n  if (alg === undefined) throw new FingerprintFormatError(fp);\n  if (algs.hashAlgs[alg] === undefined) throw new InvalidAlgorithmError(alg);\n  if (enAlgs !== undefined) {\n    enAlgs = enAlgs.map(function (a) {\n      return a.toLowerCase();\n    });\n    if (enAlgs.indexOf(alg) === -1) throw new InvalidAlgorithmError(alg);\n  }\n  return new Fingerprint({\n    algorithm: alg,\n    hash: hash,\n    type: options.type || 'key',\n    hashType: hashType\n  });\n};\nfunction addColons(s) {\n  /*JSSTYLED*/\n  return s.replace(/(.{2})(?=.)/g, '$1:');\n}\nfunction base64Strip(s) {\n  /*JSSTYLED*/\n  return s.replace(/=*$/, '');\n}\nfunction sshBase64Format(alg, h) {\n  return alg.toUpperCase() + ':' + base64Strip(h);\n}\nFingerprint.isFingerprint = function (obj, ver) {\n  return utils.isCompatible(obj, Fingerprint, ver);\n};\n\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n * [1,2] -- hashType and spki support\n */\nFingerprint.prototype._sshpkApiVersion = [1, 2];\nFingerprint._oldVersionDetect = function (obj) {\n  assert.func(obj.toString);\n  assert.func(obj.matches);\n  return [1, 0];\n};","map":{"version":3,"names":["module","exports","Fingerprint","assert","require","Buffer","algs","crypto","errs","Key","PrivateKey","Certificate","utils","FingerprintFormatError","InvalidAlgorithmError","opts","object","string","type","buffer","hash","algorithm","toLowerCase","hashAlgs","hashType","prototype","toString","format","undefined","addColons","sshBase64Format","matches","other","assertCompatible","isPrivateKey","theirHash","theirHash2","createHash","update","digest","hash2","base64RE","hexRE","parse","fp","options","alg","enAlgs","Array","isArray","optionalObject","algorithms","optionalArrayOfString","parts","split","length","test","from","e","slice","map","p","join","a","indexOf","s","replace","base64Strip","h","toUpperCase","isFingerprint","obj","ver","isCompatible","_sshpkApiVersion","_oldVersionDetect","func"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/fingerprint.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Fingerprint;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Certificate = require('./certificate');\nvar utils = require('./utils');\n\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Fingerprint(opts) {\n\tassert.object(opts, 'options');\n\tassert.string(opts.type, 'options.type');\n\tassert.buffer(opts.hash, 'options.hash');\n\tassert.string(opts.algorithm, 'options.algorithm');\n\n\tthis.algorithm = opts.algorithm.toLowerCase();\n\tif (algs.hashAlgs[this.algorithm] !== true)\n\t\tthrow (new InvalidAlgorithmError(this.algorithm));\n\n\tthis.hash = opts.hash;\n\tthis.type = opts.type;\n\tthis.hashType = opts.hashType;\n}\n\nFingerprint.prototype.toString = function (format) {\n\tif (format === undefined) {\n\t\tif (this.algorithm === 'md5' || this.hashType === 'spki')\n\t\t\tformat = 'hex';\n\t\telse\n\t\t\tformat = 'base64';\n\t}\n\tassert.string(format);\n\n\tswitch (format) {\n\tcase 'hex':\n\t\tif (this.hashType === 'spki')\n\t\t\treturn (this.hash.toString('hex'));\n\t\treturn (addColons(this.hash.toString('hex')));\n\tcase 'base64':\n\t\tif (this.hashType === 'spki')\n\t\t\treturn (this.hash.toString('base64'));\n\t\treturn (sshBase64Format(this.algorithm,\n\t\t    this.hash.toString('base64')));\n\tdefault:\n\t\tthrow (new FingerprintFormatError(undefined, format));\n\t}\n};\n\nFingerprint.prototype.matches = function (other) {\n\tassert.object(other, 'key or certificate');\n\tif (this.type === 'key' && this.hashType !== 'ssh') {\n\t\tutils.assertCompatible(other, Key, [1, 7], 'key with spki');\n\t\tif (PrivateKey.isPrivateKey(other)) {\n\t\t\tutils.assertCompatible(other, PrivateKey, [1, 6],\n\t\t\t    'privatekey with spki support');\n\t\t}\n\t} else if (this.type === 'key') {\n\t\tutils.assertCompatible(other, Key, [1, 0], 'key');\n\t} else {\n\t\tutils.assertCompatible(other, Certificate, [1, 0],\n\t\t    'certificate');\n\t}\n\n\tvar theirHash = other.hash(this.algorithm, this.hashType);\n\tvar theirHash2 = crypto.createHash(this.algorithm).\n\t    update(theirHash).digest('base64');\n\n\tif (this.hash2 === undefined)\n\t\tthis.hash2 = crypto.createHash(this.algorithm).\n\t\t    update(this.hash).digest('base64');\n\n\treturn (this.hash2 === theirHash2);\n};\n\n/*JSSTYLED*/\nvar base64RE = /^[A-Za-z0-9+\\/=]+$/;\n/*JSSTYLED*/\nvar hexRE = /^[a-fA-F0-9]+$/;\n\nFingerprint.parse = function (fp, options) {\n\tassert.string(fp, 'fingerprint');\n\n\tvar alg, hash, enAlgs;\n\tif (Array.isArray(options)) {\n\t\tenAlgs = options;\n\t\toptions = {};\n\t}\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tif (options.enAlgs !== undefined)\n\t\tenAlgs = options.enAlgs;\n\tif (options.algorithms !== undefined)\n\t\tenAlgs = options.algorithms;\n\tassert.optionalArrayOfString(enAlgs, 'algorithms');\n\n\tvar hashType = 'ssh';\n\tif (options.hashType !== undefined)\n\t\thashType = options.hashType;\n\tassert.string(hashType, 'options.hashType');\n\n\tvar parts = fp.split(':');\n\tif (parts.length == 2) {\n\t\talg = parts[0].toLowerCase();\n\t\tif (!base64RE.test(parts[1]))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = Buffer.from(parts[1], 'base64');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t} else if (parts.length > 2) {\n\t\talg = 'md5';\n\t\tif (parts[0].toLowerCase() === 'md5')\n\t\t\tparts = parts.slice(1);\n\t\tparts = parts.map(function (p) {\n\t\t\twhile (p.length < 2)\n\t\t\t\tp = '0' + p;\n\t\t\tif (p.length > 2)\n\t\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t\treturn (p);\n\t\t});\n\t\tparts = parts.join('');\n\t\tif (!hexRE.test(parts) || parts.length % 2 !== 0)\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = Buffer.from(parts, 'hex');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t} else {\n\t\tif (hexRE.test(fp)) {\n\t\t\thash = Buffer.from(fp, 'hex');\n\t\t} else if (base64RE.test(fp)) {\n\t\t\thash = Buffer.from(fp, 'base64');\n\t\t} else {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\n\t\tswitch (hash.length) {\n\t\tcase 32:\n\t\t\talg = 'sha256';\n\t\t\tbreak;\n\t\tcase 16:\n\t\t\talg = 'md5';\n\t\t\tbreak;\n\t\tcase 20:\n\t\t\talg = 'sha1';\n\t\t\tbreak;\n\t\tcase 64:\n\t\t\talg = 'sha512';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\n\t\t/* Plain hex/base64: guess it's probably SPKI unless told. */\n\t\tif (options.hashType === undefined)\n\t\t\thashType = 'spki';\n\t}\n\n\tif (alg === undefined)\n\t\tthrow (new FingerprintFormatError(fp));\n\n\tif (algs.hashAlgs[alg] === undefined)\n\t\tthrow (new InvalidAlgorithmError(alg));\n\n\tif (enAlgs !== undefined) {\n\t\tenAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });\n\t\tif (enAlgs.indexOf(alg) === -1)\n\t\t\tthrow (new InvalidAlgorithmError(alg));\n\t}\n\n\treturn (new Fingerprint({\n\t\talgorithm: alg,\n\t\thash: hash,\n\t\ttype: options.type || 'key',\n\t\thashType: hashType\n\t}));\n};\n\nfunction addColons(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/(.{2})(?=.)/g, '$1:'));\n}\n\nfunction base64Strip(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/=*$/, ''));\n}\n\nfunction sshBase64Format(alg, h) {\n\treturn (alg.toUpperCase() + ':' + base64Strip(h));\n}\n\nFingerprint.isFingerprint = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Fingerprint, ver));\n};\n\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n * [1,2] -- hashType and spki support\n */\nFingerprint.prototype._sshpkApiVersion = [1, 2];\n\nFingerprint._oldVersionDetect = function (obj) {\n\tassert.func(obj.toString);\n\tassert.func(obj.matches);\n\treturn ([1, 0]);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}