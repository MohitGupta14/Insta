{"ast":null,"code":"'use strict';\n\nvar url = require('url');\nvar isUrl = /^https?:/;\nfunction Redirect(request) {\n  this.request = request;\n  this.followRedirect = true;\n  this.followRedirects = true;\n  this.followAllRedirects = false;\n  this.followOriginalHttpMethod = false;\n  this.allowRedirect = function () {\n    return true;\n  };\n  this.maxRedirects = 10;\n  this.redirects = [];\n  this.redirectsFollowed = 0;\n  this.removeRefererHeader = false;\n}\nRedirect.prototype.onRequest = function (options) {\n  var self = this;\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects;\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect;\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect;\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects;\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || [];\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader;\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod;\n  }\n};\nRedirect.prototype.redirectTo = function (response) {\n  var self = this;\n  var request = self.request;\n  var redirectTo = null;\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location');\n    request.debug('redirect', location);\n    if (self.followAllRedirects) {\n      redirectTo = location;\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break;\n        default:\n          redirectTo = location;\n          break;\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response);\n    if (authHeader) {\n      request.setHeader('authorization', authHeader);\n      redirectTo = request.uri;\n    }\n  }\n  return redirectTo;\n};\nRedirect.prototype.onResponse = function (response) {\n  var self = this;\n  var request = self.request;\n  var redirectTo = self.redirectTo(response);\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false;\n  }\n  request.debug('redirect to', redirectTo);\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume();\n  }\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));\n    return false;\n  }\n  self.redirectsFollowed += 1;\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = url.resolve(request.uri.href, redirectTo);\n  }\n  var uriPrev = request.uri;\n  request.uri = url.parse(redirectTo);\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent;\n  }\n  self.redirects.push({\n    statusCode: response.statusCode,\n    redirectUri: redirectTo\n  });\n  if (self.followAllRedirects && request.method !== 'HEAD' && response.statusCode !== 401 && response.statusCode !== 307) {\n    request.method = self.followOriginalHttpMethod ? request.method : 'GET';\n  }\n  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n  delete request.src;\n  delete request.req;\n  delete request._started;\n  if (response.statusCode !== 401 && response.statusCode !== 307) {\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body;\n    delete request._form;\n    if (request.headers) {\n      request.removeHeader('host');\n      request.removeHeader('content-type');\n      request.removeHeader('content-length');\n      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of curl:\n        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n        request.removeHeader('authorization');\n      }\n    }\n  }\n  if (!self.removeRefererHeader) {\n    request.setHeader('referer', uriPrev.href);\n  }\n  request.emit('redirect');\n  request.init();\n  return true;\n};\nexports.Redirect = Redirect;","map":{"version":3,"names":["url","require","isUrl","Redirect","request","followRedirect","followRedirects","followAllRedirects","followOriginalHttpMethod","allowRedirect","maxRedirects","redirects","redirectsFollowed","removeRefererHeader","prototype","onRequest","options","self","undefined","redirectTo","response","statusCode","caseless","has","location","get","debug","method","authHeader","_auth","onResponse","setHeader","uri","call","resume","emit","Error","href","test","resolve","uriPrev","parse","protocol","agent","push","redirectUri","src","req","_started","body","_form","headers","removeHeader","hostname","originalHost","split","init","exports"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/request/lib/redirect.js"],"sourcesContent":["'use strict'\n\nvar url = require('url')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.followOriginalHttpMethod = false\n  this.allowRedirect = function () { return true }\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false\n  }\n\n  request.debug('redirect to', redirectTo)\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume()\n  }\n\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    return false\n  }\n  self.redirectsFollowed += 1\n\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = url.resolve(request.uri.href, redirectTo)\n  }\n\n  var uriPrev = request.uri\n  request.uri = url.parse(redirectTo)\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent\n  }\n\n  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo })\n\n  if (self.followAllRedirects && request.method !== 'HEAD' &&\n    response.statusCode !== 401 && response.statusCode !== 307) {\n    request.method = self.followOriginalHttpMethod ? request.method : 'GET'\n  }\n  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n  delete request.src\n  delete request.req\n  delete request._started\n  if (response.statusCode !== 401 && response.statusCode !== 307) {\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body\n    delete request._form\n    if (request.headers) {\n      request.removeHeader('host')\n      request.removeHeader('content-type')\n      request.removeHeader('content-length')\n      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of curl:\n        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n        request.removeHeader('authorization')\n      }\n    }\n  }\n\n  if (!self.removeRefererHeader) {\n    request.setHeader('referer', uriPrev.href)\n  }\n\n  request.emit('redirect')\n\n  request.init()\n\n  return true\n}\n\nexports.Redirect = Redirect\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}