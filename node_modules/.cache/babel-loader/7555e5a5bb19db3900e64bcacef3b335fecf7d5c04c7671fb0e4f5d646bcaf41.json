{"ast":null,"code":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\nvar sprintf = require('util').format;\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT = 'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n    if (typeof options.key !== 'string' && !Buffer.isBuffer(options.key)) throw new TypeError('options.key for HMAC must be a string or Buffer');\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return {\n        hashAlgorithm: alg[1],\n        toString: function () {\n          return digest;\n        }\n      };\n    };\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof key === 'string' || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(key);\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n    if (!PK_ALGOS[key.type]) {\n      throw new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported');\n    }\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead');\n    }\n    this.rs_signer = key.createSign(alg[1]);\n  } else {\n    throw new TypeError('options.sign (func) or options.key is required');\n  }\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n  this.rs_headers.push(header);\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0) line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n  return value;\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return this.writeHeader('date', jsprim.rfc1123(new Date()));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n  if (this.rs_headers.length < 1) throw new Error('At least one header must be signed');\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n        authz = sprintf(AUTHZ_FMT, sig.keyId, sig.algorithm, self.rs_headers.join(' '), sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT, this.rs_keyId, alg, this.rs_headers.join(' '), signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof obj === 'object' && obj instanceof RequestSigner) return true;\n    return false;\n  },\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return new RequestSigner(options);\n  },\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n    if (!request.getHeader('Date')) request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers) options.headers = ['date'];\n    if (!options.httpVersion) options.httpVersion = '1.1';\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof options.headers[i] !== 'string') throw new TypeError('options.headers must be an array of Strings');\n      var h = options.headers[i].toLowerCase();\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign += request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.');\n        }\n      } else if (h === '(request-target)') {\n        stringToSign += '(request-target): ' + request.method.toLowerCase() + ' ' + request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n      if (i + 1 < options.headers.length) stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof options.key !== 'string' && !Buffer.isBuffer(options.key)) throw new TypeError('options.key must be a string or Buffer');\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      var key = options.key;\n      if (typeof key === 'string' || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(options.key);\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');\n      if (!PK_ALGOS[key.type]) {\n        throw new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported');\n      }\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead');\n      }\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() + ' is not a supported hash algorithm');\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT, options.keyId, options.algorithm, options.headers.join(' '), signature));\n    return true;\n  }\n};","map":{"version":3,"names":["assert","require","crypto","http","util","sshpk","jsprim","utils","sprintf","format","HASH_ALGOS","PK_ALGOS","InvalidAlgorithmError","HttpSignatureError","validateAlgorithm","AUTHZ_FMT","MissingHeaderError","message","call","inherits","StrictParsingError","RequestSigner","options","object","alg","algorithm","undefined","string","rs_alg","sign","func","rs_signFunc","key","keyId","rs_keyId","Buffer","isBuffer","TypeError","rs_signer","createHmac","toUpperCase","digest","hashAlgorithm","toString","parsePrivateKey","ok","PrivateKey","isPrivateKey","rs_key","type","createSign","rs_headers","rs_lines","prototype","writeHeader","header","value","toLowerCase","push","line","length","update","writeDateHeader","rfc1123","Date","writeTarget","method","path","cb","Error","authz","data","join","self","err","sig","signature","e","sigObj","module","exports","isSigner","obj","createSigner","signRequest","request","optionalString","optionalArrayOfString","headers","httpVersion","getHeader","setHeader","i","stringToSign","h","strict","hasOwnProperty","_stringToSign","hmac","signer","notStrictEqual","authzHeaderName","authorizationHeaderName"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/http-signature/lib/signer.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n\n    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAII,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAIK,MAAM,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIM,KAAK,GAAGN,OAAO,CAAC,SAAS,CAAC;AAE9B,IAAIO,OAAO,GAAGP,OAAO,CAAC,MAAM,CAAC,CAACQ,MAAM;AAEpC,IAAIC,UAAU,GAAGH,KAAK,CAACG,UAAU;AACjC,IAAIC,QAAQ,GAAGJ,KAAK,CAACI,QAAQ;AAC7B,IAAIC,qBAAqB,GAAGL,KAAK,CAACK,qBAAqB;AACvD,IAAIC,kBAAkB,GAAGN,KAAK,CAACM,kBAAkB;AACjD,IAAIC,iBAAiB,GAAGP,KAAK,CAACO,iBAAiB;;AAE/C;;AAEA,IAAIC,SAAS,GACX,iEAAiE;;AAEnE;;AAEA,SAASC,kBAAkBA,CAACC,OAAO,EAAE;EACnCJ,kBAAkB,CAACK,IAAI,CAAC,IAAI,EAAED,OAAO,EAAED,kBAAkB,CAAC;AAC5D;AACAZ,IAAI,CAACe,QAAQ,CAACH,kBAAkB,EAAEH,kBAAkB,CAAC;AAErD,SAASO,kBAAkBA,CAACH,OAAO,EAAE;EACnCJ,kBAAkB,CAACK,IAAI,CAAC,IAAI,EAAED,OAAO,EAAEG,kBAAkB,CAAC;AAC5D;AACAhB,IAAI,CAACe,QAAQ,CAACC,kBAAkB,EAAEP,kBAAkB,CAAC;;AAErD;AACA,SAASQ,aAAaA,CAACC,OAAO,EAAE;EAC9BtB,MAAM,CAACuB,MAAM,CAACD,OAAO,EAAE,SAAS,CAAC;EAEjC,IAAIE,GAAG,GAAG,EAAE;EACZ,IAAIF,OAAO,CAACG,SAAS,KAAKC,SAAS,EAAE;IACnC1B,MAAM,CAAC2B,MAAM,CAACL,OAAO,CAACG,SAAS,EAAE,mBAAmB,CAAC;IACrDD,GAAG,GAAGV,iBAAiB,CAACQ,OAAO,CAACG,SAAS,CAAC;EAC5C;EACA,IAAI,CAACG,MAAM,GAAGJ,GAAG;;EAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIF,OAAO,CAACO,IAAI,KAAKH,SAAS,EAAE;IAC9B1B,MAAM,CAAC8B,IAAI,CAACR,OAAO,CAACO,IAAI,EAAE,cAAc,CAAC;IACzC,IAAI,CAACE,WAAW,GAAGT,OAAO,CAACO,IAAI;EAEjC,CAAC,MAAM,IAAIL,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIF,OAAO,CAACU,GAAG,KAAKN,SAAS,EAAE;IACzD1B,MAAM,CAAC2B,MAAM,CAACL,OAAO,CAACW,KAAK,EAAE,eAAe,CAAC;IAC7C,IAAI,CAACC,QAAQ,GAAGZ,OAAO,CAACW,KAAK;IAE7B,IAAI,OAAQX,OAAO,CAACU,GAAI,KAAK,QAAQ,IAAI,CAACG,MAAM,CAACC,QAAQ,CAACd,OAAO,CAACU,GAAG,CAAC,EACpE,MAAO,IAAIK,SAAS,CAAC,iDAAiD,CAAC;;IAEzE;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGpC,MAAM,CAACqC,UAAU,CAACf,GAAG,CAAC,CAAC,CAAC,CAACgB,WAAW,EAAE,EAAElB,OAAO,CAACU,GAAG,CAAC;IACrE,IAAI,CAACM,SAAS,CAACT,IAAI,GAAG,YAAY;MAChC,IAAIY,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,QAAQ,CAAC;MAClC,OAAQ;QACNC,aAAa,EAAElB,GAAG,CAAC,CAAC,CAAC;QACrBmB,QAAQ,EAAE,SAAAA,CAAA,EAAY;UAAE,OAAQF,MAAM;QAAG;MAC3C,CAAC;IACH,CAAC;EAEH,CAAC,MAAM,IAAInB,OAAO,CAACU,GAAG,KAAKN,SAAS,EAAE;IACpC,IAAIM,GAAG,GAAGV,OAAO,CAACU,GAAG;IACrB,IAAI,OAAQA,GAAI,KAAK,QAAQ,IAAIG,MAAM,CAACC,QAAQ,CAACJ,GAAG,CAAC,EACnDA,GAAG,GAAG3B,KAAK,CAACuC,eAAe,CAACZ,GAAG,CAAC;IAElChC,MAAM,CAAC6C,EAAE,CAACxC,KAAK,CAACyC,UAAU,CAACC,YAAY,CAACf,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAClD,wCAAwC,CAAC;IAC3C,IAAI,CAACgB,MAAM,GAAGhB,GAAG;IAEjBhC,MAAM,CAAC2B,MAAM,CAACL,OAAO,CAACW,KAAK,EAAE,eAAe,CAAC;IAC7C,IAAI,CAACC,QAAQ,GAAGZ,OAAO,CAACW,KAAK;IAE7B,IAAI,CAACtB,QAAQ,CAACqB,GAAG,CAACiB,IAAI,CAAC,EAAE;MACvB,MAAO,IAAIrC,qBAAqB,CAACoB,GAAG,CAACiB,IAAI,CAACT,WAAW,EAAE,GAAG,QAAQ,GAChE,wBAAwB,CAAC;IAC7B;IAEA,IAAIhB,GAAG,CAAC,CAAC,CAAC,KAAKE,SAAS,IAAIM,GAAG,CAACiB,IAAI,KAAKzB,GAAG,CAAC,CAAC,CAAC,EAAE;MAC/C,MAAO,IAAIZ,qBAAqB,CAAC,wBAAwB,GACvDY,GAAG,CAAC,CAAC,CAAC,CAACgB,WAAW,EAAE,GAAG,oBAAoB,GAC3CR,GAAG,CAACiB,IAAI,CAACT,WAAW,EAAE,GAAG,cAAc,CAAC;IAC5C;IAEA,IAAI,CAACF,SAAS,GAAGN,GAAG,CAACkB,UAAU,CAAC1B,GAAG,CAAC,CAAC,CAAC,CAAC;EAEzC,CAAC,MAAM;IACL,MAAO,IAAIa,SAAS,CAAC,gDAAgD,CAAC;EACxE;EAEA,IAAI,CAACc,UAAU,GAAG,EAAE;EACpB,IAAI,CAACC,QAAQ,GAAG,EAAE;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/B,aAAa,CAACgC,SAAS,CAACC,WAAW,GAAG,UAAUC,MAAM,EAAEC,KAAK,EAAE;EAC7DxD,MAAM,CAAC2B,MAAM,CAAC4B,MAAM,EAAE,QAAQ,CAAC;EAC/BA,MAAM,GAAGA,MAAM,CAACE,WAAW,EAAE;EAC7BzD,MAAM,CAAC2B,MAAM,CAAC6B,KAAK,EAAE,OAAO,CAAC;EAE7B,IAAI,CAACL,UAAU,CAACO,IAAI,CAACH,MAAM,CAAC;EAE5B,IAAI,IAAI,CAACxB,WAAW,EAAE;IACpB,IAAI,CAACqB,QAAQ,CAACM,IAAI,CAACH,MAAM,GAAG,IAAI,GAAGC,KAAK,CAAC;EAE3C,CAAC,MAAM;IACL,IAAIG,IAAI,GAAGJ,MAAM,GAAG,IAAI,GAAGC,KAAK;IAChC,IAAI,IAAI,CAACL,UAAU,CAACS,MAAM,GAAG,CAAC,EAC5BD,IAAI,GAAG,IAAI,GAAGA,IAAI;IACpB,IAAI,CAACrB,SAAS,CAACuB,MAAM,CAACF,IAAI,CAAC;EAC7B;EAEA,OAAQH,KAAK;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAnC,aAAa,CAACgC,SAAS,CAACS,eAAe,GAAG,YAAY;EACpD,OAAQ,IAAI,CAACR,WAAW,CAAC,MAAM,EAAEhD,MAAM,CAACyD,OAAO,CAAC,IAAIC,IAAI,EAAE,CAAC,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA3C,aAAa,CAACgC,SAAS,CAACY,WAAW,GAAG,UAAUC,MAAM,EAAEC,IAAI,EAAE;EAC5DnE,MAAM,CAAC2B,MAAM,CAACuC,MAAM,EAAE,QAAQ,CAAC;EAC/BlE,MAAM,CAAC2B,MAAM,CAACwC,IAAI,EAAE,MAAM,CAAC;EAC3BD,MAAM,GAAGA,MAAM,CAACT,WAAW,EAAE;EAC7B,IAAI,CAACH,WAAW,CAAC,kBAAkB,EAAEY,MAAM,GAAG,GAAG,GAAGC,IAAI,CAAC;AAC3D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA9C,aAAa,CAACgC,SAAS,CAACxB,IAAI,GAAG,UAAUuC,EAAE,EAAE;EAC3CpE,MAAM,CAAC8B,IAAI,CAACsC,EAAE,EAAE,UAAU,CAAC;EAE3B,IAAI,IAAI,CAACjB,UAAU,CAACS,MAAM,GAAG,CAAC,EAC5B,MAAO,IAAIS,KAAK,CAAC,oCAAoC,CAAC;EAExD,IAAI7C,GAAG,EAAE8C,KAAK;EACd,IAAI,IAAI,CAACvC,WAAW,EAAE;IACpB,IAAIwC,IAAI,GAAG,IAAI,CAACnB,QAAQ,CAACoB,IAAI,CAAC,IAAI,CAAC;IACnC,IAAIC,IAAI,GAAG,IAAI;IACf,IAAI,CAAC1C,WAAW,CAACwC,IAAI,EAAE,UAAUG,GAAG,EAAEC,GAAG,EAAE;MACzC,IAAID,GAAG,EAAE;QACPN,EAAE,CAACM,GAAG,CAAC;QACP;MACF;MACA,IAAI;QACF1E,MAAM,CAACuB,MAAM,CAACoD,GAAG,EAAE,WAAW,CAAC;QAC/B3E,MAAM,CAAC2B,MAAM,CAACgD,GAAG,CAAC1C,KAAK,EAAE,iBAAiB,CAAC;QAC3CjC,MAAM,CAAC2B,MAAM,CAACgD,GAAG,CAAClD,SAAS,EAAE,qBAAqB,CAAC;QACnDzB,MAAM,CAAC2B,MAAM,CAACgD,GAAG,CAACC,SAAS,EAAE,qBAAqB,CAAC;QACnDpD,GAAG,GAAGV,iBAAiB,CAAC6D,GAAG,CAAClD,SAAS,CAAC;QAEtC6C,KAAK,GAAG9D,OAAO,CAACO,SAAS,EACvB4D,GAAG,CAAC1C,KAAK,EACT0C,GAAG,CAAClD,SAAS,EACbgD,IAAI,CAACtB,UAAU,CAACqB,IAAI,CAAC,GAAG,CAAC,EACzBG,GAAG,CAACC,SAAS,CAAC;MAClB,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVT,EAAE,CAACS,CAAC,CAAC;QACL;MACF;MACAT,EAAE,CAAC,IAAI,EAAEE,KAAK,CAAC;IACjB,CAAC,CAAC;EAEJ,CAAC,MAAM;IACL,IAAI;MACF,IAAIQ,MAAM,GAAG,IAAI,CAACxC,SAAS,CAACT,IAAI,EAAE;IACpC,CAAC,CAAC,OAAOgD,CAAC,EAAE;MACVT,EAAE,CAACS,CAAC,CAAC;MACL;IACF;IACArD,GAAG,GAAG,CAAC,IAAI,CAACI,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAACoB,MAAM,CAACC,IAAI,IAAI,GAAG,GAAG6B,MAAM,CAACpC,aAAa;IACvE,IAAIkC,SAAS,GAAGE,MAAM,CAACnC,QAAQ,EAAE;IACjC2B,KAAK,GAAG9D,OAAO,CAACO,SAAS,EACvB,IAAI,CAACmB,QAAQ,EACbV,GAAG,EACH,IAAI,CAAC2B,UAAU,CAACqB,IAAI,CAAC,GAAG,CAAC,EACzBI,SAAS,CAAC;IACZR,EAAE,CAAC,IAAI,EAAEE,KAAK,CAAC;EACjB;AACF,CAAC;;AAED;;AAEAS,MAAM,CAACC,OAAO,GAAG;EACf;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,SAAAA,CAAUC,GAAG,EAAE;IACvB,IAAI,OAAQA,GAAI,KAAK,QAAQ,IAAIA,GAAG,YAAY7D,aAAa,EAC3D,OAAQ,IAAI;IACd,OAAQ,KAAK;EACf,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE8D,YAAY,EAAE,SAASA,YAAYA,CAAC7D,OAAO,EAAE;IAC3C,OAAQ,IAAID,aAAa,CAACC,OAAO,CAAC;EACpC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE8D,WAAW,EAAE,SAASA,WAAWA,CAACC,OAAO,EAAE/D,OAAO,EAAE;IAClDtB,MAAM,CAACuB,MAAM,CAAC8D,OAAO,EAAE,SAAS,CAAC;IACjCrF,MAAM,CAACuB,MAAM,CAACD,OAAO,EAAE,SAAS,CAAC;IACjCtB,MAAM,CAACsF,cAAc,CAAChE,OAAO,CAACG,SAAS,EAAE,mBAAmB,CAAC;IAC7DzB,MAAM,CAAC2B,MAAM,CAACL,OAAO,CAACW,KAAK,EAAE,eAAe,CAAC;IAC7CjC,MAAM,CAACuF,qBAAqB,CAACjE,OAAO,CAACkE,OAAO,EAAE,iBAAiB,CAAC;IAChExF,MAAM,CAACsF,cAAc,CAAChE,OAAO,CAACmE,WAAW,EAAE,qBAAqB,CAAC;IAEjE,IAAI,CAACJ,OAAO,CAACK,SAAS,CAAC,MAAM,CAAC,EAC5BL,OAAO,CAACM,SAAS,CAAC,MAAM,EAAErF,MAAM,CAACyD,OAAO,CAAC,IAAIC,IAAI,EAAE,CAAC,CAAC;IACvD,IAAI,CAAC1C,OAAO,CAACkE,OAAO,EAClBlE,OAAO,CAACkE,OAAO,GAAG,CAAC,MAAM,CAAC;IAC5B,IAAI,CAAClE,OAAO,CAACmE,WAAW,EACtBnE,OAAO,CAACmE,WAAW,GAAG,KAAK;IAE7B,IAAIjE,GAAG,GAAG,EAAE;IACZ,IAAIF,OAAO,CAACG,SAAS,EAAE;MACrBH,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACG,SAAS,CAACgC,WAAW,EAAE;MACnDjC,GAAG,GAAGV,iBAAiB,CAACQ,OAAO,CAACG,SAAS,CAAC;IAC5C;IAEA,IAAImE,CAAC;IACL,IAAIC,YAAY,GAAG,EAAE;IACrB,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtE,OAAO,CAACkE,OAAO,CAAC5B,MAAM,EAAEgC,CAAC,EAAE,EAAE;MAC3C,IAAI,OAAQtE,OAAO,CAACkE,OAAO,CAACI,CAAC,CAAE,KAAK,QAAQ,EAC1C,MAAM,IAAIvD,SAAS,CAAC,6CAA6C,CAAC;MAEpE,IAAIyD,CAAC,GAAGxE,OAAO,CAACkE,OAAO,CAACI,CAAC,CAAC,CAACnC,WAAW,EAAE;MAExC,IAAIqC,CAAC,KAAK,cAAc,EAAE;QACxB,IAAI,CAACxE,OAAO,CAACyE,MAAM,EAAE;UACnB;AACV;AACA;AACA;UACUF,YAAY,IACVR,OAAO,CAACnB,MAAM,GAAG,GAAG,GAAGmB,OAAO,CAAClB,IAAI,GAAG,QAAQ,GAC9C7C,OAAO,CAACmE,WAAW;QACvB,CAAC,MAAM;UACL;UACA,MAAO,IAAIrE,kBAAkB,CAAC,qCAAqC,GACjE,8BAA8B,CAAC;QACnC;MACF,CAAC,MAAM,IAAI0E,CAAC,KAAK,kBAAkB,EAAE;QACnCD,YAAY,IACV,oBAAoB,GAAGR,OAAO,CAACnB,MAAM,CAACT,WAAW,EAAE,GAAG,GAAG,GACzD4B,OAAO,CAAClB,IAAI;MAChB,CAAC,MAAM;QACL,IAAIX,KAAK,GAAG6B,OAAO,CAACK,SAAS,CAACI,CAAC,CAAC;QAChC,IAAItC,KAAK,KAAK9B,SAAS,IAAI8B,KAAK,KAAK,EAAE,EAAE;UACvC,MAAM,IAAIxC,kBAAkB,CAAC8E,CAAC,GAAG,yBAAyB,CAAC;QAC7D;QACAD,YAAY,IAAIC,CAAC,GAAG,IAAI,GAAGtC,KAAK;MAClC;MAEA,IAAKoC,CAAC,GAAG,CAAC,GAAItE,OAAO,CAACkE,OAAO,CAAC5B,MAAM,EAClCiC,YAAY,IAAI,IAAI;IACxB;;IAEA;IACA,IAAIR,OAAO,CAACW,cAAc,CAAC,eAAe,CAAC,EAAE;MAC3CX,OAAO,CAACY,aAAa,GAAGJ,YAAY;IACtC;IAEA,IAAIjB,SAAS;IACb,IAAIpD,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;MACrB,IAAI,OAAQF,OAAO,CAACU,GAAI,KAAK,QAAQ,IAAI,CAACG,MAAM,CAACC,QAAQ,CAACd,OAAO,CAACU,GAAG,CAAC,EACpE,MAAO,IAAIK,SAAS,CAAC,wCAAwC,CAAC;MAEhE,IAAI6D,IAAI,GAAGhG,MAAM,CAACqC,UAAU,CAACf,GAAG,CAAC,CAAC,CAAC,CAACgB,WAAW,EAAE,EAAElB,OAAO,CAACU,GAAG,CAAC;MAC/DkE,IAAI,CAACrC,MAAM,CAACgC,YAAY,CAAC;MACzBjB,SAAS,GAAGsB,IAAI,CAACzD,MAAM,CAAC,QAAQ,CAAC;IAEnC,CAAC,MAAM;MACL,IAAIT,GAAG,GAAGV,OAAO,CAACU,GAAG;MACrB,IAAI,OAAQA,GAAI,KAAK,QAAQ,IAAIG,MAAM,CAACC,QAAQ,CAACJ,GAAG,CAAC,EACnDA,GAAG,GAAG3B,KAAK,CAACuC,eAAe,CAACtB,OAAO,CAACU,GAAG,CAAC;MAE1ChC,MAAM,CAAC6C,EAAE,CAACxC,KAAK,CAACyC,UAAU,CAACC,YAAY,CAACf,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAClD,wCAAwC,CAAC;MAE3C,IAAI,CAACrB,QAAQ,CAACqB,GAAG,CAACiB,IAAI,CAAC,EAAE;QACvB,MAAO,IAAIrC,qBAAqB,CAACoB,GAAG,CAACiB,IAAI,CAACT,WAAW,EAAE,GAAG,QAAQ,GAChE,wBAAwB,CAAC;MAC7B;MAEA,IAAIhB,GAAG,CAAC,CAAC,CAAC,KAAKE,SAAS,IAAIM,GAAG,CAACiB,IAAI,KAAKzB,GAAG,CAAC,CAAC,CAAC,EAAE;QAC/C,MAAO,IAAIZ,qBAAqB,CAAC,wBAAwB,GACvDY,GAAG,CAAC,CAAC,CAAC,CAACgB,WAAW,EAAE,GAAG,oBAAoB,GAC3CR,GAAG,CAACiB,IAAI,CAACT,WAAW,EAAE,GAAG,cAAc,CAAC;MAC5C;MAEA,IAAI2D,MAAM,GAAGnE,GAAG,CAACkB,UAAU,CAAC1B,GAAG,CAAC,CAAC,CAAC,CAAC;MACnC2E,MAAM,CAACtC,MAAM,CAACgC,YAAY,CAAC;MAC3B,IAAIf,MAAM,GAAGqB,MAAM,CAACtE,IAAI,EAAE;MAC1B,IAAI,CAACnB,UAAU,CAACoE,MAAM,CAACpC,aAAa,CAAC,EAAE;QACrC,MAAO,IAAI9B,qBAAqB,CAACkE,MAAM,CAACpC,aAAa,CAACF,WAAW,EAAE,GACjE,oCAAoC,CAAC;MACzC;MACAlB,OAAO,CAACG,SAAS,GAAGO,GAAG,CAACiB,IAAI,GAAG,GAAG,GAAG6B,MAAM,CAACpC,aAAa;MACzDkC,SAAS,GAAGE,MAAM,CAACnC,QAAQ,EAAE;MAC7B3C,MAAM,CAACoG,cAAc,CAACxB,SAAS,EAAE,EAAE,EAAE,0BAA0B,CAAC;IAClE;IAEA,IAAIyB,eAAe,GAAG/E,OAAO,CAACgF,uBAAuB,IAAI,eAAe;IAExEjB,OAAO,CAACM,SAAS,CAACU,eAAe,EAAE7F,OAAO,CAACO,SAAS,EACTO,OAAO,CAACW,KAAK,EACbX,OAAO,CAACG,SAAS,EACjBH,OAAO,CAACkE,OAAO,CAAChB,IAAI,CAAC,GAAG,CAAC,EACzBI,SAAS,CAAC,CAAC;IAEtD,OAAO,IAAI;EACb;AAEF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}