{"ast":null,"code":"const express = require('express');\nconst url = require('url');\nconst cors = require('cors');\nconst request = require('request');\nfunction validUrl(req, res, next) {\n  if (!req.query.url) {\n    next(new Error('No url specified'));\n  } else if (typeof req.query.url !== 'string' || url.parse(req.query.url).host === null) {\n    next(new Error(`Invalid url specified: ${req.query.url}`));\n  } else {\n    next();\n  }\n}\nmodule.exports = () => {\n  const app = express.Router();\n  app.get('/', cors(), validUrl, (req, res, next) => {\n    switch (req.query.responseType) {\n      case 'blob':\n        req.pipe(request(req.query.url).on('error', next)).pipe(res);\n        break;\n      case 'text':\n      default:\n        request({\n          url: req.query.url,\n          encoding: 'binary'\n        }, (error, response, body) => {\n          if (error) {\n            return next(error);\n          }\n          res.send(`data:${response.headers['content-type']};base64,${Buffer.from(body, 'binary').toString('base64')}`);\n        });\n    }\n  });\n  return app;\n};","map":{"version":3,"names":["express","require","url","cors","request","validUrl","req","res","next","query","Error","parse","host","module","exports","app","Router","get","responseType","pipe","on","encoding","error","response","body","send","headers","Buffer","from","toString"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/html2canvas-proxy/server.js"],"sourcesContent":["const express = require('express');\nconst url = require('url');\nconst cors = require('cors');\nconst request = require('request');\n\nfunction validUrl(req, res, next) {\n    if (!req.query.url) {\n        next(new Error('No url specified'));\n    } else if (typeof req.query.url !== 'string' || url.parse(req.query.url).host === null) {\n        next(new Error(`Invalid url specified: ${req.query.url}`));\n    } else {\n        next();\n    }\n}\n\nmodule.exports = () => {\n    const app = express.Router();\n    app.get('/', cors(), validUrl, (req, res, next) => {\n        switch (req.query.responseType) {\n    case 'blob':\n        req.pipe(request(req.query.url).on('error', next)).pipe(res);\n        break;\n    case 'text':\n    default:\n        request({url: req.query.url, encoding: 'binary'}, (error, response, body) => {\n            if (error) {\n                return next(error);\n            }\n            res.send(\n            `data:${response.headers['content-type']};base64,${Buffer.from(\n                body,\n                'binary'\n            ).toString('base64')}`\n        );\n    });\n    }\n});\n\n    return app;\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAS,CAAC;AAElC,SAASI,QAAQA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAC9B,IAAI,CAACF,GAAG,CAACG,KAAK,CAACP,GAAG,EAAE;IAChBM,IAAI,CAAC,IAAIE,KAAK,CAAC,kBAAkB,CAAC,CAAC;EACvC,CAAC,MAAM,IAAI,OAAOJ,GAAG,CAACG,KAAK,CAACP,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACS,KAAK,CAACL,GAAG,CAACG,KAAK,CAACP,GAAG,CAAC,CAACU,IAAI,KAAK,IAAI,EAAE;IACpFJ,IAAI,CAAC,IAAIE,KAAK,CAAE,0BAAyBJ,GAAG,CAACG,KAAK,CAACP,GAAI,EAAC,CAAC,CAAC;EAC9D,CAAC,MAAM;IACHM,IAAI,EAAE;EACV;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAG,MAAM;EACnB,MAAMC,GAAG,GAAGf,OAAO,CAACgB,MAAM,EAAE;EAC5BD,GAAG,CAACE,GAAG,CAAC,GAAG,EAAEd,IAAI,EAAE,EAAEE,QAAQ,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;IAC/C,QAAQF,GAAG,CAACG,KAAK,CAACS,YAAY;MAClC,KAAK,MAAM;QACPZ,GAAG,CAACa,IAAI,CAACf,OAAO,CAACE,GAAG,CAACG,KAAK,CAACP,GAAG,CAAC,CAACkB,EAAE,CAAC,OAAO,EAAEZ,IAAI,CAAC,CAAC,CAACW,IAAI,CAACZ,GAAG,CAAC;QAC5D;MACJ,KAAK,MAAM;MACX;QACIH,OAAO,CAAC;UAACF,GAAG,EAAEI,GAAG,CAACG,KAAK,CAACP,GAAG;UAAEmB,QAAQ,EAAE;QAAQ,CAAC,EAAE,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;UACzE,IAAIF,KAAK,EAAE;YACP,OAAOd,IAAI,CAACc,KAAK,CAAC;UACtB;UACAf,GAAG,CAACkB,IAAI,CACP,QAAOF,QAAQ,CAACG,OAAO,CAAC,cAAc,CAAE,WAAUC,MAAM,CAACC,IAAI,CAC1DJ,IAAI,EACJ,QAAQ,CACX,CAACK,QAAQ,CAAC,QAAQ,CAAE,EAAC,CACzB;QACL,CAAC,CAAC;IAAC;EAEP,CAAC,CAAC;EAEE,OAAOd,GAAG;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}