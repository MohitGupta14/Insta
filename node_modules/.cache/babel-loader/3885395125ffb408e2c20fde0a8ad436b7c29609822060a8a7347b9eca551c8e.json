{"ast":null,"code":"'use strict';\n\nvar url = require('url');\nvar tunnel = require('tunnel-agent');\nvar defaultProxyHeaderWhiteList = ['accept', 'accept-charset', 'accept-encoding', 'accept-language', 'accept-ranges', 'cache-control', 'content-encoding', 'content-language', 'content-location', 'content-md5', 'content-range', 'content-type', 'connection', 'date', 'expect', 'max-forwards', 'pragma', 'referer', 'te', 'user-agent', 'via'];\nvar defaultProxyHeaderExclusiveList = ['proxy-authorization'];\nfunction constructProxyHost(uriObject) {\n  var port = uriObject.port;\n  var protocol = uriObject.protocol;\n  var proxyHost = uriObject.hostname + ':';\n  if (port) {\n    proxyHost += port;\n  } else if (protocol === 'https:') {\n    proxyHost += '443';\n  } else {\n    proxyHost += '80';\n  }\n  return proxyHost;\n}\nfunction constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList.reduce(function (set, header) {\n    set[header.toLowerCase()] = true;\n    return set;\n  }, {});\n  return Object.keys(headers).filter(function (header) {\n    return whiteList[header.toLowerCase()];\n  }).reduce(function (set, header) {\n    set[header] = headers[header];\n    return set;\n  }, {});\n}\nfunction constructTunnelOptions(request, proxyHeaders) {\n  var proxy = request.proxy;\n  var tunnelOptions = {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders\n    },\n    headers: request.headers,\n    ca: request.ca,\n    cert: request.cert,\n    key: request.key,\n    passphrase: request.passphrase,\n    pfx: request.pfx,\n    ciphers: request.ciphers,\n    rejectUnauthorized: request.rejectUnauthorized,\n    secureOptions: request.secureOptions,\n    secureProtocol: request.secureProtocol\n  };\n  return tunnelOptions;\n}\nfunction constructTunnelFnName(uri, proxy) {\n  var uriProtocol = uri.protocol === 'https:' ? 'https' : 'http';\n  var proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http';\n  return [uriProtocol, proxyProtocol].join('Over');\n}\nfunction getTunnelFn(request) {\n  var uri = request.uri;\n  var proxy = request.proxy;\n  var tunnelFnName = constructTunnelFnName(uri, proxy);\n  return tunnel[tunnelFnName];\n}\nfunction Tunnel(request) {\n  this.request = request;\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;\n  this.proxyHeaderExclusiveList = [];\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel;\n  }\n}\nTunnel.prototype.isEnabled = function () {\n  var self = this;\n  var request = self.request;\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride;\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true;\n  }\n\n  // Otherwise, do not use tunnel.\n  return false;\n};\nTunnel.prototype.setup = function (options) {\n  var self = this;\n  var request = self.request;\n  options = options || {};\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy);\n  }\n  if (!request.proxy || !request.tunnel) {\n    return false;\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;\n  }\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);\n  proxyHeaders.host = constructProxyHost(request.uri);\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request);\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request);\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders);\n  request.agent = tunnelFn(tunnelOptions);\n  return true;\n};\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;\nexports.Tunnel = Tunnel;","map":{"version":3,"names":["url","require","tunnel","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","constructProxyHost","uriObject","port","protocol","proxyHost","hostname","constructProxyHeaderWhiteList","headers","proxyHeaderWhiteList","whiteList","reduce","set","header","toLowerCase","Object","keys","filter","constructTunnelOptions","request","proxyHeaders","proxy","tunnelOptions","host","proxyAuth","auth","ca","cert","key","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol","constructTunnelFnName","uri","uriProtocol","proxyProtocol","join","getTunnelFn","tunnelFnName","Tunnel","proxyHeaderExclusiveList","tunnelOverride","prototype","isEnabled","self","setup","options","parse","concat","forEach","removeHeader","tunnelFn","agent","exports"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/request/lib/tunnel.js"],"sourcesContent":["'use strict'\n\nvar url = require('url')\nvar tunnel = require('tunnel-agent')\n\nvar defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nvar defaultProxyHeaderExclusiveList = [\n  'proxy-authorization'\n]\n\nfunction constructProxyHost (uriObject) {\n  var port = uriObject.port\n  var protocol = uriObject.protocol\n  var proxyHost = uriObject.hostname + ':'\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList\n    .reduce(function (set, header) {\n      set[header.toLowerCase()] = true\n      return set\n    }, {})\n\n  return Object.keys(headers)\n    .filter(function (header) {\n      return whiteList[header.toLowerCase()]\n    })\n    .reduce(function (set, header) {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions (request, proxyHeaders) {\n  var proxy = request.proxy\n\n  var tunnelOptions = {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders\n    },\n    headers: request.headers,\n    ca: request.ca,\n    cert: request.cert,\n    key: request.key,\n    passphrase: request.passphrase,\n    pfx: request.pfx,\n    ciphers: request.ciphers,\n    rejectUnauthorized: request.rejectUnauthorized,\n    secureOptions: request.secureOptions,\n    secureProtocol: request.secureProtocol\n  }\n\n  return tunnelOptions\n}\n\nfunction constructTunnelFnName (uri, proxy) {\n  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction getTunnelFn (request) {\n  var uri = request.uri\n  var proxy = request.proxy\n  var tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction Tunnel (request) {\n  this.request = request\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n  this.proxyHeaderExclusiveList = []\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel\n  }\n}\n\nTunnel.prototype.isEnabled = function () {\n  var self = this\n  var request = self.request\n    // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nTunnel.prototype.setup = function (options) {\n  var self = this\n  var request = self.request\n\n  options = options || {}\n\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy)\n  }\n\n  if (!request.proxy || !request.tunnel) {\n    return false\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n  }\n\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(request.uri)\n\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request)\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n  request.agent = tunnelFn(tunnelOptions)\n\n  return true\n}\n\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\nexports.Tunnel = Tunnel\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AACxB,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAc,CAAC;AAEpC,IAAIE,2BAA2B,GAAG,CAChC,QAAQ,EACR,gBAAgB,EAChB,iBAAiB,EACjB,iBAAiB,EACjB,eAAe,EACf,eAAe,EACf,kBAAkB,EAClB,kBAAkB,EAClB,kBAAkB,EAClB,aAAa,EACb,eAAe,EACf,cAAc,EACd,YAAY,EACZ,MAAM,EACN,QAAQ,EACR,cAAc,EACd,QAAQ,EACR,SAAS,EACT,IAAI,EACJ,YAAY,EACZ,KAAK,CACN;AAED,IAAIC,+BAA+B,GAAG,CACpC,qBAAqB,CACtB;AAED,SAASC,kBAAkBA,CAAEC,SAAS,EAAE;EACtC,IAAIC,IAAI,GAAGD,SAAS,CAACC,IAAI;EACzB,IAAIC,QAAQ,GAAGF,SAAS,CAACE,QAAQ;EACjC,IAAIC,SAAS,GAAGH,SAAS,CAACI,QAAQ,GAAG,GAAG;EAExC,IAAIH,IAAI,EAAE;IACRE,SAAS,IAAIF,IAAI;EACnB,CAAC,MAAM,IAAIC,QAAQ,KAAK,QAAQ,EAAE;IAChCC,SAAS,IAAI,KAAK;EACpB,CAAC,MAAM;IACLA,SAAS,IAAI,IAAI;EACnB;EAEA,OAAOA,SAAS;AAClB;AAEA,SAASE,6BAA6BA,CAAEC,OAAO,EAAEC,oBAAoB,EAAE;EACrE,IAAIC,SAAS,GAAGD,oBAAoB,CACjCE,MAAM,CAAC,UAAUC,GAAG,EAAEC,MAAM,EAAE;IAC7BD,GAAG,CAACC,MAAM,CAACC,WAAW,EAAE,CAAC,GAAG,IAAI;IAChC,OAAOF,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAER,OAAOG,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CACxBS,MAAM,CAAC,UAAUJ,MAAM,EAAE;IACxB,OAAOH,SAAS,CAACG,MAAM,CAACC,WAAW,EAAE,CAAC;EACxC,CAAC,CAAC,CACDH,MAAM,CAAC,UAAUC,GAAG,EAAEC,MAAM,EAAE;IAC7BD,GAAG,CAACC,MAAM,CAAC,GAAGL,OAAO,CAACK,MAAM,CAAC;IAC7B,OAAOD,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;AACV;AAEA,SAASM,sBAAsBA,CAAEC,OAAO,EAAEC,YAAY,EAAE;EACtD,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAAK;EAEzB,IAAIC,aAAa,GAAG;IAClBD,KAAK,EAAE;MACLE,IAAI,EAAEF,KAAK,CAACf,QAAQ;MACpBH,IAAI,EAAE,CAACkB,KAAK,CAAClB,IAAI;MACjBqB,SAAS,EAAEH,KAAK,CAACI,IAAI;MACrBjB,OAAO,EAAEY;IACX,CAAC;IACDZ,OAAO,EAAEW,OAAO,CAACX,OAAO;IACxBkB,EAAE,EAAEP,OAAO,CAACO,EAAE;IACdC,IAAI,EAAER,OAAO,CAACQ,IAAI;IAClBC,GAAG,EAAET,OAAO,CAACS,GAAG;IAChBC,UAAU,EAAEV,OAAO,CAACU,UAAU;IAC9BC,GAAG,EAAEX,OAAO,CAACW,GAAG;IAChBC,OAAO,EAAEZ,OAAO,CAACY,OAAO;IACxBC,kBAAkB,EAAEb,OAAO,CAACa,kBAAkB;IAC9CC,aAAa,EAAEd,OAAO,CAACc,aAAa;IACpCC,cAAc,EAAEf,OAAO,CAACe;EAC1B,CAAC;EAED,OAAOZ,aAAa;AACtB;AAEA,SAASa,qBAAqBA,CAAEC,GAAG,EAAEf,KAAK,EAAE;EAC1C,IAAIgB,WAAW,GAAID,GAAG,CAAChC,QAAQ,KAAK,QAAQ,GAAG,OAAO,GAAG,MAAO;EAChE,IAAIkC,aAAa,GAAIjB,KAAK,CAACjB,QAAQ,KAAK,QAAQ,GAAG,OAAO,GAAG,MAAO;EACpE,OAAO,CAACiC,WAAW,EAAEC,aAAa,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AAClD;AAEA,SAASC,WAAWA,CAAErB,OAAO,EAAE;EAC7B,IAAIiB,GAAG,GAAGjB,OAAO,CAACiB,GAAG;EACrB,IAAIf,KAAK,GAAGF,OAAO,CAACE,KAAK;EACzB,IAAIoB,YAAY,GAAGN,qBAAqB,CAACC,GAAG,EAAEf,KAAK,CAAC;EACpD,OAAOvB,MAAM,CAAC2C,YAAY,CAAC;AAC7B;AAEA,SAASC,MAAMA,CAAEvB,OAAO,EAAE;EACxB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACV,oBAAoB,GAAGV,2BAA2B;EACvD,IAAI,CAAC4C,wBAAwB,GAAG,EAAE;EAClC,IAAI,OAAOxB,OAAO,CAACrB,MAAM,KAAK,WAAW,EAAE;IACzC,IAAI,CAAC8C,cAAc,GAAGzB,OAAO,CAACrB,MAAM;EACtC;AACF;AAEA4C,MAAM,CAACG,SAAS,CAACC,SAAS,GAAG,YAAY;EACvC,IAAIC,IAAI,GAAG,IAAI;EACf,IAAI5B,OAAO,GAAG4B,IAAI,CAAC5B,OAAO;EACxB;;EAEF;EACA,IAAI,OAAO4B,IAAI,CAACH,cAAc,KAAK,WAAW,EAAE;IAC9C,OAAOG,IAAI,CAACH,cAAc;EAC5B;;EAEA;EACA,IAAIzB,OAAO,CAACiB,GAAG,CAAChC,QAAQ,KAAK,QAAQ,EAAE;IACrC,OAAO,IAAI;EACb;;EAEA;EACA,OAAO,KAAK;AACd,CAAC;AAEDsC,MAAM,CAACG,SAAS,CAACG,KAAK,GAAG,UAAUC,OAAO,EAAE;EAC1C,IAAIF,IAAI,GAAG,IAAI;EACf,IAAI5B,OAAO,GAAG4B,IAAI,CAAC5B,OAAO;EAE1B8B,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAI,OAAO9B,OAAO,CAACE,KAAK,KAAK,QAAQ,EAAE;IACrCF,OAAO,CAACE,KAAK,GAAGzB,GAAG,CAACsD,KAAK,CAAC/B,OAAO,CAACE,KAAK,CAAC;EAC1C;EAEA,IAAI,CAACF,OAAO,CAACE,KAAK,IAAI,CAACF,OAAO,CAACrB,MAAM,EAAE;IACrC,OAAO,KAAK;EACd;;EAEA;EACA,IAAImD,OAAO,CAACxC,oBAAoB,EAAE;IAChCsC,IAAI,CAACtC,oBAAoB,GAAGwC,OAAO,CAACxC,oBAAoB;EAC1D;EACA,IAAIwC,OAAO,CAACN,wBAAwB,EAAE;IACpCI,IAAI,CAACJ,wBAAwB,GAAGM,OAAO,CAACN,wBAAwB;EAClE;EAEA,IAAIA,wBAAwB,GAAGI,IAAI,CAACJ,wBAAwB,CAACQ,MAAM,CAACnD,+BAA+B,CAAC;EACpG,IAAIS,oBAAoB,GAAGsC,IAAI,CAACtC,oBAAoB,CAAC0C,MAAM,CAACR,wBAAwB,CAAC;;EAErF;EACA;EACA,IAAIvB,YAAY,GAAGb,6BAA6B,CAACY,OAAO,CAACX,OAAO,EAAEC,oBAAoB,CAAC;EACvFW,YAAY,CAACG,IAAI,GAAGtB,kBAAkB,CAACkB,OAAO,CAACiB,GAAG,CAAC;EAEnDO,wBAAwB,CAACS,OAAO,CAACjC,OAAO,CAACkC,YAAY,EAAElC,OAAO,CAAC;;EAE/D;EACA,IAAImC,QAAQ,GAAGd,WAAW,CAACrB,OAAO,CAAC;EACnC,IAAIG,aAAa,GAAGJ,sBAAsB,CAACC,OAAO,EAAEC,YAAY,CAAC;EACjED,OAAO,CAACoC,KAAK,GAAGD,QAAQ,CAAChC,aAAa,CAAC;EAEvC,OAAO,IAAI;AACb,CAAC;AAEDoB,MAAM,CAAC3C,2BAA2B,GAAGA,2BAA2B;AAChE2C,MAAM,CAAC1C,+BAA+B,GAAGA,+BAA+B;AACxEwD,OAAO,CAACd,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}