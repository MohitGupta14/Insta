{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n  read: read,\n  readPkcs8: readPkcs8,\n  write: write,\n  writePkcs8: writePkcs8,\n  pkcs8ToBuffer: pkcs8ToBuffer,\n  readECDSACurve: readECDSACurve,\n  writeECDSACurve: writeECDSACurve\n};\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nfunction read(buf, options) {\n  return pem.read(buf, options, 'pkcs8');\n}\nfunction write(key, options) {\n  return pem.write(key, options, 'pkcs8');\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n  assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');\n  return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs8(alg, type, der) {\n  /* Private keys in pkcs#8 format have a weird extra int */\n  if (der.peek() === asn1.Ber.Integer) {\n    assert.strictEqual(type, 'private', 'unexpected Integer at start of public key');\n    der.readString(asn1.Ber.Integer, true);\n  }\n  der.readSequence();\n  var next = der.offset + der.length;\n  var oid = der.readOID();\n  switch (oid) {\n    case '1.2.840.113549.1.1.1':\n      der._offset = next;\n      if (type === 'public') return readPkcs8RSAPublic(der);else return readPkcs8RSAPrivate(der);\n    case '1.2.840.10040.4.1':\n      if (type === 'public') return readPkcs8DSAPublic(der);else return readPkcs8DSAPrivate(der);\n    case '1.2.840.10045.2.1':\n      if (type === 'public') return readPkcs8ECDSAPublic(der);else return readPkcs8ECDSAPrivate(der);\n    case '1.3.101.112':\n      if (type === 'public') {\n        return readPkcs8EdDSAPublic(der);\n      } else {\n        return readPkcs8EdDSAPrivate(der);\n      }\n    case '1.3.101.110':\n      if (type === 'public') {\n        return readPkcs8X25519Public(der);\n      } else {\n        return readPkcs8X25519Private(der);\n      }\n    default:\n      throw new Error('Unknown key type OID ' + oid);\n  }\n}\nfunction readPkcs8RSAPublic(der) {\n  // bit string sequence\n  der.readSequence(asn1.Ber.BitString);\n  der.readByte();\n  der.readSequence();\n\n  // modulus\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'exponent');\n\n  // now, make the key\n  var key = {\n    type: 'rsa',\n    source: der.originalInput,\n    parts: [{\n      name: 'e',\n      data: e\n    }, {\n      name: 'n',\n      data: n\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs8RSAPrivate(der) {\n  der.readSequence(asn1.Ber.OctetString);\n  der.readSequence();\n  var ver = readMPInt(der, 'version');\n  assert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n  // modulus then public exponent\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'public exponent');\n  var d = readMPInt(der, 'private exponent');\n  var p = readMPInt(der, 'prime1');\n  var q = readMPInt(der, 'prime2');\n  var dmodp = readMPInt(der, 'exponent1');\n  var dmodq = readMPInt(der, 'exponent2');\n  var iqmp = readMPInt(der, 'iqmp');\n\n  // now, make the key\n  var key = {\n    type: 'rsa',\n    parts: [{\n      name: 'n',\n      data: n\n    }, {\n      name: 'e',\n      data: e\n    }, {\n      name: 'd',\n      data: d\n    }, {\n      name: 'iqmp',\n      data: iqmp\n    }, {\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'dmodp',\n      data: dmodp\n    }, {\n      name: 'dmodq',\n      data: dmodq\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction readPkcs8DSAPublic(der) {\n  der.readSequence();\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g');\n\n  // bit string sequence\n  der.readSequence(asn1.Ber.BitString);\n  der.readByte();\n  var y = readMPInt(der, 'y');\n\n  // now, make the key\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }, {\n      name: 'y',\n      data: y\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs8DSAPrivate(der) {\n  der.readSequence();\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g');\n  der.readSequence(asn1.Ber.OctetString);\n  var x = readMPInt(der, 'x');\n\n  /* The pkcs#8 format does not include the public key */\n  var y = utils.calculateDSAPublic(g, p, x);\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }, {\n      name: 'y',\n      data: y\n    }, {\n      name: 'x',\n      data: x\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction readECDSACurve(der) {\n  var curveName, curveNames;\n  var j, c, cd;\n  if (der.peek() === asn1.Ber.OID) {\n    var oid = der.readOID();\n    curveNames = Object.keys(algs.curves);\n    for (j = 0; j < curveNames.length; ++j) {\n      c = curveNames[j];\n      cd = algs.curves[c];\n      if (cd.pkcs8oid === oid) {\n        curveName = c;\n        break;\n      }\n    }\n  } else {\n    // ECParameters sequence\n    der.readSequence();\n    var version = der.readString(asn1.Ber.Integer, true);\n    assert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n    var curve = {};\n\n    // FieldID sequence\n    der.readSequence();\n    var fieldTypeOid = der.readOID();\n    assert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1', 'ECDSA key is not from a prime-field');\n    var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n    /*\n     * p always starts with a 1 bit, so count the zeros to get its\n     * real size.\n     */\n    curve.size = p.length * 8 - utils.countZeros(p);\n\n    // Curve sequence\n    der.readSequence();\n    curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n    curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n    if (der.peek() === asn1.Ber.BitString) curve.s = der.readString(asn1.Ber.BitString, true);\n\n    // Combined Gx and Gy\n    curve.G = der.readString(asn1.Ber.OctetString, true);\n    assert.strictEqual(curve.G[0], 0x4, 'uncompressed G is required');\n    curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n    curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n    assert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' + 'required');\n    curveNames = Object.keys(algs.curves);\n    var ks = Object.keys(curve);\n    for (j = 0; j < curveNames.length; ++j) {\n      c = curveNames[j];\n      cd = algs.curves[c];\n      var equal = true;\n      for (var i = 0; i < ks.length; ++i) {\n        var k = ks[i];\n        if (cd[k] === undefined) continue;\n        if (typeof cd[k] === 'object' && cd[k].equals !== undefined) {\n          if (!cd[k].equals(curve[k])) {\n            equal = false;\n            break;\n          }\n        } else if (Buffer.isBuffer(cd[k])) {\n          if (cd[k].toString('binary') !== curve[k].toString('binary')) {\n            equal = false;\n            break;\n          }\n        } else {\n          if (cd[k] !== curve[k]) {\n            equal = false;\n            break;\n          }\n        }\n      }\n      if (equal) {\n        curveName = c;\n        break;\n      }\n    }\n  }\n  return curveName;\n}\nfunction readPkcs8ECDSAPrivate(der) {\n  var curveName = readECDSACurve(der);\n  assert.string(curveName, 'a known elliptic curve');\n  der.readSequence(asn1.Ber.OctetString);\n  der.readSequence();\n  var version = readMPInt(der, 'version');\n  assert.equal(version[0], 1, 'unknown version of ECDSA key');\n  var d = der.readString(asn1.Ber.OctetString, true);\n  var Q;\n  if (der.peek() == 0xa0) {\n    der.readSequence(0xa0);\n    der._offset += der.length;\n  }\n  if (der.peek() == 0xa1) {\n    der.readSequence(0xa1);\n    Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n  }\n  if (Q === undefined) {\n    var pub = utils.publicFromPrivateECDSA(curveName, d);\n    Q = pub.part.Q.data;\n  }\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curveName)\n    }, {\n      name: 'Q',\n      data: Q\n    }, {\n      name: 'd',\n      data: d\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction readPkcs8ECDSAPublic(der) {\n  var curveName = readECDSACurve(der);\n  assert.string(curveName, 'a known elliptic curve');\n  var Q = der.readString(asn1.Ber.BitString, true);\n  Q = utils.ecNormalize(Q);\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curveName)\n    }, {\n      name: 'Q',\n      data: Q\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs8EdDSAPublic(der) {\n  if (der.peek() === 0x00) der.readByte();\n  var A = utils.readBitString(der);\n  var key = {\n    type: 'ed25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs8X25519Public(der) {\n  var A = utils.readBitString(der);\n  var key = {\n    type: 'curve25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs8EdDSAPrivate(der) {\n  if (der.peek() === 0x00) der.readByte();\n  der.readSequence(asn1.Ber.OctetString);\n  var k = der.readString(asn1.Ber.OctetString, true);\n  k = utils.zeroPadToLength(k, 32);\n  var A, tag;\n  while ((tag = der.peek()) !== null) {\n    if (tag === (asn1.Ber.Context | 1)) {\n      A = utils.readBitString(der, tag);\n    } else {\n      der.readSequence(tag);\n      der._offset += der.length;\n    }\n  }\n  if (A === undefined) A = utils.calculateED25519Public(k);\n  var key = {\n    type: 'ed25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }, {\n      name: 'k',\n      data: utils.zeroPadToLength(k, 32)\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction readPkcs8X25519Private(der) {\n  if (der.peek() === 0x00) der.readByte();\n  der.readSequence(asn1.Ber.OctetString);\n  var k = der.readString(asn1.Ber.OctetString, true);\n  k = utils.zeroPadToLength(k, 32);\n  var A = utils.calculateX25519Public(k);\n  var key = {\n    type: 'curve25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }, {\n      name: 'k',\n      data: utils.zeroPadToLength(k, 32)\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction pkcs8ToBuffer(key) {\n  var der = new asn1.BerWriter();\n  writePkcs8(der, key);\n  return der.buffer;\n}\nfunction writePkcs8(der, key) {\n  der.startSequence();\n  if (PrivateKey.isPrivateKey(key)) {\n    var version = 0;\n    if (key.type === 'ed25519') version = 1;\n    var vbuf = Buffer.from([version]);\n    der.writeBuffer(vbuf, asn1.Ber.Integer);\n  }\n  der.startSequence();\n  switch (key.type) {\n    case 'rsa':\n      der.writeOID('1.2.840.113549.1.1.1');\n      if (PrivateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);else writePkcs8RSAPublic(key, der);\n      break;\n    case 'dsa':\n      der.writeOID('1.2.840.10040.4.1');\n      if (PrivateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);else writePkcs8DSAPublic(key, der);\n      break;\n    case 'ecdsa':\n      der.writeOID('1.2.840.10045.2.1');\n      if (PrivateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);else writePkcs8ECDSAPublic(key, der);\n      break;\n    case 'ed25519':\n      der.writeOID('1.3.101.112');\n      if (PrivateKey.isPrivateKey(key)) writePkcs8EdDSAPrivate(key, der);else writePkcs8EdDSAPublic(key, der);\n      break;\n    default:\n      throw new Error('Unsupported key type: ' + key.type);\n  }\n  der.endSequence();\n}\nfunction writePkcs8RSAPrivate(key, der) {\n  der.writeNull();\n  der.endSequence();\n  der.startSequence(asn1.Ber.OctetString);\n  der.startSequence();\n  var version = Buffer.from([0]);\n  der.writeBuffer(version, asn1.Ber.Integer);\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n  der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n}\nfunction writePkcs8RSAPublic(key, der) {\n  der.writeNull();\n  der.endSequence();\n  der.startSequence(asn1.Ber.BitString);\n  der.writeByte(0x00);\n  der.startSequence();\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n}\nfunction writePkcs8DSAPrivate(key, der) {\n  der.startSequence();\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n  der.startSequence(asn1.Ber.OctetString);\n  der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n  der.endSequence();\n}\nfunction writePkcs8DSAPublic(key, der) {\n  der.startSequence();\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n  der.startSequence(asn1.Ber.BitString);\n  der.writeByte(0x00);\n  der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n  der.endSequence();\n}\nfunction writeECDSACurve(key, der) {\n  var curve = algs.curves[key.curve];\n  if (curve.pkcs8oid) {\n    /* This one has a name in pkcs#8, so just write the oid */\n    der.writeOID(curve.pkcs8oid);\n  } else {\n    // ECParameters sequence\n    der.startSequence();\n    var version = Buffer.from([1]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n\n    // FieldID sequence\n    der.startSequence();\n    der.writeOID('1.2.840.10045.1.1'); // prime-field\n    der.writeBuffer(curve.p, asn1.Ber.Integer);\n    der.endSequence();\n\n    // Curve sequence\n    der.startSequence();\n    var a = curve.p;\n    if (a[0] === 0x0) a = a.slice(1);\n    der.writeBuffer(a, asn1.Ber.OctetString);\n    der.writeBuffer(curve.b, asn1.Ber.OctetString);\n    der.writeBuffer(curve.s, asn1.Ber.BitString);\n    der.endSequence();\n    der.writeBuffer(curve.G, asn1.Ber.OctetString);\n    der.writeBuffer(curve.n, asn1.Ber.Integer);\n    var h = curve.h;\n    if (!h) {\n      h = Buffer.from([1]);\n    }\n    der.writeBuffer(h, asn1.Ber.Integer);\n\n    // ECParameters\n    der.endSequence();\n  }\n}\nfunction writePkcs8ECDSAPublic(key, der) {\n  writeECDSACurve(key, der);\n  der.endSequence();\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs8ECDSAPrivate(key, der) {\n  writeECDSACurve(key, der);\n  der.endSequence();\n  der.startSequence(asn1.Ber.OctetString);\n  der.startSequence();\n  var version = Buffer.from([1]);\n  der.writeBuffer(version, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n  der.startSequence(0xa1);\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n  der.endSequence();\n  der.endSequence();\n  der.endSequence();\n}\nfunction writePkcs8EdDSAPublic(key, der) {\n  der.endSequence();\n  utils.writeBitString(der, key.part.A.data);\n}\nfunction writePkcs8EdDSAPrivate(key, der) {\n  der.endSequence();\n  der.startSequence(asn1.Ber.OctetString);\n  var k = utils.mpNormalize(key.part.k.data);\n  /* RFCs call for storing exactly 32 bytes, so strip any leading zeros */\n  while (k.length > 32 && k[0] === 0x00) k = k.slice(1);\n  der.writeBuffer(k, asn1.Ber.OctetString);\n  der.endSequence();\n  utils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n}","map":{"version":3,"names":["module","exports","read","readPkcs8","write","writePkcs8","pkcs8ToBuffer","readECDSACurve","writeECDSACurve","assert","require","asn1","Buffer","algs","utils","Key","PrivateKey","pem","buf","options","key","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","alg","type","readSequence","next","offset","length","oid","readOID","_offset","readPkcs8RSAPublic","readPkcs8RSAPrivate","readPkcs8DSAPublic","readPkcs8DSAPrivate","readPkcs8ECDSAPublic","readPkcs8ECDSAPrivate","readPkcs8EdDSAPublic","readPkcs8EdDSAPrivate","readPkcs8X25519Public","readPkcs8X25519Private","Error","BitString","readByte","n","e","source","originalInput","parts","name","data","OctetString","ver","equal","d","p","q","dmodp","dmodq","iqmp","g","y","x","calculateDSAPublic","curveName","curveNames","j","c","cd","OID","Object","keys","curves","pkcs8oid","version","curve","fieldTypeOid","size","countZeros","a","b","s","G","h","ks","i","k","undefined","equals","isBuffer","toString","string","Q","ecNormalize","pub","publicFromPrivateECDSA","part","from","A","readBitString","zeroPadToLength","tag","Context","calculateED25519Public","calculateX25519Public","BerWriter","buffer","startSequence","isPrivateKey","vbuf","writeBuffer","writeOID","writePkcs8RSAPrivate","writePkcs8RSAPublic","writePkcs8DSAPrivate","writePkcs8DSAPublic","writePkcs8ECDSAPrivate","writePkcs8ECDSAPublic","writePkcs8EdDSAPrivate","writePkcs8EdDSAPublic","endSequence","writeNull","addRSAMissing","writeByte","slice","writeBitString"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/formats/pkcs8.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs8: readPkcs8,\n\twrite: write,\n\twritePkcs8: writePkcs8,\n\tpkcs8ToBuffer: pkcs8ToBuffer,\n\n\treadECDSACurve: readECDSACurve,\n\twriteECDSACurve: writeECDSACurve\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs8'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs8'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs8(alg, type, der) {\n\t/* Private keys in pkcs#8 format have a weird extra int */\n\tif (der.peek() === asn1.Ber.Integer) {\n\t\tassert.strictEqual(type, 'private',\n\t\t    'unexpected Integer at start of public key');\n\t\tder.readString(asn1.Ber.Integer, true);\n\t}\n\n\tder.readSequence();\n\tvar next = der.offset + der.length;\n\n\tvar oid = der.readOID();\n\tswitch (oid) {\n\tcase '1.2.840.113549.1.1.1':\n\t\tder._offset = next;\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8RSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8RSAPrivate(der));\n\tcase '1.2.840.10040.4.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8DSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8DSAPrivate(der));\n\tcase '1.2.840.10045.2.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8ECDSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8ECDSAPrivate(der));\n\tcase '1.3.101.112':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8EdDSAPublic(der));\n\t\t} else {\n\t\t\treturn (readPkcs8EdDSAPrivate(der));\n\t\t}\n\tcase '1.3.101.110':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8X25519Public(der));\n\t\t} else {\n\t\t\treturn (readPkcs8X25519Private(der));\n\t\t}\n\tdefault:\n\t\tthrow (new Error('Unknown key type OID ' + oid));\n\t}\n}\n\nfunction readPkcs8RSAPublic(der) {\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\tder.readSequence();\n\n\t// modulus\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tsource: der.originalInput,\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8RSAPrivate(der) {\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar ver = readMPInt(der, 'version');\n\tassert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8DSAPublic(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\n\tvar y = readMPInt(der, 'y');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8DSAPrivate(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar x = readMPInt(der, 'x');\n\n\t/* The pkcs#8 format does not include the public key */\n\tvar y = utils.calculateDSAPublic(g, p, x);\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readECDSACurve(der) {\n\tvar curveName, curveNames;\n\tvar j, c, cd;\n\n\tif (der.peek() === asn1.Ber.OID) {\n\t\tvar oid = der.readOID();\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tif (cd.pkcs8oid === oid) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.readSequence();\n\t\tvar version = der.readString(asn1.Ber.Integer, true);\n\t\tassert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n\n\t\tvar curve = {};\n\n\t\t// FieldID sequence\n\t\tder.readSequence();\n\t\tvar fieldTypeOid = der.readOID();\n\t\tassert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',\n\t\t    'ECDSA key is not from a prime-field');\n\t\tvar p = curve.p = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\t/*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */\n\t\tcurve.size = p.length * 8 - utils.countZeros(p);\n\n\t\t// Curve sequence\n\t\tder.readSequence();\n\t\tcurve.a = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tcurve.b = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tif (der.peek() === asn1.Ber.BitString)\n\t\t\tcurve.s = der.readString(asn1.Ber.BitString, true);\n\n\t\t// Combined Gx and Gy\n\t\tcurve.G = der.readString(asn1.Ber.OctetString, true);\n\t\tassert.strictEqual(curve.G[0], 0x4,\n\t\t    'uncompressed G is required');\n\n\t\tcurve.n = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tcurve.h = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tassert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +\n\t\t    'required');\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tvar ks = Object.keys(curve);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tvar equal = true;\n\t\t\tfor (var i = 0; i < ks.length; ++i) {\n\t\t\t\tvar k = ks[i];\n\t\t\t\tif (cd[k] === undefined)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (typeof (cd[k]) === 'object' &&\n\t\t\t\t    cd[k].equals !== undefined) {\n\t\t\t\t\tif (!cd[k].equals(curve[k])) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (Buffer.isBuffer(cd[k])) {\n\t\t\t\t\tif (cd[k].toString('binary')\n\t\t\t\t\t    !== curve[k].toString('binary')) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (cd[k] !== curve[k]) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (equal) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (curveName);\n}\n\nfunction readPkcs8ECDSAPrivate(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar version = readMPInt(der, 'version');\n\tassert.equal(version[0], 1, 'unknown version of ECDSA key');\n\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\tvar Q;\n\n\tif (der.peek() == 0xa0) {\n\t\tder.readSequence(0xa0);\n\t\tder._offset += der.length;\n\t}\n\tif (der.peek() == 0xa1) {\n\t\tder.readSequence(0xa1);\n\t\tQ = der.readString(asn1.Ber.BitString, true);\n\t\tQ = utils.ecNormalize(Q);\n\t}\n\n\tif (Q === undefined) {\n\t\tvar pub = utils.publicFromPrivateECDSA(curveName, d);\n\t\tQ = pub.part.Q.data;\n\t}\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8ECDSAPublic(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPublic(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8X25519Public(der) {\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPrivate(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A, tag;\n\twhile ((tag = der.peek()) !== null) {\n\t\tif (tag === (asn1.Ber.Context | 1)) {\n\t\t\tA = utils.readBitString(der, tag);\n\t\t} else {\n\t\t\tder.readSequence(tag);\n\t\t\tder._offset += der.length;\n\t\t}\n\t}\n\tif (A === undefined)\n\t\tA = utils.calculateED25519Public(k);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8X25519Private(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A = utils.calculateX25519Public(k);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction pkcs8ToBuffer(key) {\n\tvar der = new asn1.BerWriter();\n\twritePkcs8(der, key);\n\treturn (der.buffer);\n}\n\nfunction writePkcs8(der, key) {\n\tder.startSequence();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tvar version = 0;\n\t\tif (key.type === 'ed25519')\n\t\t\tversion = 1;\n\t\tvar vbuf = Buffer.from([version]);\n\t\tder.writeBuffer(vbuf, asn1.Ber.Integer);\n\t}\n\n\tder.startSequence();\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tder.writeOID('1.2.840.113549.1.1.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8RSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8RSAPublic(key, der);\n\t\tbreak;\n\tcase 'dsa':\n\t\tder.writeOID('1.2.840.10040.4.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8DSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8DSAPublic(key, der);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tder.writeOID('1.2.840.10045.2.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8ECDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8ECDSAPublic(key, der);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tder.writeOID('1.3.101.112');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8EdDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8EdDSAPublic(key, der);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported key type: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPrivate(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = Buffer.from([0]);\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPublic(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\n\tder.startSequence();\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPrivate(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPublic(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writeECDSACurve(key, der) {\n\tvar curve = algs.curves[key.curve];\n\tif (curve.pkcs8oid) {\n\t\t/* This one has a name in pkcs#8, so just write the oid */\n\t\tder.writeOID(curve.pkcs8oid);\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.startSequence();\n\n\t\tvar version = Buffer.from([1]);\n\t\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\t\t// FieldID sequence\n\t\tder.startSequence();\n\t\tder.writeOID('1.2.840.10045.1.1'); // prime-field\n\t\tder.writeBuffer(curve.p, asn1.Ber.Integer);\n\t\tder.endSequence();\n\n\t\t// Curve sequence\n\t\tder.startSequence();\n\t\tvar a = curve.p;\n\t\tif (a[0] === 0x0)\n\t\t\ta = a.slice(1);\n\t\tder.writeBuffer(a, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.b, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.s, asn1.Ber.BitString);\n\t\tder.endSequence();\n\n\t\tder.writeBuffer(curve.G, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.n, asn1.Ber.Integer);\n\t\tvar h = curve.h;\n\t\tif (!h) {\n\t\t\th = Buffer.from([1]);\n\t\t}\n\t\tder.writeBuffer(h, asn1.Ber.Integer);\n\n\t\t// ECParameters\n\t\tder.endSequence();\n\t}\n}\n\nfunction writePkcs8ECDSAPublic(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs8ECDSAPrivate(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = Buffer.from([1]);\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8EdDSAPublic(key, der) {\n\tder.endSequence();\n\n\tutils.writeBitString(der, key.part.A.data);\n}\n\nfunction writePkcs8EdDSAPrivate(key, der) {\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tvar k = utils.mpNormalize(key.part.k.data);\n\t/* RFCs call for storing exactly 32 bytes, so strip any leading zeros */\n\twhile (k.length > 32 && k[0] === 0x00)\n\t\tk = k.slice(1);\n\tder.writeBuffer(k, asn1.Ber.OctetString);\n\tder.endSequence();\n\n\tutils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}