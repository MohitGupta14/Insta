{"ast":null,"code":"/*\n * lib/jsprim.js: utilities for primitive JavaScript types\n */\n\nvar mod_assert = require('assert-plus');\nvar mod_util = require('util');\nvar mod_extsprintf = require('extsprintf');\nvar mod_verror = require('verror');\nvar mod_jsonschema = require('json-schema');\n\n/*\n * Public interface\n */\nexports.deepCopy = deepCopy;\nexports.deepEqual = deepEqual;\nexports.isEmpty = isEmpty;\nexports.hasKey = hasKey;\nexports.forEachKey = forEachKey;\nexports.pluck = pluck;\nexports.flattenObject = flattenObject;\nexports.flattenIter = flattenIter;\nexports.validateJsonObject = validateJsonObjectJS;\nexports.validateJsonObjectJS = validateJsonObjectJS;\nexports.randElt = randElt;\nexports.extraProperties = extraProperties;\nexports.mergeObjects = mergeObjects;\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\nexports.parseInteger = parseInteger;\nexports.iso8601 = iso8601;\nexports.rfc1123 = rfc1123;\nexports.parseDateTime = parseDateTime;\nexports.hrtimediff = hrtimeDiff;\nexports.hrtimeDiff = hrtimeDiff;\nexports.hrtimeAccum = hrtimeAccum;\nexports.hrtimeAdd = hrtimeAdd;\nexports.hrtimeNanosec = hrtimeNanosec;\nexports.hrtimeMicrosec = hrtimeMicrosec;\nexports.hrtimeMillisec = hrtimeMillisec;\n\n/*\n * Deep copy an acyclic *basic* Javascript object.  This only handles basic\n * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects\n * containing these.  This does *not* handle instances of other classes.\n */\nfunction deepCopy(obj) {\n  var ret, key;\n  var marker = '__deepCopy';\n  if (obj && obj[marker]) throw new Error('attempted deep copy of cyclic object');\n  if (obj && obj.constructor == Object) {\n    ret = {};\n    obj[marker] = true;\n    for (key in obj) {\n      if (key == marker) continue;\n      ret[key] = deepCopy(obj[key]);\n    }\n    delete obj[marker];\n    return ret;\n  }\n  if (obj && obj.constructor == Array) {\n    ret = [];\n    obj[marker] = true;\n    for (key = 0; key < obj.length; key++) ret.push(deepCopy(obj[key]));\n    delete obj[marker];\n    return ret;\n  }\n\n  /*\n   * It must be a primitive type -- just return it.\n   */\n  return obj;\n}\nfunction deepEqual(obj1, obj2) {\n  if (typeof obj1 != typeof obj2) return false;\n  if (obj1 === null || obj2 === null || typeof obj1 != 'object') return obj1 === obj2;\n  if (obj1.constructor != obj2.constructor) return false;\n  var k;\n  for (k in obj1) {\n    if (!obj2.hasOwnProperty(k)) return false;\n    if (!deepEqual(obj1[k], obj2[k])) return false;\n  }\n  for (k in obj2) {\n    if (!obj1.hasOwnProperty(k)) return false;\n  }\n  return true;\n}\nfunction isEmpty(obj) {\n  var key;\n  for (key in obj) return false;\n  return true;\n}\nfunction hasKey(obj, key) {\n  mod_assert.equal(typeof key, 'string');\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction forEachKey(obj, callback) {\n  for (var key in obj) {\n    if (hasKey(obj, key)) {\n      callback(key, obj[key]);\n    }\n  }\n}\nfunction pluck(obj, key) {\n  mod_assert.equal(typeof key, 'string');\n  return pluckv(obj, key);\n}\nfunction pluckv(obj, key) {\n  if (obj === null || typeof obj !== 'object') return undefined;\n  if (obj.hasOwnProperty(key)) return obj[key];\n  var i = key.indexOf('.');\n  if (i == -1) return undefined;\n  var key1 = key.substr(0, i);\n  if (!obj.hasOwnProperty(key1)) return undefined;\n  return pluckv(obj[key1], key.substr(i + 1));\n}\n\n/*\n * Invoke callback(row) for each entry in the array that would be returned by\n * flattenObject(data, depth).  This is just like flattenObject(data,\n * depth).forEach(callback), except that the intermediate array is never\n * created.\n */\nfunction flattenIter(data, depth, callback) {\n  doFlattenIter(data, depth, [], callback);\n}\nfunction doFlattenIter(data, depth, accum, callback) {\n  var each;\n  var key;\n  if (depth === 0) {\n    each = accum.slice(0);\n    each.push(data);\n    callback(each);\n    return;\n  }\n  mod_assert.ok(data !== null);\n  mod_assert.equal(typeof data, 'object');\n  mod_assert.equal(typeof depth, 'number');\n  mod_assert.ok(depth >= 0);\n  for (key in data) {\n    each = accum.slice(0);\n    each.push(key);\n    doFlattenIter(data[key], depth - 1, each, callback);\n  }\n}\nfunction flattenObject(data, depth) {\n  if (depth === 0) return [data];\n  mod_assert.ok(data !== null);\n  mod_assert.equal(typeof data, 'object');\n  mod_assert.equal(typeof depth, 'number');\n  mod_assert.ok(depth >= 0);\n  var rv = [];\n  var key;\n  for (key in data) {\n    flattenObject(data[key], depth - 1).forEach(function (p) {\n      rv.push([key].concat(p));\n    });\n  }\n  return rv;\n}\nfunction startsWith(str, prefix) {\n  return str.substr(0, prefix.length) == prefix;\n}\nfunction endsWith(str, suffix) {\n  return str.substr(str.length - suffix.length, suffix.length) == suffix;\n}\nfunction iso8601(d) {\n  if (typeof d == 'number') d = new Date(d);\n  mod_assert.ok(d.constructor === Date);\n  return mod_extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ', d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n}\nvar RFC1123_MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar RFC1123_DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nfunction rfc1123(date) {\n  return mod_extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT', RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(), RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());\n}\n\n/*\n * Parses a date expressed as a string, as either a number of milliseconds since\n * the epoch or any string format that Date accepts, giving preference to the\n * former where these two sets overlap (e.g., small numbers).\n */\nfunction parseDateTime(str) {\n  /*\n   * This is irritatingly implicit, but significantly more concise than\n   * alternatives.  The \"+str\" will convert a string containing only a\n   * number directly to a Number, or NaN for other strings.  Thus, if the\n   * conversion succeeds, we use it (this is the milliseconds-since-epoch\n   * case).  Otherwise, we pass the string directly to the Date\n   * constructor to parse.\n   */\n  var numeric = +str;\n  if (!isNaN(numeric)) {\n    return new Date(numeric);\n  } else {\n    return new Date(str);\n  }\n}\n\n/*\n * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode\n * the ES6 definitions here, while allowing for them to someday be higher.\n */\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n\n/*\n * Default options for parseInteger().\n */\nvar PI_DEFAULTS = {\n  base: 10,\n  allowSign: true,\n  allowPrefix: false,\n  allowTrailing: false,\n  allowImprecise: false,\n  trimWhitespace: false,\n  leadingZeroIsOctal: false\n};\nvar CP_0 = 0x30;\nvar CP_9 = 0x39;\nvar CP_A = 0x41;\nvar CP_B = 0x42;\nvar CP_O = 0x4f;\nvar CP_T = 0x54;\nvar CP_X = 0x58;\nvar CP_Z = 0x5a;\nvar CP_a = 0x61;\nvar CP_b = 0x62;\nvar CP_o = 0x6f;\nvar CP_t = 0x74;\nvar CP_x = 0x78;\nvar CP_z = 0x7a;\nvar PI_CONV_DEC = 0x30;\nvar PI_CONV_UC = 0x37;\nvar PI_CONV_LC = 0x57;\n\n/*\n * A stricter version of parseInt() that provides options for changing what\n * is an acceptable string (for example, disallowing trailing characters).\n */\nfunction parseInteger(str, uopts) {\n  mod_assert.string(str, 'str');\n  mod_assert.optionalObject(uopts, 'options');\n  var baseOverride = false;\n  var options = PI_DEFAULTS;\n  if (uopts) {\n    baseOverride = hasKey(uopts, 'base');\n    options = mergeObjects(options, uopts);\n    mod_assert.number(options.base, 'options.base');\n    mod_assert.ok(options.base >= 2, 'options.base >= 2');\n    mod_assert.ok(options.base <= 36, 'options.base <= 36');\n    mod_assert.bool(options.allowSign, 'options.allowSign');\n    mod_assert.bool(options.allowPrefix, 'options.allowPrefix');\n    mod_assert.bool(options.allowTrailing, 'options.allowTrailing');\n    mod_assert.bool(options.allowImprecise, 'options.allowImprecise');\n    mod_assert.bool(options.trimWhitespace, 'options.trimWhitespace');\n    mod_assert.bool(options.leadingZeroIsOctal, 'options.leadingZeroIsOctal');\n    if (options.leadingZeroIsOctal) {\n      mod_assert.ok(!baseOverride, '\"base\" and \"leadingZeroIsOctal\" are ' + 'mutually exclusive');\n    }\n  }\n  var c;\n  var pbase = -1;\n  var base = options.base;\n  var start;\n  var mult = 1;\n  var value = 0;\n  var idx = 0;\n  var len = str.length;\n\n  /* Trim any whitespace on the left side. */\n  if (options.trimWhitespace) {\n    while (idx < len && isSpace(str.charCodeAt(idx))) {\n      ++idx;\n    }\n  }\n\n  /* Check the number for a leading sign. */\n  if (options.allowSign) {\n    if (str[idx] === '-') {\n      idx += 1;\n      mult = -1;\n    } else if (str[idx] === '+') {\n      idx += 1;\n    }\n  }\n\n  /* Parse the base-indicating prefix if there is one. */\n  if (str[idx] === '0') {\n    if (options.allowPrefix) {\n      pbase = prefixToBase(str.charCodeAt(idx + 1));\n      if (pbase !== -1 && (!baseOverride || pbase === base)) {\n        base = pbase;\n        idx += 2;\n      }\n    }\n    if (pbase === -1 && options.leadingZeroIsOctal) {\n      base = 8;\n    }\n  }\n\n  /* Parse the actual digits. */\n  for (start = idx; idx < len; ++idx) {\n    c = translateDigit(str.charCodeAt(idx));\n    if (c !== -1 && c < base) {\n      value *= base;\n      value += c;\n    } else {\n      break;\n    }\n  }\n\n  /* If we didn't parse any digits, we have an invalid number. */\n  if (start === idx) {\n    return new Error('invalid number: ' + JSON.stringify(str));\n  }\n\n  /* Trim any whitespace on the right side. */\n  if (options.trimWhitespace) {\n    while (idx < len && isSpace(str.charCodeAt(idx))) {\n      ++idx;\n    }\n  }\n\n  /* Check for trailing characters. */\n  if (idx < len && !options.allowTrailing) {\n    return new Error('trailing characters after number: ' + JSON.stringify(str.slice(idx)));\n  }\n\n  /* If our value is 0, we return now, to avoid returning -0. */\n  if (value === 0) {\n    return 0;\n  }\n\n  /* Calculate our final value. */\n  var result = value * mult;\n\n  /*\n   * If the string represents a value that cannot be precisely represented\n   * by JavaScript, then we want to check that:\n   *\n   * - We never increased the value past MAX_SAFE_INTEGER\n   * - We don't make the result negative and below MIN_SAFE_INTEGER\n   *\n   * Because we only ever increment the value during parsing, there's no\n   * chance of moving past MAX_SAFE_INTEGER and then dropping below it\n   * again, losing precision in the process. This means that we only need\n   * to do our checks here, at the end.\n   */\n  if (!options.allowImprecise && (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {\n    return new Error('number is outside of the supported range: ' + JSON.stringify(str.slice(start, idx)));\n  }\n  return result;\n}\n\n/*\n * Interpret a character code as a base-36 digit.\n */\nfunction translateDigit(d) {\n  if (d >= CP_0 && d <= CP_9) {\n    /* '0' to '9' -> 0 to 9 */\n    return d - PI_CONV_DEC;\n  } else if (d >= CP_A && d <= CP_Z) {\n    /* 'A' - 'Z' -> 10 to 35 */\n    return d - PI_CONV_UC;\n  } else if (d >= CP_a && d <= CP_z) {\n    /* 'a' - 'z' -> 10 to 35 */\n    return d - PI_CONV_LC;\n  } else {\n    /* Invalid character code */\n    return -1;\n  }\n}\n\n/*\n * Test if a value matches the ECMAScript definition of trimmable whitespace.\n */\nfunction isSpace(c) {\n  return c === 0x20 || c >= 0x0009 && c <= 0x000d || c === 0x00a0 || c === 0x1680 || c === 0x180e || c >= 0x2000 && c <= 0x200a || c === 0x2028 || c === 0x2029 || c === 0x202f || c === 0x205f || c === 0x3000 || c === 0xfeff;\n}\n\n/*\n * Determine which base a character indicates (e.g., 'x' indicates hex).\n */\nfunction prefixToBase(c) {\n  if (c === CP_b || c === CP_B) {\n    /* 0b/0B (binary) */\n    return 2;\n  } else if (c === CP_o || c === CP_O) {\n    /* 0o/0O (octal) */\n    return 8;\n  } else if (c === CP_t || c === CP_T) {\n    /* 0t/0T (decimal) */\n    return 10;\n  } else if (c === CP_x || c === CP_X) {\n    /* 0x/0X (hexadecimal) */\n    return 16;\n  } else {\n    /* Not a meaningful character */\n    return -1;\n  }\n}\nfunction validateJsonObjectJS(schema, input) {\n  var report = mod_jsonschema.validate(input, schema);\n  if (report.errors.length === 0) return null;\n\n  /* Currently, we only do anything useful with the first error. */\n  var error = report.errors[0];\n\n  /* The failed property is given by a URI with an irrelevant prefix. */\n  var propname = error['property'];\n  var reason = error['message'].toLowerCase();\n  var i, j;\n\n  /*\n   * There's at least one case where the property error message is\n   * confusing at best.  We work around this here.\n   */\n  if ((i = reason.indexOf('the property ')) != -1 && (j = reason.indexOf(' is not defined in the schema and the ' + 'schema does not allow additional properties')) != -1) {\n    i += 'the property '.length;\n    if (propname === '') propname = reason.substr(i, j - i);else propname = propname + '.' + reason.substr(i, j - i);\n    reason = 'unsupported property';\n  }\n  var rv = new mod_verror.VError('property \"%s\": %s', propname, reason);\n  rv.jsv_details = error;\n  return rv;\n}\nfunction randElt(arr) {\n  mod_assert.ok(Array.isArray(arr) && arr.length > 0, 'randElt argument must be a non-empty array');\n  return arr[Math.floor(Math.random() * arr.length)];\n}\nfunction assertHrtime(a) {\n  mod_assert.ok(a[0] >= 0 && a[1] >= 0, 'negative numbers not allowed in hrtimes');\n  mod_assert.ok(a[1] < 1e9, 'nanoseconds column overflow');\n}\n\n/*\n * Compute the time elapsed between hrtime readings A and B, where A is later\n * than B.  hrtime readings come from Node's process.hrtime().  There is no\n * defined way to represent negative deltas, so it's illegal to diff B from A\n * where the time denoted by B is later than the time denoted by A.  If this\n * becomes valuable, we can define a representation and extend the\n * implementation to support it.\n */\nfunction hrtimeDiff(a, b) {\n  assertHrtime(a);\n  assertHrtime(b);\n  mod_assert.ok(a[0] > b[0] || a[0] == b[0] && a[1] >= b[1], 'negative differences not allowed');\n  var rv = [a[0] - b[0], 0];\n  if (a[1] >= b[1]) {\n    rv[1] = a[1] - b[1];\n  } else {\n    rv[0]--;\n    rv[1] = 1e9 - (b[1] - a[1]);\n  }\n  return rv;\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of nanoseconds.\n */\nfunction hrtimeNanosec(a) {\n  assertHrtime(a);\n  return Math.floor(a[0] * 1e9 + a[1]);\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of microseconds.\n */\nfunction hrtimeMicrosec(a) {\n  assertHrtime(a);\n  return Math.floor(a[0] * 1e6 + a[1] / 1e3);\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of milliseconds.\n */\nfunction hrtimeMillisec(a) {\n  assertHrtime(a);\n  return Math.floor(a[0] * 1e3 + a[1] / 1e6);\n}\n\n/*\n * Add two hrtime readings A and B, overwriting A with the result of the\n * addition.  This function is useful for accumulating several hrtime intervals\n * into a counter.  Returns A.\n */\nfunction hrtimeAccum(a, b) {\n  assertHrtime(a);\n  assertHrtime(b);\n\n  /*\n   * Accumulate the nanosecond component.\n   */\n  a[1] += b[1];\n  if (a[1] >= 1e9) {\n    /*\n     * The nanosecond component overflowed, so carry to the seconds\n     * field.\n     */\n    a[0]++;\n    a[1] -= 1e9;\n  }\n\n  /*\n   * Accumulate the seconds component.\n   */\n  a[0] += b[0];\n  return a;\n}\n\n/*\n * Add two hrtime readings A and B, returning the result as a new hrtime array.\n * Does not modify either input argument.\n */\nfunction hrtimeAdd(a, b) {\n  assertHrtime(a);\n  var rv = [a[0], a[1]];\n  return hrtimeAccum(rv, b);\n}\n\n/*\n * Check an object for unexpected properties.  Accepts the object to check, and\n * an array of allowed property names (strings).  Returns an array of key names\n * that were found on the object, but did not appear in the list of allowed\n * properties.  If no properties were found, the returned array will be of\n * zero length.\n */\nfunction extraProperties(obj, allowed) {\n  mod_assert.ok(typeof obj === 'object' && obj !== null, 'obj argument must be a non-null object');\n  mod_assert.ok(Array.isArray(allowed), 'allowed argument must be an array of strings');\n  for (var i = 0; i < allowed.length; i++) {\n    mod_assert.ok(typeof allowed[i] === 'string', 'allowed argument must be an array of strings');\n  }\n  return Object.keys(obj).filter(function (key) {\n    return allowed.indexOf(key) === -1;\n  });\n}\n\n/*\n * Given three sets of properties \"provided\" (may be undefined), \"overrides\"\n * (required), and \"defaults\" (may be undefined), construct an object containing\n * the union of these sets with \"overrides\" overriding \"provided\", and\n * \"provided\" overriding \"defaults\".  None of the input objects are modified.\n */\nfunction mergeObjects(provided, overrides, defaults) {\n  var rv, k;\n  rv = {};\n  if (defaults) {\n    for (k in defaults) rv[k] = defaults[k];\n  }\n  if (provided) {\n    for (k in provided) rv[k] = provided[k];\n  }\n  if (overrides) {\n    for (k in overrides) rv[k] = overrides[k];\n  }\n  return rv;\n}","map":{"version":3,"names":["mod_assert","require","mod_util","mod_extsprintf","mod_verror","mod_jsonschema","exports","deepCopy","deepEqual","isEmpty","hasKey","forEachKey","pluck","flattenObject","flattenIter","validateJsonObject","validateJsonObjectJS","randElt","extraProperties","mergeObjects","startsWith","endsWith","parseInteger","iso8601","rfc1123","parseDateTime","hrtimediff","hrtimeDiff","hrtimeAccum","hrtimeAdd","hrtimeNanosec","hrtimeMicrosec","hrtimeMillisec","obj","ret","key","marker","Error","constructor","Object","Array","length","push","obj1","obj2","k","hasOwnProperty","equal","prototype","call","callback","pluckv","undefined","i","indexOf","key1","substr","data","depth","doFlattenIter","accum","each","slice","ok","rv","forEach","p","concat","str","prefix","suffix","d","Date","sprintf","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","RFC1123_MONTHS","RFC1123_DAYS","date","getUTCDay","numeric","isNaN","MAX_SAFE_INTEGER","Number","MIN_SAFE_INTEGER","PI_DEFAULTS","base","allowSign","allowPrefix","allowTrailing","allowImprecise","trimWhitespace","leadingZeroIsOctal","CP_0","CP_9","CP_A","CP_B","CP_O","CP_T","CP_X","CP_Z","CP_a","CP_b","CP_o","CP_t","CP_x","CP_z","PI_CONV_DEC","PI_CONV_UC","PI_CONV_LC","uopts","string","optionalObject","baseOverride","options","number","bool","c","pbase","start","mult","value","idx","len","isSpace","charCodeAt","prefixToBase","translateDigit","JSON","stringify","result","schema","input","report","validate","errors","error","propname","reason","toLowerCase","j","VError","jsv_details","arr","isArray","Math","floor","random","assertHrtime","a","b","allowed","keys","filter","provided","overrides","defaults"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/jsprim/lib/jsprim.js"],"sourcesContent":["/*\n * lib/jsprim.js: utilities for primitive JavaScript types\n */\n\nvar mod_assert = require('assert-plus');\nvar mod_util = require('util');\n\nvar mod_extsprintf = require('extsprintf');\nvar mod_verror = require('verror');\nvar mod_jsonschema = require('json-schema');\n\n/*\n * Public interface\n */\nexports.deepCopy = deepCopy;\nexports.deepEqual = deepEqual;\nexports.isEmpty = isEmpty;\nexports.hasKey = hasKey;\nexports.forEachKey = forEachKey;\nexports.pluck = pluck;\nexports.flattenObject = flattenObject;\nexports.flattenIter = flattenIter;\nexports.validateJsonObject = validateJsonObjectJS;\nexports.validateJsonObjectJS = validateJsonObjectJS;\nexports.randElt = randElt;\nexports.extraProperties = extraProperties;\nexports.mergeObjects = mergeObjects;\n\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\n\nexports.parseInteger = parseInteger;\n\nexports.iso8601 = iso8601;\nexports.rfc1123 = rfc1123;\nexports.parseDateTime = parseDateTime;\n\nexports.hrtimediff = hrtimeDiff;\nexports.hrtimeDiff = hrtimeDiff;\nexports.hrtimeAccum = hrtimeAccum;\nexports.hrtimeAdd = hrtimeAdd;\nexports.hrtimeNanosec = hrtimeNanosec;\nexports.hrtimeMicrosec = hrtimeMicrosec;\nexports.hrtimeMillisec = hrtimeMillisec;\n\n\n/*\n * Deep copy an acyclic *basic* Javascript object.  This only handles basic\n * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects\n * containing these.  This does *not* handle instances of other classes.\n */\nfunction deepCopy(obj)\n{\n\tvar ret, key;\n\tvar marker = '__deepCopy';\n\n\tif (obj && obj[marker])\n\t\tthrow (new Error('attempted deep copy of cyclic object'));\n\n\tif (obj && obj.constructor == Object) {\n\t\tret = {};\n\t\tobj[marker] = true;\n\n\t\tfor (key in obj) {\n\t\t\tif (key == marker)\n\t\t\t\tcontinue;\n\n\t\t\tret[key] = deepCopy(obj[key]);\n\t\t}\n\n\t\tdelete (obj[marker]);\n\t\treturn (ret);\n\t}\n\n\tif (obj && obj.constructor == Array) {\n\t\tret = [];\n\t\tobj[marker] = true;\n\n\t\tfor (key = 0; key < obj.length; key++)\n\t\t\tret.push(deepCopy(obj[key]));\n\n\t\tdelete (obj[marker]);\n\t\treturn (ret);\n\t}\n\n\t/*\n\t * It must be a primitive type -- just return it.\n\t */\n\treturn (obj);\n}\n\nfunction deepEqual(obj1, obj2)\n{\n\tif (typeof (obj1) != typeof (obj2))\n\t\treturn (false);\n\n\tif (obj1 === null || obj2 === null || typeof (obj1) != 'object')\n\t\treturn (obj1 === obj2);\n\n\tif (obj1.constructor != obj2.constructor)\n\t\treturn (false);\n\n\tvar k;\n\tfor (k in obj1) {\n\t\tif (!obj2.hasOwnProperty(k))\n\t\t\treturn (false);\n\n\t\tif (!deepEqual(obj1[k], obj2[k]))\n\t\t\treturn (false);\n\t}\n\n\tfor (k in obj2) {\n\t\tif (!obj1.hasOwnProperty(k))\n\t\t\treturn (false);\n\t}\n\n\treturn (true);\n}\n\nfunction isEmpty(obj)\n{\n\tvar key;\n\tfor (key in obj)\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction hasKey(obj, key)\n{\n\tmod_assert.equal(typeof (key), 'string');\n\treturn (Object.prototype.hasOwnProperty.call(obj, key));\n}\n\nfunction forEachKey(obj, callback)\n{\n\tfor (var key in obj) {\n\t\tif (hasKey(obj, key)) {\n\t\t\tcallback(key, obj[key]);\n\t\t}\n\t}\n}\n\nfunction pluck(obj, key)\n{\n\tmod_assert.equal(typeof (key), 'string');\n\treturn (pluckv(obj, key));\n}\n\nfunction pluckv(obj, key)\n{\n\tif (obj === null || typeof (obj) !== 'object')\n\t\treturn (undefined);\n\n\tif (obj.hasOwnProperty(key))\n\t\treturn (obj[key]);\n\n\tvar i = key.indexOf('.');\n\tif (i == -1)\n\t\treturn (undefined);\n\n\tvar key1 = key.substr(0, i);\n\tif (!obj.hasOwnProperty(key1))\n\t\treturn (undefined);\n\n\treturn (pluckv(obj[key1], key.substr(i + 1)));\n}\n\n/*\n * Invoke callback(row) for each entry in the array that would be returned by\n * flattenObject(data, depth).  This is just like flattenObject(data,\n * depth).forEach(callback), except that the intermediate array is never\n * created.\n */\nfunction flattenIter(data, depth, callback)\n{\n\tdoFlattenIter(data, depth, [], callback);\n}\n\nfunction doFlattenIter(data, depth, accum, callback)\n{\n\tvar each;\n\tvar key;\n\n\tif (depth === 0) {\n\t\teach = accum.slice(0);\n\t\teach.push(data);\n\t\tcallback(each);\n\t\treturn;\n\t}\n\n\tmod_assert.ok(data !== null);\n\tmod_assert.equal(typeof (data), 'object');\n\tmod_assert.equal(typeof (depth), 'number');\n\tmod_assert.ok(depth >= 0);\n\n\tfor (key in data) {\n\t\teach = accum.slice(0);\n\t\teach.push(key);\n\t\tdoFlattenIter(data[key], depth - 1, each, callback);\n\t}\n}\n\nfunction flattenObject(data, depth)\n{\n\tif (depth === 0)\n\t\treturn ([ data ]);\n\n\tmod_assert.ok(data !== null);\n\tmod_assert.equal(typeof (data), 'object');\n\tmod_assert.equal(typeof (depth), 'number');\n\tmod_assert.ok(depth >= 0);\n\n\tvar rv = [];\n\tvar key;\n\n\tfor (key in data) {\n\t\tflattenObject(data[key], depth - 1).forEach(function (p) {\n\t\t\trv.push([ key ].concat(p));\n\t\t});\n\t}\n\n\treturn (rv);\n}\n\nfunction startsWith(str, prefix)\n{\n\treturn (str.substr(0, prefix.length) == prefix);\n}\n\nfunction endsWith(str, suffix)\n{\n\treturn (str.substr(\n\t    str.length - suffix.length, suffix.length) == suffix);\n}\n\nfunction iso8601(d)\n{\n\tif (typeof (d) == 'number')\n\t\td = new Date(d);\n\tmod_assert.ok(d.constructor === Date);\n\treturn (mod_extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ',\n\t    d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(),\n\t    d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(),\n\t    d.getUTCMilliseconds()));\n}\n\nvar RFC1123_MONTHS = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar RFC1123_DAYS = [\n    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nfunction rfc1123(date) {\n\treturn (mod_extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT',\n\t    RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(),\n\t    RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(),\n\t    date.getUTCHours(), date.getUTCMinutes(),\n\t    date.getUTCSeconds()));\n}\n\n/*\n * Parses a date expressed as a string, as either a number of milliseconds since\n * the epoch or any string format that Date accepts, giving preference to the\n * former where these two sets overlap (e.g., small numbers).\n */\nfunction parseDateTime(str)\n{\n\t/*\n\t * This is irritatingly implicit, but significantly more concise than\n\t * alternatives.  The \"+str\" will convert a string containing only a\n\t * number directly to a Number, or NaN for other strings.  Thus, if the\n\t * conversion succeeds, we use it (this is the milliseconds-since-epoch\n\t * case).  Otherwise, we pass the string directly to the Date\n\t * constructor to parse.\n\t */\n\tvar numeric = +str;\n\tif (!isNaN(numeric)) {\n\t\treturn (new Date(numeric));\n\t} else {\n\t\treturn (new Date(str));\n\t}\n}\n\n\n/*\n * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode\n * the ES6 definitions here, while allowing for them to someday be higher.\n */\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n\n\n/*\n * Default options for parseInteger().\n */\nvar PI_DEFAULTS = {\n\tbase: 10,\n\tallowSign: true,\n\tallowPrefix: false,\n\tallowTrailing: false,\n\tallowImprecise: false,\n\ttrimWhitespace: false,\n\tleadingZeroIsOctal: false\n};\n\nvar CP_0 = 0x30;\nvar CP_9 = 0x39;\n\nvar CP_A = 0x41;\nvar CP_B = 0x42;\nvar CP_O = 0x4f;\nvar CP_T = 0x54;\nvar CP_X = 0x58;\nvar CP_Z = 0x5a;\n\nvar CP_a = 0x61;\nvar CP_b = 0x62;\nvar CP_o = 0x6f;\nvar CP_t = 0x74;\nvar CP_x = 0x78;\nvar CP_z = 0x7a;\n\nvar PI_CONV_DEC = 0x30;\nvar PI_CONV_UC = 0x37;\nvar PI_CONV_LC = 0x57;\n\n\n/*\n * A stricter version of parseInt() that provides options for changing what\n * is an acceptable string (for example, disallowing trailing characters).\n */\nfunction parseInteger(str, uopts)\n{\n\tmod_assert.string(str, 'str');\n\tmod_assert.optionalObject(uopts, 'options');\n\n\tvar baseOverride = false;\n\tvar options = PI_DEFAULTS;\n\n\tif (uopts) {\n\t\tbaseOverride = hasKey(uopts, 'base');\n\t\toptions = mergeObjects(options, uopts);\n\t\tmod_assert.number(options.base, 'options.base');\n\t\tmod_assert.ok(options.base >= 2, 'options.base >= 2');\n\t\tmod_assert.ok(options.base <= 36, 'options.base <= 36');\n\t\tmod_assert.bool(options.allowSign, 'options.allowSign');\n\t\tmod_assert.bool(options.allowPrefix, 'options.allowPrefix');\n\t\tmod_assert.bool(options.allowTrailing,\n\t\t    'options.allowTrailing');\n\t\tmod_assert.bool(options.allowImprecise,\n\t\t    'options.allowImprecise');\n\t\tmod_assert.bool(options.trimWhitespace,\n\t\t    'options.trimWhitespace');\n\t\tmod_assert.bool(options.leadingZeroIsOctal,\n\t\t    'options.leadingZeroIsOctal');\n\n\t\tif (options.leadingZeroIsOctal) {\n\t\t\tmod_assert.ok(!baseOverride,\n\t\t\t    '\"base\" and \"leadingZeroIsOctal\" are ' +\n\t\t\t    'mutually exclusive');\n\t\t}\n\t}\n\n\tvar c;\n\tvar pbase = -1;\n\tvar base = options.base;\n\tvar start;\n\tvar mult = 1;\n\tvar value = 0;\n\tvar idx = 0;\n\tvar len = str.length;\n\n\t/* Trim any whitespace on the left side. */\n\tif (options.trimWhitespace) {\n\t\twhile (idx < len && isSpace(str.charCodeAt(idx))) {\n\t\t\t++idx;\n\t\t}\n\t}\n\n\t/* Check the number for a leading sign. */\n\tif (options.allowSign) {\n\t\tif (str[idx] === '-') {\n\t\t\tidx += 1;\n\t\t\tmult = -1;\n\t\t} else if (str[idx] === '+') {\n\t\t\tidx += 1;\n\t\t}\n\t}\n\n\t/* Parse the base-indicating prefix if there is one. */\n\tif (str[idx] === '0') {\n\t\tif (options.allowPrefix) {\n\t\t\tpbase = prefixToBase(str.charCodeAt(idx + 1));\n\t\t\tif (pbase !== -1 && (!baseOverride || pbase === base)) {\n\t\t\t\tbase = pbase;\n\t\t\t\tidx += 2;\n\t\t\t}\n\t\t}\n\n\t\tif (pbase === -1 && options.leadingZeroIsOctal) {\n\t\t\tbase = 8;\n\t\t}\n\t}\n\n\t/* Parse the actual digits. */\n\tfor (start = idx; idx < len; ++idx) {\n\t\tc = translateDigit(str.charCodeAt(idx));\n\t\tif (c !== -1 && c < base) {\n\t\t\tvalue *= base;\n\t\t\tvalue += c;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* If we didn't parse any digits, we have an invalid number. */\n\tif (start === idx) {\n\t\treturn (new Error('invalid number: ' + JSON.stringify(str)));\n\t}\n\n\t/* Trim any whitespace on the right side. */\n\tif (options.trimWhitespace) {\n\t\twhile (idx < len && isSpace(str.charCodeAt(idx))) {\n\t\t\t++idx;\n\t\t}\n\t}\n\n\t/* Check for trailing characters. */\n\tif (idx < len && !options.allowTrailing) {\n\t\treturn (new Error('trailing characters after number: ' +\n\t\t    JSON.stringify(str.slice(idx))));\n\t}\n\n\t/* If our value is 0, we return now, to avoid returning -0. */\n\tif (value === 0) {\n\t\treturn (0);\n\t}\n\n\t/* Calculate our final value. */\n\tvar result = value * mult;\n\n\t/*\n\t * If the string represents a value that cannot be precisely represented\n\t * by JavaScript, then we want to check that:\n\t *\n\t * - We never increased the value past MAX_SAFE_INTEGER\n\t * - We don't make the result negative and below MIN_SAFE_INTEGER\n\t *\n\t * Because we only ever increment the value during parsing, there's no\n\t * chance of moving past MAX_SAFE_INTEGER and then dropping below it\n\t * again, losing precision in the process. This means that we only need\n\t * to do our checks here, at the end.\n\t */\n\tif (!options.allowImprecise &&\n\t    (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {\n\t\treturn (new Error('number is outside of the supported range: ' +\n\t\t    JSON.stringify(str.slice(start, idx))));\n\t}\n\n\treturn (result);\n}\n\n\n/*\n * Interpret a character code as a base-36 digit.\n */\nfunction translateDigit(d)\n{\n\tif (d >= CP_0 && d <= CP_9) {\n\t\t/* '0' to '9' -> 0 to 9 */\n\t\treturn (d - PI_CONV_DEC);\n\t} else if (d >= CP_A && d <= CP_Z) {\n\t\t/* 'A' - 'Z' -> 10 to 35 */\n\t\treturn (d - PI_CONV_UC);\n\t} else if (d >= CP_a && d <= CP_z) {\n\t\t/* 'a' - 'z' -> 10 to 35 */\n\t\treturn (d - PI_CONV_LC);\n\t} else {\n\t\t/* Invalid character code */\n\t\treturn (-1);\n\t}\n}\n\n\n/*\n * Test if a value matches the ECMAScript definition of trimmable whitespace.\n */\nfunction isSpace(c)\n{\n\treturn (c === 0x20) ||\n\t    (c >= 0x0009 && c <= 0x000d) ||\n\t    (c === 0x00a0) ||\n\t    (c === 0x1680) ||\n\t    (c === 0x180e) ||\n\t    (c >= 0x2000 && c <= 0x200a) ||\n\t    (c === 0x2028) ||\n\t    (c === 0x2029) ||\n\t    (c === 0x202f) ||\n\t    (c === 0x205f) ||\n\t    (c === 0x3000) ||\n\t    (c === 0xfeff);\n}\n\n\n/*\n * Determine which base a character indicates (e.g., 'x' indicates hex).\n */\nfunction prefixToBase(c)\n{\n\tif (c === CP_b || c === CP_B) {\n\t\t/* 0b/0B (binary) */\n\t\treturn (2);\n\t} else if (c === CP_o || c === CP_O) {\n\t\t/* 0o/0O (octal) */\n\t\treturn (8);\n\t} else if (c === CP_t || c === CP_T) {\n\t\t/* 0t/0T (decimal) */\n\t\treturn (10);\n\t} else if (c === CP_x || c === CP_X) {\n\t\t/* 0x/0X (hexadecimal) */\n\t\treturn (16);\n\t} else {\n\t\t/* Not a meaningful character */\n\t\treturn (-1);\n\t}\n}\n\n\nfunction validateJsonObjectJS(schema, input)\n{\n\tvar report = mod_jsonschema.validate(input, schema);\n\n\tif (report.errors.length === 0)\n\t\treturn (null);\n\n\t/* Currently, we only do anything useful with the first error. */\n\tvar error = report.errors[0];\n\n\t/* The failed property is given by a URI with an irrelevant prefix. */\n\tvar propname = error['property'];\n\tvar reason = error['message'].toLowerCase();\n\tvar i, j;\n\n\t/*\n\t * There's at least one case where the property error message is\n\t * confusing at best.  We work around this here.\n\t */\n\tif ((i = reason.indexOf('the property ')) != -1 &&\n\t    (j = reason.indexOf(' is not defined in the schema and the ' +\n\t    'schema does not allow additional properties')) != -1) {\n\t\ti += 'the property '.length;\n\t\tif (propname === '')\n\t\t\tpropname = reason.substr(i, j - i);\n\t\telse\n\t\t\tpropname = propname + '.' + reason.substr(i, j - i);\n\n\t\treason = 'unsupported property';\n\t}\n\n\tvar rv = new mod_verror.VError('property \"%s\": %s', propname, reason);\n\trv.jsv_details = error;\n\treturn (rv);\n}\n\nfunction randElt(arr)\n{\n\tmod_assert.ok(Array.isArray(arr) && arr.length > 0,\n\t    'randElt argument must be a non-empty array');\n\n\treturn (arr[Math.floor(Math.random() * arr.length)]);\n}\n\nfunction assertHrtime(a)\n{\n\tmod_assert.ok(a[0] >= 0 && a[1] >= 0,\n\t    'negative numbers not allowed in hrtimes');\n\tmod_assert.ok(a[1] < 1e9, 'nanoseconds column overflow');\n}\n\n/*\n * Compute the time elapsed between hrtime readings A and B, where A is later\n * than B.  hrtime readings come from Node's process.hrtime().  There is no\n * defined way to represent negative deltas, so it's illegal to diff B from A\n * where the time denoted by B is later than the time denoted by A.  If this\n * becomes valuable, we can define a representation and extend the\n * implementation to support it.\n */\nfunction hrtimeDiff(a, b)\n{\n\tassertHrtime(a);\n\tassertHrtime(b);\n\tmod_assert.ok(a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1]),\n\t    'negative differences not allowed');\n\n\tvar rv = [ a[0] - b[0], 0 ];\n\n\tif (a[1] >= b[1]) {\n\t\trv[1] = a[1] - b[1];\n\t} else {\n\t\trv[0]--;\n\t\trv[1] = 1e9 - (b[1] - a[1]);\n\t}\n\n\treturn (rv);\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of nanoseconds.\n */\nfunction hrtimeNanosec(a)\n{\n\tassertHrtime(a);\n\n\treturn (Math.floor(a[0] * 1e9 + a[1]));\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of microseconds.\n */\nfunction hrtimeMicrosec(a)\n{\n\tassertHrtime(a);\n\n\treturn (Math.floor(a[0] * 1e6 + a[1] / 1e3));\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of milliseconds.\n */\nfunction hrtimeMillisec(a)\n{\n\tassertHrtime(a);\n\n\treturn (Math.floor(a[0] * 1e3 + a[1] / 1e6));\n}\n\n/*\n * Add two hrtime readings A and B, overwriting A with the result of the\n * addition.  This function is useful for accumulating several hrtime intervals\n * into a counter.  Returns A.\n */\nfunction hrtimeAccum(a, b)\n{\n\tassertHrtime(a);\n\tassertHrtime(b);\n\n\t/*\n\t * Accumulate the nanosecond component.\n\t */\n\ta[1] += b[1];\n\tif (a[1] >= 1e9) {\n\t\t/*\n\t\t * The nanosecond component overflowed, so carry to the seconds\n\t\t * field.\n\t\t */\n\t\ta[0]++;\n\t\ta[1] -= 1e9;\n\t}\n\n\t/*\n\t * Accumulate the seconds component.\n\t */\n\ta[0] += b[0];\n\n\treturn (a);\n}\n\n/*\n * Add two hrtime readings A and B, returning the result as a new hrtime array.\n * Does not modify either input argument.\n */\nfunction hrtimeAdd(a, b)\n{\n\tassertHrtime(a);\n\n\tvar rv = [ a[0], a[1] ];\n\n\treturn (hrtimeAccum(rv, b));\n}\n\n\n/*\n * Check an object for unexpected properties.  Accepts the object to check, and\n * an array of allowed property names (strings).  Returns an array of key names\n * that were found on the object, but did not appear in the list of allowed\n * properties.  If no properties were found, the returned array will be of\n * zero length.\n */\nfunction extraProperties(obj, allowed)\n{\n\tmod_assert.ok(typeof (obj) === 'object' && obj !== null,\n\t    'obj argument must be a non-null object');\n\tmod_assert.ok(Array.isArray(allowed),\n\t    'allowed argument must be an array of strings');\n\tfor (var i = 0; i < allowed.length; i++) {\n\t\tmod_assert.ok(typeof (allowed[i]) === 'string',\n\t\t    'allowed argument must be an array of strings');\n\t}\n\n\treturn (Object.keys(obj).filter(function (key) {\n\t\treturn (allowed.indexOf(key) === -1);\n\t}));\n}\n\n/*\n * Given three sets of properties \"provided\" (may be undefined), \"overrides\"\n * (required), and \"defaults\" (may be undefined), construct an object containing\n * the union of these sets with \"overrides\" overriding \"provided\", and\n * \"provided\" overriding \"defaults\".  None of the input objects are modified.\n */\nfunction mergeObjects(provided, overrides, defaults)\n{\n\tvar rv, k;\n\n\trv = {};\n\tif (defaults) {\n\t\tfor (k in defaults)\n\t\t\trv[k] = defaults[k];\n\t}\n\n\tif (provided) {\n\t\tfor (k in provided)\n\t\t\trv[k] = provided[k];\n\t}\n\n\tif (overrides) {\n\t\tfor (k in overrides)\n\t\t\trv[k] = overrides[k];\n\t}\n\n\treturn (rv);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}