{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n  bufferSplit: bufferSplit,\n  addRSAMissing: addRSAMissing,\n  calculateDSAPublic: calculateDSAPublic,\n  calculateED25519Public: calculateED25519Public,\n  calculateX25519Public: calculateX25519Public,\n  mpNormalize: mpNormalize,\n  mpDenormalize: mpDenormalize,\n  ecNormalize: ecNormalize,\n  countZeros: countZeros,\n  assertCompatible: assertCompatible,\n  isCompatible: isCompatible,\n  opensslKeyDeriv: opensslKeyDeriv,\n  opensshCipherInfo: opensshCipherInfo,\n  publicFromPrivateECDSA: publicFromPrivateECDSA,\n  zeroPadToLength: zeroPadToLength,\n  writeBitString: writeBitString,\n  readBitString: readBitString,\n  pbkdf2: pbkdf2\n};\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar PrivateKey = require('./private-key');\nvar Key = require('./key');\nvar crypto = require('crypto');\nvar algs = require('./algs');\nvar asn1 = require('asn1');\nvar ec = require('ecc-jsbn/lib/ec');\nvar jsbn = require('jsbn').BigInteger;\nvar nacl = require('tweetnacl');\nvar MAX_CLASS_DEPTH = 3;\nfunction isCompatible(obj, klass, needVer) {\n  if (obj === null || typeof obj !== 'object') return false;\n  if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n  if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return true;\n  var proto = Object.getPrototypeOf(obj);\n  var depth = 0;\n  while (proto.constructor.name !== klass.name) {\n    proto = Object.getPrototypeOf(proto);\n    if (!proto || ++depth > MAX_CLASS_DEPTH) return false;\n  }\n  if (proto.constructor.name !== klass.name) return false;\n  var ver = proto._sshpkApiVersion;\n  if (ver === undefined) ver = klass._oldVersionDetect(obj);\n  if (ver[0] != needVer[0] || ver[1] < needVer[1]) return false;\n  return true;\n}\nfunction assertCompatible(obj, klass, needVer, name) {\n  if (name === undefined) name = 'object';\n  assert.ok(obj, name + ' must not be null');\n  assert.object(obj, name + ' must be an object');\n  if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n  if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return;\n  var proto = Object.getPrototypeOf(obj);\n  var depth = 0;\n  while (proto.constructor.name !== klass.name) {\n    proto = Object.getPrototypeOf(proto);\n    assert.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + ' must be a ' + klass.name + ' instance');\n  }\n  assert.strictEqual(proto.constructor.name, klass.name, name + ' must be a ' + klass.name + ' instance');\n  var ver = proto._sshpkApiVersion;\n  if (ver === undefined) ver = klass._oldVersionDetect(obj);\n  assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1], name + ' must be compatible with ' + klass.name + ' klass ' + 'version ' + needVer[0] + '.' + needVer[1]);\n}\nvar CIPHER_LEN = {\n  'des-ede3-cbc': {\n    key: 24,\n    iv: 8\n  },\n  'aes-128-cbc': {\n    key: 16,\n    iv: 16\n  },\n  'aes-256-cbc': {\n    key: 32,\n    iv: 16\n  }\n};\nvar PKCS5_SALT_LEN = 8;\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n  assert.buffer(salt, 'salt');\n  assert.buffer(passphrase, 'passphrase');\n  assert.number(count, 'iteration count');\n  var clen = CIPHER_LEN[cipher];\n  assert.object(clen, 'supported cipher');\n  salt = salt.slice(0, PKCS5_SALT_LEN);\n  var D, D_prev, bufs;\n  var material = Buffer.alloc(0);\n  while (material.length < clen.key + clen.iv) {\n    bufs = [];\n    if (D_prev) bufs.push(D_prev);\n    bufs.push(passphrase);\n    bufs.push(salt);\n    D = Buffer.concat(bufs);\n    for (var j = 0; j < count; ++j) D = crypto.createHash('md5').update(D).digest();\n    material = Buffer.concat([material, D]);\n    D_prev = D;\n  }\n  return {\n    key: material.slice(0, clen.key),\n    iv: material.slice(clen.key, clen.key + clen.iv)\n  };\n}\n\n/* See: RFC2898 */\nfunction pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n  var hkey = Buffer.alloc(salt.length + 4);\n  salt.copy(hkey);\n  var gen = 0,\n    ts = [];\n  var i = 1;\n  while (gen < size) {\n    var t = T(i++);\n    gen += t.length;\n    ts.push(t);\n  }\n  return Buffer.concat(ts).slice(0, size);\n  function T(I) {\n    hkey.writeUInt32BE(I, hkey.length - 4);\n    var hmac = crypto.createHmac(hashAlg, passphrase);\n    hmac.update(hkey);\n    var Ti = hmac.digest();\n    var Uc = Ti;\n    var c = 1;\n    while (c++ < iterations) {\n      hmac = crypto.createHmac(hashAlg, passphrase);\n      hmac.update(Uc);\n      Uc = hmac.digest();\n      for (var x = 0; x < Ti.length; ++x) Ti[x] ^= Uc[x];\n    }\n    return Ti;\n  }\n}\n\n/* Count leading zero bits on a buffer */\nfunction countZeros(buf) {\n  var o = 0,\n    obit = 8;\n  while (o < buf.length) {\n    var mask = 1 << obit;\n    if ((buf[o] & mask) === mask) break;\n    obit--;\n    if (obit < 0) {\n      o++;\n      obit = 8;\n    }\n  }\n  return o * 8 + (8 - obit) - 1;\n}\nfunction bufferSplit(buf, chr) {\n  assert.buffer(buf);\n  assert.string(chr);\n  var parts = [];\n  var lastPart = 0;\n  var matches = 0;\n  for (var i = 0; i < buf.length; ++i) {\n    if (buf[i] === chr.charCodeAt(matches)) ++matches;else if (buf[i] === chr.charCodeAt(0)) matches = 1;else matches = 0;\n    if (matches >= chr.length) {\n      var newPart = i + 1;\n      parts.push(buf.slice(lastPart, newPart - matches));\n      lastPart = newPart;\n      matches = 0;\n    }\n  }\n  if (lastPart <= buf.length) parts.push(buf.slice(lastPart, buf.length));\n  return parts;\n}\nfunction ecNormalize(buf, addZero) {\n  assert.buffer(buf);\n  if (buf[0] === 0x00 && buf[1] === 0x04) {\n    if (addZero) return buf;\n    return buf.slice(1);\n  } else if (buf[0] === 0x04) {\n    if (!addZero) return buf;\n  } else {\n    while (buf[0] === 0x00) buf = buf.slice(1);\n    if (buf[0] === 0x02 || buf[0] === 0x03) throw new Error('Compressed elliptic curve points ' + 'are not supported');\n    if (buf[0] !== 0x04) throw new Error('Not a valid elliptic curve point');\n    if (!addZero) return buf;\n  }\n  var b = Buffer.alloc(buf.length + 1);\n  b[0] = 0x0;\n  buf.copy(b, 1);\n  return b;\n}\nfunction readBitString(der, tag) {\n  if (tag === undefined) tag = asn1.Ber.BitString;\n  var buf = der.readString(tag, true);\n  assert.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' + 'not supported (0x' + buf[0].toString(16) + ')');\n  return buf.slice(1);\n}\nfunction writeBitString(der, buf, tag) {\n  if (tag === undefined) tag = asn1.Ber.BitString;\n  var b = Buffer.alloc(buf.length + 1);\n  b[0] = 0x00;\n  buf.copy(b, 1);\n  der.writeBuffer(b, tag);\n}\nfunction mpNormalize(buf) {\n  assert.buffer(buf);\n  while (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00) buf = buf.slice(1);\n  if ((buf[0] & 0x80) === 0x80) {\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x00;\n    buf.copy(b, 1);\n    buf = b;\n  }\n  return buf;\n}\nfunction mpDenormalize(buf) {\n  assert.buffer(buf);\n  while (buf.length > 1 && buf[0] === 0x00) buf = buf.slice(1);\n  return buf;\n}\nfunction zeroPadToLength(buf, len) {\n  assert.buffer(buf);\n  assert.number(len);\n  while (buf.length > len) {\n    assert.equal(buf[0], 0x00);\n    buf = buf.slice(1);\n  }\n  while (buf.length < len) {\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x00;\n    buf.copy(b, 1);\n    buf = b;\n  }\n  return buf;\n}\nfunction bigintToMpBuf(bigint) {\n  var buf = Buffer.from(bigint.toByteArray());\n  buf = mpNormalize(buf);\n  return buf;\n}\nfunction calculateDSAPublic(g, p, x) {\n  assert.buffer(g);\n  assert.buffer(p);\n  assert.buffer(x);\n  g = new jsbn(g);\n  p = new jsbn(p);\n  x = new jsbn(x);\n  var y = g.modPow(x, p);\n  var ybuf = bigintToMpBuf(y);\n  return ybuf;\n}\nfunction calculateED25519Public(k) {\n  assert.buffer(k);\n  var kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n  return Buffer.from(kp.publicKey);\n}\nfunction calculateX25519Public(k) {\n  assert.buffer(k);\n  var kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n  return Buffer.from(kp.publicKey);\n}\nfunction addRSAMissing(key) {\n  assert.object(key);\n  assertCompatible(key, PrivateKey, [1, 1]);\n  var d = new jsbn(key.part.d.data);\n  var buf;\n  if (!key.part.dmodp) {\n    var p = new jsbn(key.part.p.data);\n    var dmodp = d.mod(p.subtract(1));\n    buf = bigintToMpBuf(dmodp);\n    key.part.dmodp = {\n      name: 'dmodp',\n      data: buf\n    };\n    key.parts.push(key.part.dmodp);\n  }\n  if (!key.part.dmodq) {\n    var q = new jsbn(key.part.q.data);\n    var dmodq = d.mod(q.subtract(1));\n    buf = bigintToMpBuf(dmodq);\n    key.part.dmodq = {\n      name: 'dmodq',\n      data: buf\n    };\n    key.parts.push(key.part.dmodq);\n  }\n}\nfunction publicFromPrivateECDSA(curveName, priv) {\n  assert.string(curveName, 'curveName');\n  assert.buffer(priv);\n  var params = algs.curves[curveName];\n  var p = new jsbn(params.p);\n  var a = new jsbn(params.a);\n  var b = new jsbn(params.b);\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(params.G.toString('hex'));\n  var d = new jsbn(mpNormalize(priv));\n  var pub = G.multiply(d);\n  pub = Buffer.from(curve.encodePointHex(pub), 'hex');\n  var parts = [];\n  parts.push({\n    name: 'curve',\n    data: Buffer.from(curveName)\n  });\n  parts.push({\n    name: 'Q',\n    data: pub\n  });\n  var key = new Key({\n    type: 'ecdsa',\n    curve: curve,\n    parts: parts\n  });\n  return key;\n}\nfunction opensshCipherInfo(cipher) {\n  var inf = {};\n  switch (cipher) {\n    case '3des-cbc':\n      inf.keySize = 24;\n      inf.blockSize = 8;\n      inf.opensslName = 'des-ede3-cbc';\n      break;\n    case 'blowfish-cbc':\n      inf.keySize = 16;\n      inf.blockSize = 8;\n      inf.opensslName = 'bf-cbc';\n      break;\n    case 'aes128-cbc':\n    case 'aes128-ctr':\n    case 'aes128-gcm@openssh.com':\n      inf.keySize = 16;\n      inf.blockSize = 16;\n      inf.opensslName = 'aes-128-' + cipher.slice(7, 10);\n      break;\n    case 'aes192-cbc':\n    case 'aes192-ctr':\n    case 'aes192-gcm@openssh.com':\n      inf.keySize = 24;\n      inf.blockSize = 16;\n      inf.opensslName = 'aes-192-' + cipher.slice(7, 10);\n      break;\n    case 'aes256-cbc':\n    case 'aes256-ctr':\n    case 'aes256-gcm@openssh.com':\n      inf.keySize = 32;\n      inf.blockSize = 16;\n      inf.opensslName = 'aes-256-' + cipher.slice(7, 10);\n      break;\n    default:\n      throw new Error('Unsupported openssl cipher \"' + cipher + '\"');\n  }\n  return inf;\n}","map":{"version":3,"names":["module","exports","bufferSplit","addRSAMissing","calculateDSAPublic","calculateED25519Public","calculateX25519Public","mpNormalize","mpDenormalize","ecNormalize","countZeros","assertCompatible","isCompatible","opensslKeyDeriv","opensshCipherInfo","publicFromPrivateECDSA","zeroPadToLength","writeBitString","readBitString","pbkdf2","assert","require","Buffer","PrivateKey","Key","crypto","algs","asn1","ec","jsbn","BigInteger","nacl","MAX_CLASS_DEPTH","obj","klass","needVer","undefined","prototype","_sshpkApiVersion","proto","Object","getPrototypeOf","depth","constructor","name","ver","_oldVersionDetect","ok","object","strictEqual","CIPHER_LEN","key","iv","PKCS5_SALT_LEN","cipher","salt","passphrase","count","buffer","number","clen","slice","D","D_prev","bufs","material","alloc","length","push","concat","j","createHash","update","digest","hashAlg","iterations","size","hkey","copy","gen","ts","i","t","T","I","writeUInt32BE","hmac","createHmac","Ti","Uc","c","x","buf","o","obit","mask","chr","string","parts","lastPart","matches","charCodeAt","newPart","addZero","Error","b","der","tag","Ber","BitString","readString","toString","writeBuffer","len","equal","bigintToMpBuf","bigint","from","toByteArray","g","p","y","modPow","ybuf","k","kp","sign","keyPair","fromSeed","Uint8Array","publicKey","box","d","part","data","dmodp","mod","subtract","dmodq","q","curveName","priv","params","curves","a","curve","ECCurveFp","G","decodePointHex","pub","multiply","encodePointHex","type","inf","keySize","blockSize","opensslName"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/utils.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tbufferSplit: bufferSplit,\n\taddRSAMissing: addRSAMissing,\n\tcalculateDSAPublic: calculateDSAPublic,\n\tcalculateED25519Public: calculateED25519Public,\n\tcalculateX25519Public: calculateX25519Public,\n\tmpNormalize: mpNormalize,\n\tmpDenormalize: mpDenormalize,\n\tecNormalize: ecNormalize,\n\tcountZeros: countZeros,\n\tassertCompatible: assertCompatible,\n\tisCompatible: isCompatible,\n\topensslKeyDeriv: opensslKeyDeriv,\n\topensshCipherInfo: opensshCipherInfo,\n\tpublicFromPrivateECDSA: publicFromPrivateECDSA,\n\tzeroPadToLength: zeroPadToLength,\n\twriteBitString: writeBitString,\n\treadBitString: readBitString,\n\tpbkdf2: pbkdf2\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar PrivateKey = require('./private-key');\nvar Key = require('./key');\nvar crypto = require('crypto');\nvar algs = require('./algs');\nvar asn1 = require('asn1');\n\nvar ec = require('ecc-jsbn/lib/ec');\nvar jsbn = require('jsbn').BigInteger;\nvar nacl = require('tweetnacl');\n\nvar MAX_CLASS_DEPTH = 3;\n\nfunction isCompatible(obj, klass, needVer) {\n\tif (obj === null || typeof (obj) !== 'object')\n\t\treturn (false);\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn (true);\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tif (!proto || ++depth > MAX_CLASS_DEPTH)\n\t\t\treturn (false);\n\t}\n\tif (proto.constructor.name !== klass.name)\n\t\treturn (false);\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tif (ver[0] != needVer[0] || ver[1] < needVer[1])\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction assertCompatible(obj, klass, needVer, name) {\n\tif (name === undefined)\n\t\tname = 'object';\n\tassert.ok(obj, name + ' must not be null');\n\tassert.object(obj, name + ' must be an object');\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn;\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tassert.ok(proto && ++depth <= MAX_CLASS_DEPTH,\n\t\t    name + ' must be a ' + klass.name + ' instance');\n\t}\n\tassert.strictEqual(proto.constructor.name, klass.name,\n\t    name + ' must be a ' + klass.name + ' instance');\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tassert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],\n\t    name + ' must be compatible with ' + klass.name + ' klass ' +\n\t    'version ' + needVer[0] + '.' + needVer[1]);\n}\n\nvar CIPHER_LEN = {\n\t'des-ede3-cbc': { key: 24, iv: 8 },\n\t'aes-128-cbc': { key: 16, iv: 16 },\n\t'aes-256-cbc': { key: 32, iv: 16 }\n};\nvar PKCS5_SALT_LEN = 8;\n\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n\tassert.buffer(salt, 'salt');\n\tassert.buffer(passphrase, 'passphrase');\n\tassert.number(count, 'iteration count');\n\n\tvar clen = CIPHER_LEN[cipher];\n\tassert.object(clen, 'supported cipher');\n\n\tsalt = salt.slice(0, PKCS5_SALT_LEN);\n\n\tvar D, D_prev, bufs;\n\tvar material = Buffer.alloc(0);\n\twhile (material.length < clen.key + clen.iv) {\n\t\tbufs = [];\n\t\tif (D_prev)\n\t\t\tbufs.push(D_prev);\n\t\tbufs.push(passphrase);\n\t\tbufs.push(salt);\n\t\tD = Buffer.concat(bufs);\n\t\tfor (var j = 0; j < count; ++j)\n\t\t\tD = crypto.createHash('md5').update(D).digest();\n\t\tmaterial = Buffer.concat([material, D]);\n\t\tD_prev = D;\n\t}\n\n\treturn ({\n\t    key: material.slice(0, clen.key),\n\t    iv: material.slice(clen.key, clen.key + clen.iv)\n\t});\n}\n\n/* See: RFC2898 */\nfunction pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n\tvar hkey = Buffer.alloc(salt.length + 4);\n\tsalt.copy(hkey);\n\n\tvar gen = 0, ts = [];\n\tvar i = 1;\n\twhile (gen < size) {\n\t\tvar t = T(i++);\n\t\tgen += t.length;\n\t\tts.push(t);\n\t}\n\treturn (Buffer.concat(ts).slice(0, size));\n\n\tfunction T(I) {\n\t\thkey.writeUInt32BE(I, hkey.length - 4);\n\n\t\tvar hmac = crypto.createHmac(hashAlg, passphrase);\n\t\thmac.update(hkey);\n\n\t\tvar Ti = hmac.digest();\n\t\tvar Uc = Ti;\n\t\tvar c = 1;\n\t\twhile (c++ < iterations) {\n\t\t\thmac = crypto.createHmac(hashAlg, passphrase);\n\t\t\thmac.update(Uc);\n\t\t\tUc = hmac.digest();\n\t\t\tfor (var x = 0; x < Ti.length; ++x)\n\t\t\t\tTi[x] ^= Uc[x];\n\t\t}\n\t\treturn (Ti);\n\t}\n}\n\n/* Count leading zero bits on a buffer */\nfunction countZeros(buf) {\n\tvar o = 0, obit = 8;\n\twhile (o < buf.length) {\n\t\tvar mask = (1 << obit);\n\t\tif ((buf[o] & mask) === mask)\n\t\t\tbreak;\n\t\tobit--;\n\t\tif (obit < 0) {\n\t\t\to++;\n\t\t\tobit = 8;\n\t\t}\n\t}\n\treturn (o*8 + (8 - obit) - 1);\n}\n\nfunction bufferSplit(buf, chr) {\n\tassert.buffer(buf);\n\tassert.string(chr);\n\n\tvar parts = [];\n\tvar lastPart = 0;\n\tvar matches = 0;\n\tfor (var i = 0; i < buf.length; ++i) {\n\t\tif (buf[i] === chr.charCodeAt(matches))\n\t\t\t++matches;\n\t\telse if (buf[i] === chr.charCodeAt(0))\n\t\t\tmatches = 1;\n\t\telse\n\t\t\tmatches = 0;\n\n\t\tif (matches >= chr.length) {\n\t\t\tvar newPart = i + 1;\n\t\t\tparts.push(buf.slice(lastPart, newPart - matches));\n\t\t\tlastPart = newPart;\n\t\t\tmatches = 0;\n\t\t}\n\t}\n\tif (lastPart <= buf.length)\n\t\tparts.push(buf.slice(lastPart, buf.length));\n\n\treturn (parts);\n}\n\nfunction ecNormalize(buf, addZero) {\n\tassert.buffer(buf);\n\tif (buf[0] === 0x00 && buf[1] === 0x04) {\n\t\tif (addZero)\n\t\t\treturn (buf);\n\t\treturn (buf.slice(1));\n\t} else if (buf[0] === 0x04) {\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t} else {\n\t\twhile (buf[0] === 0x00)\n\t\t\tbuf = buf.slice(1);\n\t\tif (buf[0] === 0x02 || buf[0] === 0x03)\n\t\t\tthrow (new Error('Compressed elliptic curve points ' +\n\t\t\t    'are not supported'));\n\t\tif (buf[0] !== 0x04)\n\t\t\tthrow (new Error('Not a valid elliptic curve point'));\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t}\n\tvar b = Buffer.alloc(buf.length + 1);\n\tb[0] = 0x0;\n\tbuf.copy(b, 1);\n\treturn (b);\n}\n\nfunction readBitString(der, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar buf = der.readString(tag, true);\n\tassert.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' +\n\t    'not supported (0x' + buf[0].toString(16) + ')');\n\treturn (buf.slice(1));\n}\n\nfunction writeBitString(der, buf, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar b = Buffer.alloc(buf.length + 1);\n\tb[0] = 0x00;\n\tbuf.copy(b, 1);\n\tder.writeBuffer(b, tag);\n}\n\nfunction mpNormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)\n\t\tbuf = buf.slice(1);\n\tif ((buf[0] & 0x80) === 0x80) {\n\t\tvar b = Buffer.alloc(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction mpDenormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00)\n\t\tbuf = buf.slice(1);\n\treturn (buf);\n}\n\nfunction zeroPadToLength(buf, len) {\n\tassert.buffer(buf);\n\tassert.number(len);\n\twhile (buf.length > len) {\n\t\tassert.equal(buf[0], 0x00);\n\t\tbuf = buf.slice(1);\n\t}\n\twhile (buf.length < len) {\n\t\tvar b = Buffer.alloc(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction bigintToMpBuf(bigint) {\n\tvar buf = Buffer.from(bigint.toByteArray());\n\tbuf = mpNormalize(buf);\n\treturn (buf);\n}\n\nfunction calculateDSAPublic(g, p, x) {\n\tassert.buffer(g);\n\tassert.buffer(p);\n\tassert.buffer(x);\n\tg = new jsbn(g);\n\tp = new jsbn(p);\n\tx = new jsbn(x);\n\tvar y = g.modPow(x, p);\n\tvar ybuf = bigintToMpBuf(y);\n\treturn (ybuf);\n}\n\nfunction calculateED25519Public(k) {\n\tassert.buffer(k);\n\n\tvar kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n\treturn (Buffer.from(kp.publicKey));\n}\n\nfunction calculateX25519Public(k) {\n\tassert.buffer(k);\n\n\tvar kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n\treturn (Buffer.from(kp.publicKey));\n}\n\nfunction addRSAMissing(key) {\n\tassert.object(key);\n\tassertCompatible(key, PrivateKey, [1, 1]);\n\n\tvar d = new jsbn(key.part.d.data);\n\tvar buf;\n\n\tif (!key.part.dmodp) {\n\t\tvar p = new jsbn(key.part.p.data);\n\t\tvar dmodp = d.mod(p.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodp);\n\t\tkey.part.dmodp = {name: 'dmodp', data: buf};\n\t\tkey.parts.push(key.part.dmodp);\n\t}\n\tif (!key.part.dmodq) {\n\t\tvar q = new jsbn(key.part.q.data);\n\t\tvar dmodq = d.mod(q.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodq);\n\t\tkey.part.dmodq = {name: 'dmodq', data: buf};\n\t\tkey.parts.push(key.part.dmodq);\n\t}\n}\n\nfunction publicFromPrivateECDSA(curveName, priv) {\n\tassert.string(curveName, 'curveName');\n\tassert.buffer(priv);\n\tvar params = algs.curves[curveName];\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tvar d = new jsbn(mpNormalize(priv));\n\tvar pub = G.multiply(d);\n\tpub = Buffer.from(curve.encodePointHex(pub), 'hex');\n\n\tvar parts = [];\n\tparts.push({name: 'curve', data: Buffer.from(curveName)});\n\tparts.push({name: 'Q', data: pub});\n\n\tvar key = new Key({type: 'ecdsa', curve: curve, parts: parts});\n\treturn (key);\n}\n\nfunction opensshCipherInfo(cipher) {\n\tvar inf = {};\n\tswitch (cipher) {\n\tcase '3des-cbc':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'des-ede3-cbc';\n\t\tbreak;\n\tcase 'blowfish-cbc':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'bf-cbc';\n\t\tbreak;\n\tcase 'aes128-cbc':\n\tcase 'aes128-ctr':\n\tcase 'aes128-gcm@openssh.com':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-128-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes192-cbc':\n\tcase 'aes192-ctr':\n\tcase 'aes192-gcm@openssh.com':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-192-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes256-cbc':\n\tcase 'aes256-ctr':\n\tcase 'aes256-gcm@openssh.com':\n\t\tinf.keySize = 32;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-256-' + cipher.slice(7, 10);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'Unsupported openssl cipher \"' + cipher + '\"'));\n\t}\n\treturn (inf);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}