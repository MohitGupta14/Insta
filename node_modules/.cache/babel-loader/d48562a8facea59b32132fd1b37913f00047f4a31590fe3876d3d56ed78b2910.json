{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n  read: read,\n  write: write\n};\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar sshpriv = require('./ssh-private');\n\n/*JSSTYLED*/\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\nfunction read(buf, options) {\n  if (typeof buf !== 'string') {\n    assert.buffer(buf, 'buf');\n    buf = buf.toString('ascii');\n  }\n  var trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n  var m = trimmed.match(SSHKEY_RE);\n  if (!m) m = trimmed.match(SSHKEY_RE2);\n  assert.ok(m, 'key must match regex');\n  var type = rfc4253.algToKeyType(m[1]);\n  var kbuf = Buffer.from(m[2], 'base64');\n\n  /*\n   * This is a bit tricky. If we managed to parse the key and locate the\n   * key comment with the regex, then do a non-partial read and assert\n   * that we have consumed all bytes. If we couldn't locate the key\n   * comment, though, there may be whitespace shenanigans going on that\n   * have conjoined the comment to the rest of the key. We do a partial\n   * read in this case to try to make the best out of a sorry situation.\n   */\n  var key;\n  var ret = {};\n  if (m[4]) {\n    try {\n      key = rfc4253.read(kbuf);\n    } catch (e) {\n      m = trimmed.match(SSHKEY_RE2);\n      assert.ok(m, 'key must match regex');\n      kbuf = Buffer.from(m[2], 'base64');\n      key = rfc4253.readInternal(ret, 'public', kbuf);\n    }\n  } else {\n    key = rfc4253.readInternal(ret, 'public', kbuf);\n  }\n  assert.strictEqual(type, key.type);\n  if (m[4] && m[4].length > 0) {\n    key.comment = m[4];\n  } else if (ret.consumed) {\n    /*\n     * Now the magic: trying to recover the key comment when it's\n     * gotten conjoined to the key or otherwise shenanigan'd.\n     *\n     * Work out how much base64 we used, then drop all non-base64\n     * chars from the beginning up to this point in the the string.\n     * Then offset in this and try to make up for missing = chars.\n     */\n    var data = m[2] + (m[3] ? m[3] : '');\n    var realOffset = Math.ceil(ret.consumed / 3) * 4;\n    data = data.slice(0, realOffset - 2). /*JSSTYLED*/\n    replace(/[^a-zA-Z0-9+\\/=]/g, '') + data.slice(realOffset - 2);\n    var padding = ret.consumed % 3;\n    if (padding > 0 && data.slice(realOffset - 1, realOffset) !== '=') realOffset--;\n    while (data.slice(realOffset, realOffset + 1) === '=') realOffset++;\n\n    /* Finally, grab what we think is the comment & clean it up. */\n    var trailer = data.slice(realOffset);\n    trailer = trailer.replace(/[\\r\\n]/g, ' ').replace(/^\\s+/, '');\n    if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;\n  }\n  return key;\n}\nfunction write(key, options) {\n  assert.object(key);\n  if (!Key.isKey(key)) throw new Error('Must be a public key');\n  var parts = [];\n  var alg = rfc4253.keyTypeToAlg(key);\n  parts.push(alg);\n  var buf = rfc4253.write(key);\n  parts.push(buf.toString('base64'));\n  if (key.comment) parts.push(key.comment);\n  return Buffer.from(parts.join(' '));\n}","map":{"version":3,"names":["module","exports","read","write","assert","require","Buffer","rfc4253","utils","Key","PrivateKey","sshpriv","SSHKEY_RE","SSHKEY_RE2","buf","options","buffer","toString","trimmed","trim","replace","m","match","ok","type","algToKeyType","kbuf","from","key","ret","e","readInternal","strictEqual","length","comment","consumed","data","realOffset","Math","ceil","slice","padding","trailer","object","isKey","Error","parts","alg","keyTypeToAlg","push","join"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/formats/ssh.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar sshpriv = require('./ssh-private');\n\n/*JSSTYLED*/\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n\tvar m = trimmed.match(SSHKEY_RE);\n\tif (!m)\n\t\tm = trimmed.match(SSHKEY_RE2);\n\tassert.ok(m, 'key must match regex');\n\n\tvar type = rfc4253.algToKeyType(m[1]);\n\tvar kbuf = Buffer.from(m[2], 'base64');\n\n\t/*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */\n\tvar key;\n\tvar ret = {};\n\tif (m[4]) {\n\t\ttry {\n\t\t\tkey = rfc4253.read(kbuf);\n\n\t\t} catch (e) {\n\t\t\tm = trimmed.match(SSHKEY_RE2);\n\t\t\tassert.ok(m, 'key must match regex');\n\t\t\tkbuf = Buffer.from(m[2], 'base64');\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t\t}\n\t} else {\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t}\n\n\tassert.strictEqual(type, key.type);\n\n\tif (m[4] && m[4].length > 0) {\n\t\tkey.comment = m[4];\n\n\t} else if (ret.consumed) {\n\t\t/*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */\n\t\tvar data = m[2] + (m[3] ? m[3] : '');\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\n\t\t    data.slice(realOffset - 2);\n\n\t\tvar padding = ret.consumed % 3;\n\t\tif (padding > 0 &&\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\n\t\t\trealOffset--;\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\n\t\t\trealOffset++;\n\n\t\t/* Finally, grab what we think is the comment & clean it up. */\n\t\tvar trailer = data.slice(realOffset);\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\n\t\t    replace(/^\\s+/, '');\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\n\t\t\tkey.comment = trailer;\n\t}\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar parts = [];\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tparts.push(alg);\n\n\tvar buf = rfc4253.write(key);\n\tparts.push(buf.toString('base64'));\n\n\tif (key.comment)\n\t\tparts.push(key.comment);\n\n\treturn (Buffer.from(parts.join(' ')));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}