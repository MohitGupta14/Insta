{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n  read: read,\n  readPkcs1: readPkcs1,\n  write: write,\n  writePkcs1: writePkcs1\n};\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar pkcs8 = require('./pkcs8');\nvar readECDSACurve = pkcs8.readECDSACurve;\nfunction read(buf, options) {\n  return pem.read(buf, options, 'pkcs1');\n}\nfunction write(key, options) {\n  return pem.write(key, options, 'pkcs1');\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n  assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');\n  return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs1(alg, type, der) {\n  switch (alg) {\n    case 'RSA':\n      if (type === 'public') return readPkcs1RSAPublic(der);else if (type === 'private') return readPkcs1RSAPrivate(der);\n      throw new Error('Unknown key type: ' + type);\n    case 'DSA':\n      if (type === 'public') return readPkcs1DSAPublic(der);else if (type === 'private') return readPkcs1DSAPrivate(der);\n      throw new Error('Unknown key type: ' + type);\n    case 'EC':\n    case 'ECDSA':\n      if (type === 'private') return readPkcs1ECDSAPrivate(der);else if (type === 'public') return readPkcs1ECDSAPublic(der);\n      throw new Error('Unknown key type: ' + type);\n    case 'EDDSA':\n    case 'EdDSA':\n      if (type === 'private') return readPkcs1EdDSAPrivate(der);\n      throw new Error(type + ' keys not supported with EdDSA');\n    default:\n      throw new Error('Unknown key algo: ' + alg);\n  }\n}\nfunction readPkcs1RSAPublic(der) {\n  // modulus and exponent\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'exponent');\n\n  // now, make the key\n  var key = {\n    type: 'rsa',\n    parts: [{\n      name: 'e',\n      data: e\n    }, {\n      name: 'n',\n      data: n\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs1RSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version[0], 0);\n\n  // modulus then public exponent\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'public exponent');\n  var d = readMPInt(der, 'private exponent');\n  var p = readMPInt(der, 'prime1');\n  var q = readMPInt(der, 'prime2');\n  var dmodp = readMPInt(der, 'exponent1');\n  var dmodq = readMPInt(der, 'exponent2');\n  var iqmp = readMPInt(der, 'iqmp');\n\n  // now, make the key\n  var key = {\n    type: 'rsa',\n    parts: [{\n      name: 'n',\n      data: n\n    }, {\n      name: 'e',\n      data: e\n    }, {\n      name: 'd',\n      data: d\n    }, {\n      name: 'iqmp',\n      data: iqmp\n    }, {\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'dmodp',\n      data: dmodp\n    }, {\n      name: 'dmodq',\n      data: dmodq\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction readPkcs1DSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version.readUInt8(0), 0);\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g');\n  var y = readMPInt(der, 'y');\n  var x = readMPInt(der, 'x');\n\n  // now, make the key\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }, {\n      name: 'y',\n      data: y\n    }, {\n      name: 'x',\n      data: x\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction readPkcs1EdDSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version.readUInt8(0), 1);\n\n  // private key\n  var k = der.readString(asn1.Ber.OctetString, true);\n  der.readSequence(0xa0);\n  var oid = der.readOID();\n  assert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');\n  der.readSequence(0xa1);\n  var A = utils.readBitString(der);\n  var key = {\n    type: 'ed25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }, {\n      name: 'k',\n      data: k\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction readPkcs1DSAPublic(der) {\n  var y = readMPInt(der, 'y');\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g');\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'y',\n      data: y\n    }, {\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs1ECDSAPublic(der) {\n  der.readSequence();\n  var oid = der.readOID();\n  assert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n  var curveOid = der.readOID();\n  var curve;\n  var curves = Object.keys(algs.curves);\n  for (var j = 0; j < curves.length; ++j) {\n    var c = curves[j];\n    var cd = algs.curves[c];\n    if (cd.pkcs8oid === curveOid) {\n      curve = c;\n      break;\n    }\n  }\n  assert.string(curve, 'a known ECDSA named curve');\n  var Q = der.readString(asn1.Ber.BitString, true);\n  Q = utils.ecNormalize(Q);\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curve)\n    }, {\n      name: 'Q',\n      data: Q\n    }]\n  };\n  return new Key(key);\n}\nfunction readPkcs1ECDSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version.readUInt8(0), 1);\n\n  // private key\n  var d = der.readString(asn1.Ber.OctetString, true);\n  der.readSequence(0xa0);\n  var curve = readECDSACurve(der);\n  assert.string(curve, 'a known elliptic curve');\n  der.readSequence(0xa1);\n  var Q = der.readString(asn1.Ber.BitString, true);\n  Q = utils.ecNormalize(Q);\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curve)\n    }, {\n      name: 'Q',\n      data: Q\n    }, {\n      name: 'd',\n      data: d\n    }]\n  };\n  return new PrivateKey(key);\n}\nfunction writePkcs1(der, key) {\n  der.startSequence();\n  switch (key.type) {\n    case 'rsa':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);else writePkcs1RSAPublic(der, key);\n      break;\n    case 'dsa':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);else writePkcs1DSAPublic(der, key);\n      break;\n    case 'ecdsa':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);else writePkcs1ECDSAPublic(der, key);\n      break;\n    case 'ed25519':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1EdDSAPrivate(der, key);else writePkcs1EdDSAPublic(der, key);\n      break;\n    default:\n      throw new Error('Unknown key algo: ' + key.type);\n  }\n  der.endSequence();\n}\nfunction writePkcs1RSAPublic(der, key) {\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\nfunction writePkcs1RSAPrivate(der, key) {\n  var ver = Buffer.from([0]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n  der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPrivate(der, key) {\n  var ver = Buffer.from([0]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPublic(der, key) {\n  der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\nfunction writePkcs1ECDSAPublic(der, key) {\n  der.startSequence();\n  der.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n  var curve = key.part.curve.data.toString();\n  var curveOid = algs.curves[curve].pkcs8oid;\n  assert.string(curveOid, 'a known ECDSA named curve');\n  der.writeOID(curveOid);\n  der.endSequence();\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs1ECDSAPrivate(der, key) {\n  var ver = Buffer.from([1]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n  der.startSequence(0xa0);\n  var curve = key.part.curve.data.toString();\n  var curveOid = algs.curves[curve].pkcs8oid;\n  assert.string(curveOid, 'a known ECDSA named curve');\n  der.writeOID(curveOid);\n  der.endSequence();\n  der.startSequence(0xa1);\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n  der.endSequence();\n}\nfunction writePkcs1EdDSAPrivate(der, key) {\n  var ver = Buffer.from([1]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n  der.startSequence(0xa0);\n  der.writeOID('1.3.101.112');\n  der.endSequence();\n  der.startSequence(0xa1);\n  utils.writeBitString(der, key.part.A.data);\n  der.endSequence();\n}\nfunction writePkcs1EdDSAPublic(der, key) {\n  throw new Error('Public keys are not supported for EdDSA PKCS#1');\n}","map":{"version":3,"names":["module","exports","read","readPkcs1","write","writePkcs1","assert","require","asn1","Buffer","algs","utils","Key","PrivateKey","pem","pkcs8","readECDSACurve","buf","options","key","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","alg","type","readPkcs1RSAPublic","readPkcs1RSAPrivate","Error","readPkcs1DSAPublic","readPkcs1DSAPrivate","readPkcs1ECDSAPrivate","readPkcs1ECDSAPublic","readPkcs1EdDSAPrivate","n","e","parts","name","data","version","d","p","q","dmodp","dmodq","iqmp","readUInt8","g","y","x","k","OctetString","readSequence","oid","readOID","A","readBitString","zeroPadToLength","curveOid","curve","curves","Object","keys","j","length","c","cd","pkcs8oid","string","Q","BitString","ecNormalize","from","startSequence","isPrivateKey","writePkcs1RSAPrivate","writePkcs1RSAPublic","writePkcs1DSAPrivate","writePkcs1DSAPublic","writePkcs1ECDSAPrivate","writePkcs1ECDSAPublic","writePkcs1EdDSAPrivate","writePkcs1EdDSAPublic","endSequence","writeBuffer","part","ver","addRSAMissing","writeOID","toString","writeBitString"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/formats/pkcs1.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs1: readPkcs1,\n\twrite: write,\n\twritePkcs1: writePkcs1\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nvar pkcs8 = require('./pkcs8');\nvar readECDSACurve = pkcs8.readECDSACurve;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs1'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs1'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs1(alg, type, der) {\n\tswitch (alg) {\n\tcase 'RSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1RSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1RSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'DSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1DSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1DSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EC':\n\tcase 'ECDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1ECDSAPrivate(der));\n\t\telse if (type === 'public')\n\t\t\treturn (readPkcs1ECDSAPublic(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EDDSA':\n\tcase 'EdDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1EdDSAPrivate(der));\n\t\tthrow (new Error(type + ' keys not supported with EdDSA'));\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + alg));\n\t}\n}\n\nfunction readPkcs1RSAPublic(der) {\n\t// modulus and exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1RSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version[0], 0);\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 0);\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\tvar y = readMPInt(der, 'y');\n\tvar x = readMPInt(der, 'x');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1EdDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');\n\n\tder.readSequence(0xa1);\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: k }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPublic(der) {\n\tvar y = readMPInt(der, 'y');\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPublic(der) {\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n\n\tvar curveOid = der.readOID();\n\n\tvar curve;\n\tvar curves = Object.keys(algs.curves);\n\tfor (var j = 0; j < curves.length; ++j) {\n\t\tvar c = curves[j];\n\t\tvar cd = algs.curves[c];\n\t\tif (cd.pkcs8oid === curveOid) {\n\t\t\tcurve = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tassert.string(curve, 'a known ECDSA named curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curve) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar curve = readECDSACurve(der);\n\tassert.string(curve, 'a known elliptic curve');\n\n\tder.readSequence(0xa1);\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curve) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction writePkcs1(der, key) {\n\tder.startSequence();\n\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1RSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1RSAPublic(der, key);\n\t\tbreak;\n\tcase 'dsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1DSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1DSAPublic(der, key);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1ECDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1ECDSAPublic(der, key);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1EdDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1EdDSAPublic(der, key);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs1RSAPublic(der, key) {\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1RSAPrivate(der, key) {\n\tvar ver = Buffer.from([0]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPrivate(der, key) {\n\tvar ver = Buffer.from([0]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPublic(der, key) {\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1ECDSAPublic(der, key) {\n\tder.startSequence();\n\n\tder.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs1ECDSAPrivate(der, key) {\n\tvar ver = Buffer.from([1]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPrivate(der, key) {\n\tvar ver = Buffer.from([1]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tder.writeOID('1.3.101.112');\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tutils.writeBitString(der, key.part.A.data);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPublic(der, key) {\n\tthrow (new Error('Public keys are not supported for EdDSA PKCS#1'));\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAO,GAAG;EAChBC,IAAI,EAAEA,IAAI;EACVC,SAAS,EAAEA,SAAS;EACpBC,KAAK,EAAEA,KAAK;EACZC,UAAU,EAAEA;AACb,CAAC;AAED,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIE,MAAM,GAAGF,OAAO,CAAC,cAAc,CAAC,CAACE,MAAM;AAC3C,IAAIC,IAAI,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC7B,IAAII,KAAK,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAE/B,IAAIK,GAAG,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAC3B,IAAIM,UAAU,GAAGN,OAAO,CAAC,gBAAgB,CAAC;AAC1C,IAAIO,GAAG,GAAGP,OAAO,CAAC,OAAO,CAAC;AAE1B,IAAIQ,KAAK,GAAGR,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIS,cAAc,GAAGD,KAAK,CAACC,cAAc;AAEzC,SAASd,IAAIA,CAACe,GAAG,EAAEC,OAAO,EAAE;EAC3B,OAAQJ,GAAG,CAACZ,IAAI,CAACe,GAAG,EAAEC,OAAO,EAAE,OAAO,CAAC;AACxC;AAEA,SAASd,KAAKA,CAACe,GAAG,EAAED,OAAO,EAAE;EAC5B,OAAQJ,GAAG,CAACV,KAAK,CAACe,GAAG,EAAED,OAAO,EAAE,OAAO,CAAC;AACzC;;AAEA;AACA,SAASE,SAASA,CAACC,GAAG,EAAEC,EAAE,EAAE;EAC3BhB,MAAM,CAACiB,WAAW,CAACF,GAAG,CAACG,IAAI,EAAE,EAAEhB,IAAI,CAACiB,GAAG,CAACC,OAAO,EAC3CJ,EAAE,GAAG,oBAAoB,CAAC;EAC9B,OAAQX,KAAK,CAACgB,WAAW,CAACN,GAAG,CAACO,UAAU,CAACpB,IAAI,CAACiB,GAAG,CAACC,OAAO,EAAE,IAAI,CAAC,CAAC;AAClE;AAEA,SAASvB,SAASA,CAAC0B,GAAG,EAAEC,IAAI,EAAET,GAAG,EAAE;EAClC,QAAQQ,GAAG;IACX,KAAK,KAAK;MACT,IAAIC,IAAI,KAAK,QAAQ,EACpB,OAAQC,kBAAkB,CAACV,GAAG,CAAC,CAAE,KAC7B,IAAIS,IAAI,KAAK,SAAS,EAC1B,OAAQE,mBAAmB,CAACX,GAAG,CAAC;MACjC,MAAO,IAAIY,KAAK,CAAC,oBAAoB,GAAGH,IAAI,CAAC;IAC9C,KAAK,KAAK;MACT,IAAIA,IAAI,KAAK,QAAQ,EACpB,OAAQI,kBAAkB,CAACb,GAAG,CAAC,CAAE,KAC7B,IAAIS,IAAI,KAAK,SAAS,EAC1B,OAAQK,mBAAmB,CAACd,GAAG,CAAC;MACjC,MAAO,IAAIY,KAAK,CAAC,oBAAoB,GAAGH,IAAI,CAAC;IAC9C,KAAK,IAAI;IACT,KAAK,OAAO;MACX,IAAIA,IAAI,KAAK,SAAS,EACrB,OAAQM,qBAAqB,CAACf,GAAG,CAAC,CAAE,KAChC,IAAIS,IAAI,KAAK,QAAQ,EACzB,OAAQO,oBAAoB,CAAChB,GAAG,CAAC;MAClC,MAAO,IAAIY,KAAK,CAAC,oBAAoB,GAAGH,IAAI,CAAC;IAC9C,KAAK,OAAO;IACZ,KAAK,OAAO;MACX,IAAIA,IAAI,KAAK,SAAS,EACrB,OAAQQ,qBAAqB,CAACjB,GAAG,CAAC;MACnC,MAAO,IAAIY,KAAK,CAACH,IAAI,GAAG,gCAAgC,CAAC;IAC1D;MACC,MAAO,IAAIG,KAAK,CAAC,oBAAoB,GAAGJ,GAAG,CAAC;EAAE;AAEhD;AAEA,SAASE,kBAAkBA,CAACV,GAAG,EAAE;EAChC;EACA,IAAIkB,CAAC,GAAGnB,SAAS,CAACC,GAAG,EAAE,SAAS,CAAC;EACjC,IAAImB,CAAC,GAAGpB,SAAS,CAACC,GAAG,EAAE,UAAU,CAAC;;EAElC;EACA,IAAIF,GAAG,GAAG;IACTW,IAAI,EAAE,KAAK;IACXW,KAAK,EAAE,CACN;MAAEC,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEH;IAAE,CAAC,EACtB;MAAEE,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEJ;IAAE,CAAC;EAExB,CAAC;EAED,OAAQ,IAAI3B,GAAG,CAACO,GAAG,CAAC;AACrB;AAEA,SAASa,mBAAmBA,CAACX,GAAG,EAAE;EACjC,IAAIuB,OAAO,GAAGxB,SAAS,CAACC,GAAG,EAAE,SAAS,CAAC;EACvCf,MAAM,CAACiB,WAAW,CAACqB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEjC;EACA,IAAIL,CAAC,GAAGnB,SAAS,CAACC,GAAG,EAAE,SAAS,CAAC;EACjC,IAAImB,CAAC,GAAGpB,SAAS,CAACC,GAAG,EAAE,iBAAiB,CAAC;EACzC,IAAIwB,CAAC,GAAGzB,SAAS,CAACC,GAAG,EAAE,kBAAkB,CAAC;EAC1C,IAAIyB,CAAC,GAAG1B,SAAS,CAACC,GAAG,EAAE,QAAQ,CAAC;EAChC,IAAI0B,CAAC,GAAG3B,SAAS,CAACC,GAAG,EAAE,QAAQ,CAAC;EAChC,IAAI2B,KAAK,GAAG5B,SAAS,CAACC,GAAG,EAAE,WAAW,CAAC;EACvC,IAAI4B,KAAK,GAAG7B,SAAS,CAACC,GAAG,EAAE,WAAW,CAAC;EACvC,IAAI6B,IAAI,GAAG9B,SAAS,CAACC,GAAG,EAAE,MAAM,CAAC;;EAEjC;EACA,IAAIF,GAAG,GAAG;IACTW,IAAI,EAAE,KAAK;IACXW,KAAK,EAAE,CACN;MAAEC,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEJ;IAAE,CAAC,EACtB;MAAEG,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEH;IAAE,CAAC,EACtB;MAAEE,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEE;IAAE,CAAC,EACtB;MAAEH,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEO;IAAK,CAAC,EAC5B;MAAER,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEG;IAAE,CAAC,EACtB;MAAEJ,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEI;IAAE,CAAC,EACtB;MAAEL,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAEK;IAAM,CAAC,EAC9B;MAAEN,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAEM;IAAM,CAAC;EAEhC,CAAC;EAED,OAAQ,IAAIpC,UAAU,CAACM,GAAG,CAAC;AAC5B;AAEA,SAASgB,mBAAmBA,CAACd,GAAG,EAAE;EACjC,IAAIuB,OAAO,GAAGxB,SAAS,CAACC,GAAG,EAAE,SAAS,CAAC;EACvCf,MAAM,CAACiB,WAAW,CAACqB,OAAO,CAACO,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAE3C,IAAIL,CAAC,GAAG1B,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAC3B,IAAI0B,CAAC,GAAG3B,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAC3B,IAAI+B,CAAC,GAAGhC,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAC3B,IAAIgC,CAAC,GAAGjC,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAC3B,IAAIiC,CAAC,GAAGlC,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;;EAE3B;EACA,IAAIF,GAAG,GAAG;IACTW,IAAI,EAAE,KAAK;IACXW,KAAK,EAAE,CACN;MAAEC,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEG;IAAE,CAAC,EACtB;MAAEJ,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEI;IAAE,CAAC,EACtB;MAAEL,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAES;IAAE,CAAC,EACtB;MAAEV,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEU;IAAE,CAAC,EACtB;MAAEX,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEW;IAAE,CAAC;EAExB,CAAC;EAED,OAAQ,IAAIzC,UAAU,CAACM,GAAG,CAAC;AAC5B;AAEA,SAASmB,qBAAqBA,CAACjB,GAAG,EAAE;EACnC,IAAIuB,OAAO,GAAGxB,SAAS,CAACC,GAAG,EAAE,SAAS,CAAC;EACvCf,MAAM,CAACiB,WAAW,CAACqB,OAAO,CAACO,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;EAE3C;EACA,IAAII,CAAC,GAAGlC,GAAG,CAACO,UAAU,CAACpB,IAAI,CAACiB,GAAG,CAAC+B,WAAW,EAAE,IAAI,CAAC;EAElDnC,GAAG,CAACoC,YAAY,CAAC,IAAI,CAAC;EACtB,IAAIC,GAAG,GAAGrC,GAAG,CAACsC,OAAO,EAAE;EACvBrD,MAAM,CAACiB,WAAW,CAACmC,GAAG,EAAE,aAAa,EAAE,8BAA8B,CAAC;EAEtErC,GAAG,CAACoC,YAAY,CAAC,IAAI,CAAC;EACtB,IAAIG,CAAC,GAAGjD,KAAK,CAACkD,aAAa,CAACxC,GAAG,CAAC;EAEhC,IAAIF,GAAG,GAAG;IACTW,IAAI,EAAE,SAAS;IACfW,KAAK,EAAE,CACN;MAAEC,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEhC,KAAK,CAACmD,eAAe,CAACF,CAAC,EAAE,EAAE;IAAE,CAAC,EACjD;MAAElB,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEY;IAAE,CAAC;EAExB,CAAC;EAED,OAAQ,IAAI1C,UAAU,CAACM,GAAG,CAAC;AAC5B;AAEA,SAASe,kBAAkBA,CAACb,GAAG,EAAE;EAChC,IAAIgC,CAAC,GAAGjC,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAC3B,IAAIyB,CAAC,GAAG1B,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAC3B,IAAI0B,CAAC,GAAG3B,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAC3B,IAAI+B,CAAC,GAAGhC,SAAS,CAACC,GAAG,EAAE,GAAG,CAAC;EAE3B,IAAIF,GAAG,GAAG;IACTW,IAAI,EAAE,KAAK;IACXW,KAAK,EAAE,CACN;MAAEC,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEU;IAAE,CAAC,EACtB;MAAEX,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEG;IAAE,CAAC,EACtB;MAAEJ,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEI;IAAE,CAAC,EACtB;MAAEL,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAES;IAAE,CAAC;EAExB,CAAC;EAED,OAAQ,IAAIxC,GAAG,CAACO,GAAG,CAAC;AACrB;AAEA,SAASkB,oBAAoBA,CAAChB,GAAG,EAAE;EAClCA,GAAG,CAACoC,YAAY,EAAE;EAElB,IAAIC,GAAG,GAAGrC,GAAG,CAACsC,OAAO,EAAE;EACvBrD,MAAM,CAACiB,WAAW,CAACmC,GAAG,EAAE,mBAAmB,EAAE,qBAAqB,CAAC;EAEnE,IAAIK,QAAQ,GAAG1C,GAAG,CAACsC,OAAO,EAAE;EAE5B,IAAIK,KAAK;EACT,IAAIC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACzD,IAAI,CAACuD,MAAM,CAAC;EACrC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;IACvC,IAAIE,CAAC,GAAGL,MAAM,CAACG,CAAC,CAAC;IACjB,IAAIG,EAAE,GAAG7D,IAAI,CAACuD,MAAM,CAACK,CAAC,CAAC;IACvB,IAAIC,EAAE,CAACC,QAAQ,KAAKT,QAAQ,EAAE;MAC7BC,KAAK,GAAGM,CAAC;MACT;IACD;EACD;EACAhE,MAAM,CAACmE,MAAM,CAACT,KAAK,EAAE,2BAA2B,CAAC;EAEjD,IAAIU,CAAC,GAAGrD,GAAG,CAACO,UAAU,CAACpB,IAAI,CAACiB,GAAG,CAACkD,SAAS,EAAE,IAAI,CAAC;EAChDD,CAAC,GAAG/D,KAAK,CAACiE,WAAW,CAACF,CAAC,CAAC;EAExB,IAAIvD,GAAG,GAAG;IACTW,IAAI,EAAE,OAAO;IACbW,KAAK,EAAE,CACN;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAElC,MAAM,CAACoE,IAAI,CAACb,KAAK;IAAE,CAAC,EAC3C;MAAEtB,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAE+B;IAAE,CAAC;EAExB,CAAC;EAED,OAAQ,IAAI9D,GAAG,CAACO,GAAG,CAAC;AACrB;AAEA,SAASiB,qBAAqBA,CAACf,GAAG,EAAE;EACnC,IAAIuB,OAAO,GAAGxB,SAAS,CAACC,GAAG,EAAE,SAAS,CAAC;EACvCf,MAAM,CAACiB,WAAW,CAACqB,OAAO,CAACO,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;EAE3C;EACA,IAAIN,CAAC,GAAGxB,GAAG,CAACO,UAAU,CAACpB,IAAI,CAACiB,GAAG,CAAC+B,WAAW,EAAE,IAAI,CAAC;EAElDnC,GAAG,CAACoC,YAAY,CAAC,IAAI,CAAC;EACtB,IAAIO,KAAK,GAAGhD,cAAc,CAACK,GAAG,CAAC;EAC/Bf,MAAM,CAACmE,MAAM,CAACT,KAAK,EAAE,wBAAwB,CAAC;EAE9C3C,GAAG,CAACoC,YAAY,CAAC,IAAI,CAAC;EACtB,IAAIiB,CAAC,GAAGrD,GAAG,CAACO,UAAU,CAACpB,IAAI,CAACiB,GAAG,CAACkD,SAAS,EAAE,IAAI,CAAC;EAChDD,CAAC,GAAG/D,KAAK,CAACiE,WAAW,CAACF,CAAC,CAAC;EAExB,IAAIvD,GAAG,GAAG;IACTW,IAAI,EAAE,OAAO;IACbW,KAAK,EAAE,CACN;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAElC,MAAM,CAACoE,IAAI,CAACb,KAAK;IAAE,CAAC,EAC3C;MAAEtB,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAE+B;IAAE,CAAC,EACtB;MAAEhC,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAEE;IAAE,CAAC;EAExB,CAAC;EAED,OAAQ,IAAIhC,UAAU,CAACM,GAAG,CAAC;AAC5B;AAEA,SAASd,UAAUA,CAACgB,GAAG,EAAEF,GAAG,EAAE;EAC7BE,GAAG,CAACyD,aAAa,EAAE;EAEnB,QAAQ3D,GAAG,CAACW,IAAI;IAChB,KAAK,KAAK;MACT,IAAIjB,UAAU,CAACkE,YAAY,CAAC5D,GAAG,CAAC,EAC/B6D,oBAAoB,CAAC3D,GAAG,EAAEF,GAAG,CAAC,CAAC,KAE/B8D,mBAAmB,CAAC5D,GAAG,EAAEF,GAAG,CAAC;MAC9B;IACD,KAAK,KAAK;MACT,IAAIN,UAAU,CAACkE,YAAY,CAAC5D,GAAG,CAAC,EAC/B+D,oBAAoB,CAAC7D,GAAG,EAAEF,GAAG,CAAC,CAAC,KAE/BgE,mBAAmB,CAAC9D,GAAG,EAAEF,GAAG,CAAC;MAC9B;IACD,KAAK,OAAO;MACX,IAAIN,UAAU,CAACkE,YAAY,CAAC5D,GAAG,CAAC,EAC/BiE,sBAAsB,CAAC/D,GAAG,EAAEF,GAAG,CAAC,CAAC,KAEjCkE,qBAAqB,CAAChE,GAAG,EAAEF,GAAG,CAAC;MAChC;IACD,KAAK,SAAS;MACb,IAAIN,UAAU,CAACkE,YAAY,CAAC5D,GAAG,CAAC,EAC/BmE,sBAAsB,CAACjE,GAAG,EAAEF,GAAG,CAAC,CAAC,KAEjCoE,qBAAqB,CAAClE,GAAG,EAAEF,GAAG,CAAC;MAChC;IACD;MACC,MAAO,IAAIc,KAAK,CAAC,oBAAoB,GAAGd,GAAG,CAACW,IAAI,CAAC;EAAE;EAGpDT,GAAG,CAACmE,WAAW,EAAE;AAClB;AAEA,SAASP,mBAAmBA,CAAC5D,GAAG,EAAEF,GAAG,EAAE;EACtCE,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACnD,CAAC,CAACI,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAClD,CAAC,CAACG,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;AACnD;AAEA,SAASsD,oBAAoBA,CAAC3D,GAAG,EAAEF,GAAG,EAAE;EACvC,IAAIwE,GAAG,GAAGlF,MAAM,CAACoE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1BxD,GAAG,CAACoE,WAAW,CAACE,GAAG,EAAEnF,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAEtCL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACnD,CAAC,CAACI,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAClD,CAAC,CAACG,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC7C,CAAC,CAACF,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC5C,CAAC,CAACH,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC3C,CAAC,CAACJ,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClD,IAAI,CAACP,GAAG,CAACuE,IAAI,CAAC1C,KAAK,IAAI,CAAC7B,GAAG,CAACuE,IAAI,CAACzC,KAAK,EACrCtC,KAAK,CAACiF,aAAa,CAACzE,GAAG,CAAC;EACzBE,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC1C,KAAK,CAACL,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EACtDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACzC,KAAK,CAACN,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EACtDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACxC,IAAI,CAACP,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;AACtD;AAEA,SAASwD,oBAAoBA,CAAC7D,GAAG,EAAEF,GAAG,EAAE;EACvC,IAAIwE,GAAG,GAAGlF,MAAM,CAACoE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1BxD,GAAG,CAACoE,WAAW,CAACE,GAAG,EAAEnF,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAEtCL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC5C,CAAC,CAACH,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC3C,CAAC,CAACJ,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACtC,CAAC,CAACT,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACrC,CAAC,CAACV,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACpC,CAAC,CAACX,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;AACnD;AAEA,SAASyD,mBAAmBA,CAAC9D,GAAG,EAAEF,GAAG,EAAE;EACtCE,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACrC,CAAC,CAACV,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC5C,CAAC,CAACH,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC3C,CAAC,CAACJ,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAClDL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACtC,CAAC,CAACT,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;AACnD;AAEA,SAAS2D,qBAAqBA,CAAChE,GAAG,EAAEF,GAAG,EAAE;EACxCE,GAAG,CAACyD,aAAa,EAAE;EAEnBzD,GAAG,CAACwE,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC;EACnC,IAAI7B,KAAK,GAAG7C,GAAG,CAACuE,IAAI,CAAC1B,KAAK,CAACrB,IAAI,CAACmD,QAAQ,EAAE;EAC1C,IAAI/B,QAAQ,GAAGrD,IAAI,CAACuD,MAAM,CAACD,KAAK,CAAC,CAACQ,QAAQ;EAC1ClE,MAAM,CAACmE,MAAM,CAACV,QAAQ,EAAE,2BAA2B,CAAC;EACpD1C,GAAG,CAACwE,QAAQ,CAAC9B,QAAQ,CAAC;EAEtB1C,GAAG,CAACmE,WAAW,EAAE;EAEjB,IAAId,CAAC,GAAG/D,KAAK,CAACiE,WAAW,CAACzD,GAAG,CAACuE,IAAI,CAAChB,CAAC,CAAC/B,IAAI,EAAE,IAAI,CAAC;EAChDtB,GAAG,CAACoE,WAAW,CAACf,CAAC,EAAElE,IAAI,CAACiB,GAAG,CAACkD,SAAS,CAAC;AACvC;AAEA,SAASS,sBAAsBA,CAAC/D,GAAG,EAAEF,GAAG,EAAE;EACzC,IAAIwE,GAAG,GAAGlF,MAAM,CAACoE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1BxD,GAAG,CAACoE,WAAW,CAACE,GAAG,EAAEnF,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAEtCL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAAC7C,CAAC,CAACF,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAAC+B,WAAW,CAAC;EAEtDnC,GAAG,CAACyD,aAAa,CAAC,IAAI,CAAC;EACvB,IAAId,KAAK,GAAG7C,GAAG,CAACuE,IAAI,CAAC1B,KAAK,CAACrB,IAAI,CAACmD,QAAQ,EAAE;EAC1C,IAAI/B,QAAQ,GAAGrD,IAAI,CAACuD,MAAM,CAACD,KAAK,CAAC,CAACQ,QAAQ;EAC1ClE,MAAM,CAACmE,MAAM,CAACV,QAAQ,EAAE,2BAA2B,CAAC;EACpD1C,GAAG,CAACwE,QAAQ,CAAC9B,QAAQ,CAAC;EACtB1C,GAAG,CAACmE,WAAW,EAAE;EAEjBnE,GAAG,CAACyD,aAAa,CAAC,IAAI,CAAC;EACvB,IAAIJ,CAAC,GAAG/D,KAAK,CAACiE,WAAW,CAACzD,GAAG,CAACuE,IAAI,CAAChB,CAAC,CAAC/B,IAAI,EAAE,IAAI,CAAC;EAChDtB,GAAG,CAACoE,WAAW,CAACf,CAAC,EAAElE,IAAI,CAACiB,GAAG,CAACkD,SAAS,CAAC;EACtCtD,GAAG,CAACmE,WAAW,EAAE;AAClB;AAEA,SAASF,sBAAsBA,CAACjE,GAAG,EAAEF,GAAG,EAAE;EACzC,IAAIwE,GAAG,GAAGlF,MAAM,CAACoE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1BxD,GAAG,CAACoE,WAAW,CAACE,GAAG,EAAEnF,IAAI,CAACiB,GAAG,CAACC,OAAO,CAAC;EAEtCL,GAAG,CAACoE,WAAW,CAACtE,GAAG,CAACuE,IAAI,CAACnC,CAAC,CAACZ,IAAI,EAAEnC,IAAI,CAACiB,GAAG,CAAC+B,WAAW,CAAC;EAEtDnC,GAAG,CAACyD,aAAa,CAAC,IAAI,CAAC;EACvBzD,GAAG,CAACwE,QAAQ,CAAC,aAAa,CAAC;EAC3BxE,GAAG,CAACmE,WAAW,EAAE;EAEjBnE,GAAG,CAACyD,aAAa,CAAC,IAAI,CAAC;EACvBnE,KAAK,CAACoF,cAAc,CAAC1E,GAAG,EAAEF,GAAG,CAACuE,IAAI,CAAC9B,CAAC,CAACjB,IAAI,CAAC;EAC1CtB,GAAG,CAACmE,WAAW,EAAE;AAClB;AAEA,SAASD,qBAAqBA,CAAClE,GAAG,EAAEF,GAAG,EAAE;EACxC,MAAO,IAAIc,KAAK,CAAC,gDAAgD,CAAC;AACnE"},"metadata":{},"sourceType":"script","externalDependencies":[]}