{"ast":null,"code":"// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Identity = require('./identity');\nvar formats = {};\nformats['openssh'] = require('./formats/openssh-cert');\nformats['x509'] = require('./formats/x509');\nformats['pem'] = require('./formats/x509-pem');\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Certificate(opts) {\n  assert.object(opts, 'options');\n  assert.arrayOfObject(opts.subjects, 'options.subjects');\n  utils.assertCompatible(opts.subjects[0], Identity, [1, 0], 'options.subjects');\n  utils.assertCompatible(opts.subjectKey, Key, [1, 0], 'options.subjectKey');\n  utils.assertCompatible(opts.issuer, Identity, [1, 0], 'options.issuer');\n  if (opts.issuerKey !== undefined) {\n    utils.assertCompatible(opts.issuerKey, Key, [1, 0], 'options.issuerKey');\n  }\n  assert.object(opts.signatures, 'options.signatures');\n  assert.buffer(opts.serial, 'options.serial');\n  assert.date(opts.validFrom, 'options.validFrom');\n  assert.date(opts.validUntil, 'optons.validUntil');\n  assert.optionalArrayOfString(opts.purposes, 'options.purposes');\n  this._hashCache = {};\n  this.subjects = opts.subjects;\n  this.issuer = opts.issuer;\n  this.subjectKey = opts.subjectKey;\n  this.issuerKey = opts.issuerKey;\n  this.signatures = opts.signatures;\n  this.serial = opts.serial;\n  this.validFrom = opts.validFrom;\n  this.validUntil = opts.validUntil;\n  this.purposes = opts.purposes;\n}\nCertificate.formats = formats;\nCertificate.prototype.toBuffer = function (format, options) {\n  if (format === undefined) format = 'x509';\n  assert.string(format, 'format');\n  assert.object(formats[format], 'formats[format]');\n  assert.optionalObject(options, 'options');\n  return formats[format].write(this, options);\n};\nCertificate.prototype.toString = function (format, options) {\n  if (format === undefined) format = 'pem';\n  return this.toBuffer(format, options).toString();\n};\nCertificate.prototype.fingerprint = function (algo) {\n  if (algo === undefined) algo = 'sha256';\n  assert.string(algo, 'algorithm');\n  var opts = {\n    type: 'certificate',\n    hash: this.hash(algo),\n    algorithm: algo\n  };\n  return new Fingerprint(opts);\n};\nCertificate.prototype.hash = function (algo) {\n  assert.string(algo, 'algorithm');\n  algo = algo.toLowerCase();\n  if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n  if (this._hashCache[algo]) return this._hashCache[algo];\n  var hash = crypto.createHash(algo).update(this.toBuffer('x509')).digest();\n  this._hashCache[algo] = hash;\n  return hash;\n};\nCertificate.prototype.isExpired = function (when) {\n  if (when === undefined) when = new Date();\n  return !(when.getTime() >= this.validFrom.getTime() && when.getTime() < this.validUntil.getTime());\n};\nCertificate.prototype.isSignedBy = function (issuerCert) {\n  utils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');\n  if (!this.issuer.equals(issuerCert.subjects[0])) return false;\n  if (this.issuer.purposes && this.issuer.purposes.length > 0 && this.issuer.purposes.indexOf('ca') === -1) {\n    return false;\n  }\n  return this.isSignedByKey(issuerCert.subjectKey);\n};\nCertificate.prototype.getExtension = function (keyOrOid) {\n  assert.string(keyOrOid, 'keyOrOid');\n  var ext = this.getExtensions().filter(function (maybeExt) {\n    if (maybeExt.format === 'x509') return maybeExt.oid === keyOrOid;\n    if (maybeExt.format === 'openssh') return maybeExt.name === keyOrOid;\n    return false;\n  })[0];\n  return ext;\n};\nCertificate.prototype.getExtensions = function () {\n  var exts = [];\n  var x509 = this.signatures.x509;\n  if (x509 && x509.extras && x509.extras.exts) {\n    x509.extras.exts.forEach(function (ext) {\n      ext.format = 'x509';\n      exts.push(ext);\n    });\n  }\n  var openssh = this.signatures.openssh;\n  if (openssh && openssh.exts) {\n    openssh.exts.forEach(function (ext) {\n      ext.format = 'openssh';\n      exts.push(ext);\n    });\n  }\n  return exts;\n};\nCertificate.prototype.isSignedByKey = function (issuerKey) {\n  utils.assertCompatible(issuerKey, Key, [1, 2], 'issuerKey');\n  if (this.issuerKey !== undefined) {\n    return this.issuerKey.fingerprint('sha512').matches(issuerKey);\n  }\n  var fmt = Object.keys(this.signatures)[0];\n  var valid = formats[fmt].verify(this, issuerKey);\n  if (valid) this.issuerKey = issuerKey;\n  return valid;\n};\nCertificate.prototype.signWith = function (key) {\n  utils.assertCompatible(key, PrivateKey, [1, 2], 'key');\n  var fmts = Object.keys(formats);\n  var didOne = false;\n  for (var i = 0; i < fmts.length; ++i) {\n    if (fmts[i] !== 'pem') {\n      var ret = formats[fmts[i]].sign(this, key);\n      if (ret === true) didOne = true;\n    }\n  }\n  if (!didOne) {\n    throw new Error('Failed to sign the certificate for any ' + 'available certificate formats');\n  }\n};\nCertificate.createSelfSigned = function (subjectOrSubjects, key, options) {\n  var subjects;\n  if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;else subjects = [subjectOrSubjects];\n  assert.arrayOfObject(subjects);\n  subjects.forEach(function (subject) {\n    utils.assertCompatible(subject, Identity, [1, 0], 'subject');\n  });\n  utils.assertCompatible(key, PrivateKey, [1, 2], 'private key');\n  assert.optionalObject(options, 'options');\n  if (options === undefined) options = {};\n  assert.optionalObject(options.validFrom, 'options.validFrom');\n  assert.optionalObject(options.validUntil, 'options.validUntil');\n  var validFrom = options.validFrom;\n  var validUntil = options.validUntil;\n  if (validFrom === undefined) validFrom = new Date();\n  if (validUntil === undefined) {\n    assert.optionalNumber(options.lifetime, 'options.lifetime');\n    var lifetime = options.lifetime;\n    if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n    validUntil = new Date();\n    validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n  }\n  assert.optionalBuffer(options.serial, 'options.serial');\n  var serial = options.serial;\n  if (serial === undefined) serial = Buffer.from('0000000000000001', 'hex');\n  var purposes = options.purposes;\n  if (purposes === undefined) purposes = [];\n  if (purposes.indexOf('signature') === -1) purposes.push('signature');\n\n  /* Self-signed certs are always CAs. */\n  if (purposes.indexOf('ca') === -1) purposes.push('ca');\n  if (purposes.indexOf('crl') === -1) purposes.push('crl');\n\n  /*\n   * If we weren't explicitly given any other purposes, do the sensible\n   * thing and add some basic ones depending on the subject type.\n   */\n  if (purposes.length <= 3) {\n    var hostSubjects = subjects.filter(function (subject) {\n      return subject.type === 'host';\n    });\n    var userSubjects = subjects.filter(function (subject) {\n      return subject.type === 'user';\n    });\n    if (hostSubjects.length > 0) {\n      if (purposes.indexOf('serverAuth') === -1) purposes.push('serverAuth');\n    }\n    if (userSubjects.length > 0) {\n      if (purposes.indexOf('clientAuth') === -1) purposes.push('clientAuth');\n    }\n    if (userSubjects.length > 0 || hostSubjects.length > 0) {\n      if (purposes.indexOf('keyAgreement') === -1) purposes.push('keyAgreement');\n      if (key.type === 'rsa' && purposes.indexOf('encryption') === -1) purposes.push('encryption');\n    }\n  }\n  var cert = new Certificate({\n    subjects: subjects,\n    issuer: subjects[0],\n    subjectKey: key.toPublic(),\n    issuerKey: key.toPublic(),\n    signatures: {},\n    serial: serial,\n    validFrom: validFrom,\n    validUntil: validUntil,\n    purposes: purposes\n  });\n  cert.signWith(key);\n  return cert;\n};\nCertificate.create = function (subjectOrSubjects, key, issuer, issuerKey, options) {\n  var subjects;\n  if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;else subjects = [subjectOrSubjects];\n  assert.arrayOfObject(subjects);\n  subjects.forEach(function (subject) {\n    utils.assertCompatible(subject, Identity, [1, 0], 'subject');\n  });\n  utils.assertCompatible(key, Key, [1, 0], 'key');\n  if (PrivateKey.isPrivateKey(key)) key = key.toPublic();\n  utils.assertCompatible(issuer, Identity, [1, 0], 'issuer');\n  utils.assertCompatible(issuerKey, PrivateKey, [1, 2], 'issuer key');\n  assert.optionalObject(options, 'options');\n  if (options === undefined) options = {};\n  assert.optionalObject(options.validFrom, 'options.validFrom');\n  assert.optionalObject(options.validUntil, 'options.validUntil');\n  var validFrom = options.validFrom;\n  var validUntil = options.validUntil;\n  if (validFrom === undefined) validFrom = new Date();\n  if (validUntil === undefined) {\n    assert.optionalNumber(options.lifetime, 'options.lifetime');\n    var lifetime = options.lifetime;\n    if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n    validUntil = new Date();\n    validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n  }\n  assert.optionalBuffer(options.serial, 'options.serial');\n  var serial = options.serial;\n  if (serial === undefined) serial = Buffer.from('0000000000000001', 'hex');\n  var purposes = options.purposes;\n  if (purposes === undefined) purposes = [];\n  if (purposes.indexOf('signature') === -1) purposes.push('signature');\n  if (options.ca === true) {\n    if (purposes.indexOf('ca') === -1) purposes.push('ca');\n    if (purposes.indexOf('crl') === -1) purposes.push('crl');\n  }\n  var hostSubjects = subjects.filter(function (subject) {\n    return subject.type === 'host';\n  });\n  var userSubjects = subjects.filter(function (subject) {\n    return subject.type === 'user';\n  });\n  if (hostSubjects.length > 0) {\n    if (purposes.indexOf('serverAuth') === -1) purposes.push('serverAuth');\n  }\n  if (userSubjects.length > 0) {\n    if (purposes.indexOf('clientAuth') === -1) purposes.push('clientAuth');\n  }\n  if (userSubjects.length > 0 || hostSubjects.length > 0) {\n    if (purposes.indexOf('keyAgreement') === -1) purposes.push('keyAgreement');\n    if (key.type === 'rsa' && purposes.indexOf('encryption') === -1) purposes.push('encryption');\n  }\n  var cert = new Certificate({\n    subjects: subjects,\n    issuer: issuer,\n    subjectKey: key,\n    issuerKey: issuerKey.toPublic(),\n    signatures: {},\n    serial: serial,\n    validFrom: validFrom,\n    validUntil: validUntil,\n    purposes: purposes\n  });\n  cert.signWith(issuerKey);\n  return cert;\n};\nCertificate.parse = function (data, format, options) {\n  if (typeof data !== 'string') assert.buffer(data, 'data');\n  if (format === undefined) format = 'auto';\n  assert.string(format, 'format');\n  if (typeof options === 'string') options = {\n    filename: options\n  };\n  assert.optionalObject(options, 'options');\n  if (options === undefined) options = {};\n  assert.optionalString(options.filename, 'options.filename');\n  if (options.filename === undefined) options.filename = '(unnamed)';\n  assert.object(formats[format], 'formats[format]');\n  try {\n    var k = formats[format].read(data, options);\n    return k;\n  } catch (e) {\n    throw new CertificateParseError(options.filename, format, e);\n  }\n};\nCertificate.isCertificate = function (obj, ver) {\n  return utils.isCompatible(obj, Certificate, ver);\n};\n\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n * [1,1] -- openssh format now unpacks extensions\n */\nCertificate.prototype._sshpkApiVersion = [1, 1];\nCertificate._oldVersionDetect = function (obj) {\n  return [1, 0];\n};","map":{"version":3,"names":["module","exports","Certificate","assert","require","Buffer","algs","crypto","Fingerprint","Signature","errs","util","utils","Key","PrivateKey","Identity","formats","CertificateParseError","InvalidAlgorithmError","opts","object","arrayOfObject","subjects","assertCompatible","subjectKey","issuer","issuerKey","undefined","signatures","buffer","serial","date","validFrom","validUntil","optionalArrayOfString","purposes","_hashCache","prototype","toBuffer","format","options","string","optionalObject","write","toString","fingerprint","algo","type","hash","algorithm","toLowerCase","hashAlgs","createHash","update","digest","isExpired","when","Date","getTime","isSignedBy","issuerCert","equals","length","indexOf","isSignedByKey","getExtension","keyOrOid","ext","getExtensions","filter","maybeExt","oid","name","exts","x509","extras","forEach","push","openssh","matches","fmt","Object","keys","valid","verify","signWith","key","fmts","didOne","i","ret","sign","Error","createSelfSigned","subjectOrSubjects","Array","isArray","subject","optionalNumber","lifetime","setTime","optionalBuffer","from","hostSubjects","userSubjects","cert","toPublic","create","isPrivateKey","ca","parse","data","filename","optionalString","k","read","e","isCertificate","obj","ver","isCompatible","_sshpkApiVersion","_oldVersionDetect"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/certificate.js"],"sourcesContent":["// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Identity = require('./identity');\n\nvar formats = {};\nformats['openssh'] = require('./formats/openssh-cert');\nformats['x509'] = require('./formats/x509');\nformats['pem'] = require('./formats/x509-pem');\n\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Certificate(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.subjects, 'options.subjects');\n\tutils.assertCompatible(opts.subjects[0], Identity, [1, 0],\n\t    'options.subjects');\n\tutils.assertCompatible(opts.subjectKey, Key, [1, 0],\n\t    'options.subjectKey');\n\tutils.assertCompatible(opts.issuer, Identity, [1, 0], 'options.issuer');\n\tif (opts.issuerKey !== undefined) {\n\t\tutils.assertCompatible(opts.issuerKey, Key, [1, 0],\n\t\t    'options.issuerKey');\n\t}\n\tassert.object(opts.signatures, 'options.signatures');\n\tassert.buffer(opts.serial, 'options.serial');\n\tassert.date(opts.validFrom, 'options.validFrom');\n\tassert.date(opts.validUntil, 'optons.validUntil');\n\n\tassert.optionalArrayOfString(opts.purposes, 'options.purposes');\n\n\tthis._hashCache = {};\n\n\tthis.subjects = opts.subjects;\n\tthis.issuer = opts.issuer;\n\tthis.subjectKey = opts.subjectKey;\n\tthis.issuerKey = opts.issuerKey;\n\tthis.signatures = opts.signatures;\n\tthis.serial = opts.serial;\n\tthis.validFrom = opts.validFrom;\n\tthis.validUntil = opts.validUntil;\n\tthis.purposes = opts.purposes;\n}\n\nCertificate.formats = formats;\n\nCertificate.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'x509';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nCertificate.prototype.toString = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pem';\n\treturn (this.toBuffer(format, options).toString());\n};\n\nCertificate.prototype.fingerprint = function (algo) {\n\tif (algo === undefined)\n\t\talgo = 'sha256';\n\tassert.string(algo, 'algorithm');\n\tvar opts = {\n\t\ttype: 'certificate',\n\t\thash: this.hash(algo),\n\t\talgorithm: algo\n\t};\n\treturn (new Fingerprint(opts));\n};\n\nCertificate.prototype.hash = function (algo) {\n\tassert.string(algo, 'algorithm');\n\talgo = algo.toLowerCase();\n\tif (algs.hashAlgs[algo] === undefined)\n\t\tthrow (new InvalidAlgorithmError(algo));\n\n\tif (this._hashCache[algo])\n\t\treturn (this._hashCache[algo]);\n\n\tvar hash = crypto.createHash(algo).\n\t    update(this.toBuffer('x509')).digest();\n\tthis._hashCache[algo] = hash;\n\treturn (hash);\n};\n\nCertificate.prototype.isExpired = function (when) {\n\tif (when === undefined)\n\t\twhen = new Date();\n\treturn (!((when.getTime() >= this.validFrom.getTime()) &&\n\t\t(when.getTime() < this.validUntil.getTime())));\n};\n\nCertificate.prototype.isSignedBy = function (issuerCert) {\n\tutils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');\n\n\tif (!this.issuer.equals(issuerCert.subjects[0]))\n\t\treturn (false);\n\tif (this.issuer.purposes && this.issuer.purposes.length > 0 &&\n\t    this.issuer.purposes.indexOf('ca') === -1) {\n\t\treturn (false);\n\t}\n\n\treturn (this.isSignedByKey(issuerCert.subjectKey));\n};\n\nCertificate.prototype.getExtension = function (keyOrOid) {\n\tassert.string(keyOrOid, 'keyOrOid');\n\tvar ext = this.getExtensions().filter(function (maybeExt) {\n\t\tif (maybeExt.format === 'x509')\n\t\t\treturn (maybeExt.oid === keyOrOid);\n\t\tif (maybeExt.format === 'openssh')\n\t\t\treturn (maybeExt.name === keyOrOid);\n\t\treturn (false);\n\t})[0];\n\treturn (ext);\n};\n\nCertificate.prototype.getExtensions = function () {\n\tvar exts = [];\n\tvar x509 = this.signatures.x509;\n\tif (x509 && x509.extras && x509.extras.exts) {\n\t\tx509.extras.exts.forEach(function (ext) {\n\t\t\text.format = 'x509';\n\t\t\texts.push(ext);\n\t\t});\n\t}\n\tvar openssh = this.signatures.openssh;\n\tif (openssh && openssh.exts) {\n\t\topenssh.exts.forEach(function (ext) {\n\t\t\text.format = 'openssh';\n\t\t\texts.push(ext);\n\t\t});\n\t}\n\treturn (exts);\n};\n\nCertificate.prototype.isSignedByKey = function (issuerKey) {\n\tutils.assertCompatible(issuerKey, Key, [1, 2], 'issuerKey');\n\n\tif (this.issuerKey !== undefined) {\n\t\treturn (this.issuerKey.\n\t\t    fingerprint('sha512').matches(issuerKey));\n\t}\n\n\tvar fmt = Object.keys(this.signatures)[0];\n\tvar valid = formats[fmt].verify(this, issuerKey);\n\tif (valid)\n\t\tthis.issuerKey = issuerKey;\n\treturn (valid);\n};\n\nCertificate.prototype.signWith = function (key) {\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'key');\n\tvar fmts = Object.keys(formats);\n\tvar didOne = false;\n\tfor (var i = 0; i < fmts.length; ++i) {\n\t\tif (fmts[i] !== 'pem') {\n\t\t\tvar ret = formats[fmts[i]].sign(this, key);\n\t\t\tif (ret === true)\n\t\t\t\tdidOne = true;\n\t\t}\n\t}\n\tif (!didOne) {\n\t\tthrow (new Error('Failed to sign the certificate for any ' +\n\t\t    'available certificate formats'));\n\t}\n};\n\nCertificate.createSelfSigned = function (subjectOrSubjects, key, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'private key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = Buffer.from('0000000000000001', 'hex');\n\n\tvar purposes = options.purposes;\n\tif (purposes === undefined)\n\t\tpurposes = [];\n\n\tif (purposes.indexOf('signature') === -1)\n\t\tpurposes.push('signature');\n\n\t/* Self-signed certs are always CAs. */\n\tif (purposes.indexOf('ca') === -1)\n\t\tpurposes.push('ca');\n\tif (purposes.indexOf('crl') === -1)\n\t\tpurposes.push('crl');\n\n\t/*\n\t * If we weren't explicitly given any other purposes, do the sensible\n\t * thing and add some basic ones depending on the subject type.\n\t */\n\tif (purposes.length <= 3) {\n\t\tvar hostSubjects = subjects.filter(function (subject) {\n\t\t\treturn (subject.type === 'host');\n\t\t});\n\t\tvar userSubjects = subjects.filter(function (subject) {\n\t\t\treturn (subject.type === 'user');\n\t\t});\n\t\tif (hostSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('serverAuth') === -1)\n\t\t\t\tpurposes.push('serverAuth');\n\t\t}\n\t\tif (userSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('clientAuth') === -1)\n\t\t\t\tpurposes.push('clientAuth');\n\t\t}\n\t\tif (userSubjects.length > 0 || hostSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('keyAgreement') === -1)\n\t\t\t\tpurposes.push('keyAgreement');\n\t\t\tif (key.type === 'rsa' &&\n\t\t\t    purposes.indexOf('encryption') === -1)\n\t\t\t\tpurposes.push('encryption');\n\t\t}\n\t}\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: subjects[0],\n\t\tsubjectKey: key.toPublic(),\n\t\tissuerKey: key.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil,\n\t\tpurposes: purposes\n\t});\n\tcert.signWith(key);\n\n\treturn (cert);\n};\n\nCertificate.create =\n    function (subjectOrSubjects, key, issuer, issuerKey, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, Key, [1, 0], 'key');\n\tif (PrivateKey.isPrivateKey(key))\n\t\tkey = key.toPublic();\n\tutils.assertCompatible(issuer, Identity, [1, 0], 'issuer');\n\tutils.assertCompatible(issuerKey, PrivateKey, [1, 2], 'issuer key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = Buffer.from('0000000000000001', 'hex');\n\n\tvar purposes = options.purposes;\n\tif (purposes === undefined)\n\t\tpurposes = [];\n\n\tif (purposes.indexOf('signature') === -1)\n\t\tpurposes.push('signature');\n\n\tif (options.ca === true) {\n\t\tif (purposes.indexOf('ca') === -1)\n\t\t\tpurposes.push('ca');\n\t\tif (purposes.indexOf('crl') === -1)\n\t\t\tpurposes.push('crl');\n\t}\n\n\tvar hostSubjects = subjects.filter(function (subject) {\n\t\treturn (subject.type === 'host');\n\t});\n\tvar userSubjects = subjects.filter(function (subject) {\n\t\treturn (subject.type === 'user');\n\t});\n\tif (hostSubjects.length > 0) {\n\t\tif (purposes.indexOf('serverAuth') === -1)\n\t\t\tpurposes.push('serverAuth');\n\t}\n\tif (userSubjects.length > 0) {\n\t\tif (purposes.indexOf('clientAuth') === -1)\n\t\t\tpurposes.push('clientAuth');\n\t}\n\tif (userSubjects.length > 0 || hostSubjects.length > 0) {\n\t\tif (purposes.indexOf('keyAgreement') === -1)\n\t\t\tpurposes.push('keyAgreement');\n\t\tif (key.type === 'rsa' &&\n\t\t    purposes.indexOf('encryption') === -1)\n\t\t\tpurposes.push('encryption');\n\t}\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: issuer,\n\t\tsubjectKey: key,\n\t\tissuerKey: issuerKey.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil,\n\t\tpurposes: purposes\n\t});\n\tcert.signWith(issuerKey);\n\n\treturn (cert);\n};\n\nCertificate.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\treturn (k);\n\t} catch (e) {\n\t\tthrow (new CertificateParseError(options.filename, format, e));\n\t}\n};\n\nCertificate.isCertificate = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Certificate, ver));\n};\n\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n * [1,1] -- openssh format now unpacks extensions\n */\nCertificate.prototype._sshpkApiVersion = [1, 1];\n\nCertificate._oldVersionDetect = function (obj) {\n\treturn ([1, 0]);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}