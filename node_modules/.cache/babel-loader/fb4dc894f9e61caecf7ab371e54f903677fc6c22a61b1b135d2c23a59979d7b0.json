{"ast":null,"code":"var crypto = require(\"crypto\");\nvar BigInteger = require(\"jsbn\").BigInteger;\nvar ECPointFp = require(\"./lib/ec.js\").ECPointFp;\nvar Buffer = require(\"safer-buffer\").Buffer;\nexports.ECCurves = require(\"./lib/sec.js\");\n\n// zero prepad\nfunction unstupid(hex, len) {\n  return hex.length >= len ? hex : unstupid(\"0\" + hex, len);\n}\nexports.ECKey = function (curve, key, isPublic) {\n  var priv;\n  var c = curve();\n  var n = c.getN();\n  var bytes = Math.floor(n.bitLength() / 8);\n  if (key) {\n    if (isPublic) {\n      var curve = c.getCurve();\n      //      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n      //      var y = key.slice(bytes+1);\n      //      this.P = new ECPointFp(curve,\n      //        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n      //        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n      this.P = curve.decodePointHex(key.toString(\"hex\"));\n    } else {\n      if (key.length != bytes) return false;\n      priv = new BigInteger(key.toString(\"hex\"), 16);\n    }\n  } else {\n    var n1 = n.subtract(BigInteger.ONE);\n    var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n    priv = r.mod(n1).add(BigInteger.ONE);\n    this.P = c.getG().multiply(priv);\n  }\n  if (this.P) {\n    //  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n    //  this.PublicKey = Buffer.from(\"04\"+pubhex,\"hex\");\n    this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHex(this.P), \"hex\");\n  }\n  if (priv) {\n    this.PrivateKey = Buffer.from(unstupid(priv.toString(16), bytes * 2), \"hex\");\n    this.deriveSharedSecret = function (key) {\n      if (!key || !key.P) return false;\n      var S = key.P.multiply(priv);\n      return Buffer.from(unstupid(S.getX().toBigInteger().toString(16), bytes * 2), \"hex\");\n    };\n  }\n};","map":{"version":3,"names":["crypto","require","BigInteger","ECPointFp","Buffer","exports","ECCurves","unstupid","hex","len","length","ECKey","curve","key","isPublic","priv","c","n","getN","bytes","Math","floor","bitLength","getCurve","P","decodePointHex","toString","n1","subtract","ONE","r","randomBytes","mod","add","getG","multiply","PublicKey","from","encodeCompressedPointHex","PrivateKey","deriveSharedSecret","S","getX","toBigInteger"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/ecc-jsbn/index.js"],"sourcesContent":["var crypto = require(\"crypto\");\nvar BigInteger = require(\"jsbn\").BigInteger;\nvar ECPointFp = require(\"./lib/ec.js\").ECPointFp;\nvar Buffer = require(\"safer-buffer\").Buffer;\nexports.ECCurves = require(\"./lib/sec.js\");\n\n// zero prepad\nfunction unstupid(hex,len)\n{\n\treturn (hex.length >= len) ? hex : unstupid(\"0\"+hex,len);\n}\n\nexports.ECKey = function(curve, key, isPublic)\n{\n  var priv;\n\tvar c = curve();\n\tvar n = c.getN();\n  var bytes = Math.floor(n.bitLength()/8);\n\n  if(key)\n  {\n    if(isPublic)\n    {\n      var curve = c.getCurve();\n//      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n//      var y = key.slice(bytes+1);\n//      this.P = new ECPointFp(curve,\n//        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n//        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n      this.P = curve.decodePointHex(key.toString(\"hex\"));\n    }else{\n      if(key.length != bytes) return false;\n      priv = new BigInteger(key.toString(\"hex\"), 16);      \n    }\n  }else{\n    var n1 = n.subtract(BigInteger.ONE);\n    var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n    priv = r.mod(n1).add(BigInteger.ONE);\n    this.P = c.getG().multiply(priv);\n  }\n  if(this.P)\n  {\n//  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n//  this.PublicKey = Buffer.from(\"04\"+pubhex,\"hex\");\n    this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHex(this.P),\"hex\");\n  }\n  if(priv)\n  {\n    this.PrivateKey = Buffer.from(unstupid(priv.toString(16),bytes*2),\"hex\");\n    this.deriveSharedSecret = function(key)\n    {\n      if(!key || !key.P) return false;\n      var S = key.P.multiply(priv);\n      return Buffer.from(unstupid(S.getX().toBigInteger().toString(16),bytes*2),\"hex\");\n   }     \n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}