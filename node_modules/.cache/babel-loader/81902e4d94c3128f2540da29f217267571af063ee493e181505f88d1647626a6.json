{"ast":null,"code":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar sshpk = require('sshpk');\nvar util = require('util');\nvar HASH_ALGOS = {\n  'sha1': true,\n  'sha256': true,\n  'sha512': true\n};\nvar PK_ALGOS = {\n  'rsa': true,\n  'dsa': true,\n  'ecdsa': true\n};\nfunction HttpSignatureError(message, caller) {\n  if (Error.captureStackTrace) Error.captureStackTrace(this, caller || HttpSignatureError);\n  this.message = message;\n  this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\nfunction InvalidAlgorithmError(message) {\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\nfunction validateAlgorithm(algorithm) {\n  var alg = algorithm.toLowerCase().split('-');\n  if (alg.length !== 2) {\n    throw new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' + 'valid algorithm');\n  }\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n    throw new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' + 'are not supported');\n  }\n  if (!HASH_ALGOS[alg[1]]) {\n    throw new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' + 'supported hash algorithm');\n  }\n  return alg;\n}\n\n///--- API\n\nmodule.exports = {\n  HASH_ALGOS: HASH_ALGOS,\n  PK_ALGOS: PK_ALGOS,\n  HttpSignatureError: HttpSignatureError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n  validateAlgorithm: validateAlgorithm,\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n    var k = sshpk.parseKey(key, 'ssh');\n    return k.toString('pem');\n  },\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n    var k = sshpk.parseKey(key, 'ssh');\n    return k.fingerprint('md5').toString('hex');\n  },\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof pem, 'typeof pem');\n    var k = sshpk.parseKey(pem, 'pem');\n    k.comment = comment;\n    return k.toString('ssh');\n  }\n};","map":{"version":3,"names":["assert","require","sshpk","util","HASH_ALGOS","PK_ALGOS","HttpSignatureError","message","caller","Error","captureStackTrace","name","inherits","InvalidAlgorithmError","call","validateAlgorithm","algorithm","alg","toLowerCase","split","length","toUpperCase","module","exports","sshKeyToPEM","key","string","k","parseKey","toString","fingerprint","pemToRsaSSHKey","pem","comment","equal"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/http-signature/lib/utils.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar sshpk = require('sshpk');\nvar util = require('util');\n\nvar HASH_ALGOS = {\n  'sha1': true,\n  'sha256': true,\n  'sha512': true\n};\n\nvar PK_ALGOS = {\n  'rsa': true,\n  'dsa': true,\n  'ecdsa': true\n};\n\nfunction HttpSignatureError(message, caller) {\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, caller || HttpSignatureError);\n\n  this.message = message;\n  this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\n\nfunction InvalidAlgorithmError(message) {\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\n\nfunction validateAlgorithm(algorithm) {\n  var alg = algorithm.toLowerCase().split('-');\n\n  if (alg.length !== 2) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\n      'valid algorithm'));\n  }\n\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\n      'are not supported'));\n  }\n\n  if (!HASH_ALGOS[alg[1]]) {\n    throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\n      'supported hash algorithm'));\n  }\n\n  return (alg);\n}\n\n///--- API\n\nmodule.exports = {\n\n  HASH_ALGOS: HASH_ALGOS,\n  PK_ALGOS: PK_ALGOS,\n\n  HttpSignatureError: HttpSignatureError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n\n  validateAlgorithm: validateAlgorithm,\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.toString('pem'));\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.fingerprint('md5').toString('hex'));\n  },\n\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof (pem), 'typeof pem');\n\n    var k = sshpk.parseKey(pem, 'pem');\n    k.comment = comment;\n    return (k.toString('ssh'));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}