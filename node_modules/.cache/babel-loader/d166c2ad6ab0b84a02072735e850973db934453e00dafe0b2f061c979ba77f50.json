{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Key;\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar DiffieHellman = require('./dhe').DiffieHellman;\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar PrivateKey = require('./private-key');\nvar edCompat;\ntry {\n  edCompat = require('./ed-compat');\n} catch (e) {\n  /* Just continue through, and bail out if we try to use it. */\n}\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh'] = require('./formats/ssh');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\nformats['putty'] = require('./formats/putty');\nformats['ppk'] = formats['putty'];\nfunction Key(opts) {\n  assert.object(opts, 'options');\n  assert.arrayOfObject(opts.parts, 'options.parts');\n  assert.string(opts.type, 'options.type');\n  assert.optionalString(opts.comment, 'options.comment');\n  var algInfo = algs.info[opts.type];\n  if (typeof algInfo !== 'object') throw new InvalidAlgorithmError(opts.type);\n  var partLookup = {};\n  for (var i = 0; i < opts.parts.length; ++i) {\n    var part = opts.parts[i];\n    partLookup[part.name] = part;\n  }\n  this.type = opts.type;\n  this.parts = opts.parts;\n  this.part = partLookup;\n  this.comment = undefined;\n  this.source = opts.source;\n\n  /* for speeding up hashing/fingerprint operations */\n  this._rfc4253Cache = opts._rfc4253Cache;\n  this._hashCache = {};\n  var sz;\n  this.curve = undefined;\n  if (this.type === 'ecdsa') {\n    var curve = this.part.curve.data.toString();\n    this.curve = curve;\n    sz = algs.curves[curve].size;\n  } else if (this.type === 'ed25519' || this.type === 'curve25519') {\n    sz = 256;\n    this.curve = 'curve25519';\n  } else {\n    var szPart = this.part[algInfo.sizePart];\n    sz = szPart.data.length;\n    sz = sz * 8 - utils.countZeros(szPart.data);\n  }\n  this.size = sz;\n}\nKey.formats = formats;\nKey.prototype.toBuffer = function (format, options) {\n  if (format === undefined) format = 'ssh';\n  assert.string(format, 'format');\n  assert.object(formats[format], 'formats[format]');\n  assert.optionalObject(options, 'options');\n  if (format === 'rfc4253') {\n    if (this._rfc4253Cache === undefined) this._rfc4253Cache = formats['rfc4253'].write(this);\n    return this._rfc4253Cache;\n  }\n  return formats[format].write(this, options);\n};\nKey.prototype.toString = function (format, options) {\n  return this.toBuffer(format, options).toString();\n};\nKey.prototype.hash = function (algo, type) {\n  assert.string(algo, 'algorithm');\n  assert.optionalString(type, 'type');\n  if (type === undefined) type = 'ssh';\n  algo = algo.toLowerCase();\n  if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n  var cacheKey = algo + '||' + type;\n  if (this._hashCache[cacheKey]) return this._hashCache[cacheKey];\n  var buf;\n  if (type === 'ssh') {\n    buf = this.toBuffer('rfc4253');\n  } else if (type === 'spki') {\n    buf = formats.pkcs8.pkcs8ToBuffer(this);\n  } else {\n    throw new Error('Hash type ' + type + ' not supported');\n  }\n  var hash = crypto.createHash(algo).update(buf).digest();\n  this._hashCache[cacheKey] = hash;\n  return hash;\n};\nKey.prototype.fingerprint = function (algo, type) {\n  if (algo === undefined) algo = 'sha256';\n  if (type === undefined) type = 'ssh';\n  assert.string(algo, 'algorithm');\n  assert.string(type, 'type');\n  var opts = {\n    type: 'key',\n    hash: this.hash(algo, type),\n    algorithm: algo,\n    hashType: type\n  };\n  return new Fingerprint(opts);\n};\nKey.prototype.defaultHashAlgorithm = function () {\n  var hashAlgo = 'sha1';\n  if (this.type === 'rsa') hashAlgo = 'sha256';\n  if (this.type === 'dsa' && this.size > 1024) hashAlgo = 'sha256';\n  if (this.type === 'ed25519') hashAlgo = 'sha512';\n  if (this.type === 'ecdsa') {\n    if (this.size <= 256) hashAlgo = 'sha256';else if (this.size <= 384) hashAlgo = 'sha384';else hashAlgo = 'sha512';\n  }\n  return hashAlgo;\n};\nKey.prototype.createVerify = function (hashAlgo) {\n  if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n  assert.string(hashAlgo, 'hash algorithm');\n\n  /* ED25519 is not supported by OpenSSL, use a javascript impl. */\n  if (this.type === 'ed25519' && edCompat !== undefined) return new edCompat.Verifier(this, hashAlgo);\n  if (this.type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');\n  var v, nm, err;\n  try {\n    nm = hashAlgo.toUpperCase();\n    v = crypto.createVerify(nm);\n  } catch (e) {\n    err = e;\n  }\n  if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n    nm = 'RSA-';\n    nm += hashAlgo.toUpperCase();\n    v = crypto.createVerify(nm);\n  }\n  assert.ok(v, 'failed to create verifier');\n  var oldVerify = v.verify.bind(v);\n  var key = this.toBuffer('pkcs8');\n  var curve = this.curve;\n  var self = this;\n  v.verify = function (signature, fmt) {\n    if (Signature.isSignature(signature, [2, 0])) {\n      if (signature.type !== self.type) return false;\n      if (signature.hashAlgorithm && signature.hashAlgorithm !== hashAlgo) return false;\n      if (signature.curve && self.type === 'ecdsa' && signature.curve !== curve) return false;\n      return oldVerify(key, signature.toBuffer('asn1'));\n    } else if (typeof signature === 'string' || Buffer.isBuffer(signature)) {\n      return oldVerify(key, signature, fmt);\n\n      /*\n       * Avoid doing this on valid arguments, walking the prototype\n       * chain can be quite slow.\n       */\n    } else if (Signature.isSignature(signature, [1, 0])) {\n      throw new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified');\n    } else {\n      throw new TypeError('signature must be a string, ' + 'Buffer, or Signature object');\n    }\n  };\n  return v;\n};\nKey.prototype.createDiffieHellman = function () {\n  if (this.type === 'rsa') throw new Error('RSA keys do not support Diffie-Hellman');\n  return new DiffieHellman(this);\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\nKey.parse = function (data, format, options) {\n  if (typeof data !== 'string') assert.buffer(data, 'data');\n  if (format === undefined) format = 'auto';\n  assert.string(format, 'format');\n  if (typeof options === 'string') options = {\n    filename: options\n  };\n  assert.optionalObject(options, 'options');\n  if (options === undefined) options = {};\n  assert.optionalString(options.filename, 'options.filename');\n  if (options.filename === undefined) options.filename = '(unnamed)';\n  assert.object(formats[format], 'formats[format]');\n  try {\n    var k = formats[format].read(data, options);\n    if (k instanceof PrivateKey) k = k.toPublic();\n    if (!k.comment) k.comment = options.filename;\n    return k;\n  } catch (e) {\n    if (e.name === 'KeyEncryptedError') throw e;\n    throw new KeyParseError(options.filename, format, e);\n  }\n};\nKey.isKey = function (obj, ver) {\n  return utils.isCompatible(obj, Key, ver);\n};\n\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n * [1,7] -- spki hash types\n */\nKey.prototype._sshpkApiVersion = [1, 7];\nKey._oldVersionDetect = function (obj) {\n  assert.func(obj.toBuffer);\n  assert.func(obj.fingerprint);\n  if (obj.createDH) return [1, 4];\n  if (obj.defaultHashAlgorithm) return [1, 3];\n  if (obj.formats['auto']) return [1, 2];\n  if (obj.formats['pkcs1']) return [1, 1];\n  return [1, 0];\n};","map":{"version":3,"names":["module","exports","Key","assert","require","algs","crypto","Fingerprint","Signature","DiffieHellman","errs","utils","PrivateKey","edCompat","e","InvalidAlgorithmError","KeyParseError","formats","opts","object","arrayOfObject","parts","string","type","optionalString","comment","algInfo","info","partLookup","i","length","part","name","undefined","source","_rfc4253Cache","_hashCache","sz","curve","data","toString","curves","size","szPart","sizePart","countZeros","prototype","toBuffer","format","options","optionalObject","write","hash","algo","toLowerCase","hashAlgs","cacheKey","buf","pkcs8","pkcs8ToBuffer","Error","createHash","update","digest","fingerprint","algorithm","hashType","defaultHashAlgorithm","hashAlgo","createVerify","Verifier","v","nm","err","toUpperCase","message","match","ok","oldVerify","verify","bind","key","self","signature","fmt","isSignature","hashAlgorithm","Buffer","isBuffer","TypeError","createDiffieHellman","createDH","parse","buffer","filename","k","read","toPublic","isKey","obj","ver","isCompatible","_sshpkApiVersion","_oldVersionDetect","func"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/key.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Key;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar DiffieHellman = require('./dhe').DiffieHellman;\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar PrivateKey = require('./private-key');\nvar edCompat;\n\ntry {\n\tedCompat = require('./ed-compat');\n} catch (e) {\n\t/* Just continue through, and bail out if we try to use it. */\n}\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh'] = require('./formats/ssh');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\nformats['putty'] = require('./formats/putty');\nformats['ppk'] = formats['putty'];\n\nfunction Key(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.parts, 'options.parts');\n\tassert.string(opts.type, 'options.type');\n\tassert.optionalString(opts.comment, 'options.comment');\n\n\tvar algInfo = algs.info[opts.type];\n\tif (typeof (algInfo) !== 'object')\n\t\tthrow (new InvalidAlgorithmError(opts.type));\n\n\tvar partLookup = {};\n\tfor (var i = 0; i < opts.parts.length; ++i) {\n\t\tvar part = opts.parts[i];\n\t\tpartLookup[part.name] = part;\n\t}\n\n\tthis.type = opts.type;\n\tthis.parts = opts.parts;\n\tthis.part = partLookup;\n\tthis.comment = undefined;\n\tthis.source = opts.source;\n\n\t/* for speeding up hashing/fingerprint operations */\n\tthis._rfc4253Cache = opts._rfc4253Cache;\n\tthis._hashCache = {};\n\n\tvar sz;\n\tthis.curve = undefined;\n\tif (this.type === 'ecdsa') {\n\t\tvar curve = this.part.curve.data.toString();\n\t\tthis.curve = curve;\n\t\tsz = algs.curves[curve].size;\n\t} else if (this.type === 'ed25519' || this.type === 'curve25519') {\n\t\tsz = 256;\n\t\tthis.curve = 'curve25519';\n\t} else {\n\t\tvar szPart = this.part[algInfo.sizePart];\n\t\tsz = szPart.data.length;\n\t\tsz = sz * 8 - utils.countZeros(szPart.data);\n\t}\n\tthis.size = sz;\n}\n\nKey.formats = formats;\n\nKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'ssh';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\tif (format === 'rfc4253') {\n\t\tif (this._rfc4253Cache === undefined)\n\t\t\tthis._rfc4253Cache = formats['rfc4253'].write(this);\n\t\treturn (this._rfc4253Cache);\n\t}\n\n\treturn (formats[format].write(this, options));\n};\n\nKey.prototype.toString = function (format, options) {\n\treturn (this.toBuffer(format, options).toString());\n};\n\nKey.prototype.hash = function (algo, type) {\n\tassert.string(algo, 'algorithm');\n\tassert.optionalString(type, 'type');\n\tif (type === undefined)\n\t\ttype = 'ssh';\n\talgo = algo.toLowerCase();\n\tif (algs.hashAlgs[algo] === undefined)\n\t\tthrow (new InvalidAlgorithmError(algo));\n\n\tvar cacheKey = algo + '||' + type;\n\tif (this._hashCache[cacheKey])\n\t\treturn (this._hashCache[cacheKey]);\n\n\tvar buf;\n\tif (type === 'ssh') {\n\t\tbuf = this.toBuffer('rfc4253');\n\t} else if (type === 'spki') {\n\t\tbuf = formats.pkcs8.pkcs8ToBuffer(this);\n\t} else {\n\t\tthrow (new Error('Hash type ' + type + ' not supported'));\n\t}\n\tvar hash = crypto.createHash(algo).update(buf).digest();\n\tthis._hashCache[cacheKey] = hash;\n\treturn (hash);\n};\n\nKey.prototype.fingerprint = function (algo, type) {\n\tif (algo === undefined)\n\t\talgo = 'sha256';\n\tif (type === undefined)\n\t\ttype = 'ssh';\n\tassert.string(algo, 'algorithm');\n\tassert.string(type, 'type');\n\tvar opts = {\n\t\ttype: 'key',\n\t\thash: this.hash(algo, type),\n\t\talgorithm: algo,\n\t\thashType: type\n\t};\n\treturn (new Fingerprint(opts));\n};\n\nKey.prototype.defaultHashAlgorithm = function () {\n\tvar hashAlgo = 'sha1';\n\tif (this.type === 'rsa')\n\t\thashAlgo = 'sha256';\n\tif (this.type === 'dsa' && this.size > 1024)\n\t\thashAlgo = 'sha256';\n\tif (this.type === 'ed25519')\n\t\thashAlgo = 'sha512';\n\tif (this.type === 'ecdsa') {\n\t\tif (this.size <= 256)\n\t\t\thashAlgo = 'sha256';\n\t\telse if (this.size <= 384)\n\t\t\thashAlgo = 'sha384';\n\t\telse\n\t\t\thashAlgo = 'sha512';\n\t}\n\treturn (hashAlgo);\n};\n\nKey.prototype.createVerify = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Verifier(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createVerify(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createVerify(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldVerify = v.verify.bind(v);\n\tvar key = this.toBuffer('pkcs8');\n\tvar curve = this.curve;\n\tvar self = this;\n\tv.verify = function (signature, fmt) {\n\t\tif (Signature.isSignature(signature, [2, 0])) {\n\t\t\tif (signature.type !== self.type)\n\t\t\t\treturn (false);\n\t\t\tif (signature.hashAlgorithm &&\n\t\t\t    signature.hashAlgorithm !== hashAlgo)\n\t\t\t\treturn (false);\n\t\t\tif (signature.curve && self.type === 'ecdsa' &&\n\t\t\t    signature.curve !== curve)\n\t\t\t\treturn (false);\n\t\t\treturn (oldVerify(key, signature.toBuffer('asn1')));\n\n\t\t} else if (typeof (signature) === 'string' ||\n\t\t    Buffer.isBuffer(signature)) {\n\t\t\treturn (oldVerify(key, signature, fmt));\n\n\t\t/*\n\t\t * Avoid doing this on valid arguments, walking the prototype\n\t\t * chain can be quite slow.\n\t\t */\n\t\t} else if (Signature.isSignature(signature, [1, 0])) {\n\t\t\tthrow (new Error('signature was created by too old ' +\n\t\t\t    'a version of sshpk and cannot be verified'));\n\n\t\t} else {\n\t\t\tthrow (new TypeError('signature must be a string, ' +\n\t\t\t    'Buffer, or Signature object'));\n\t\t}\n\t};\n\treturn (v);\n};\n\nKey.prototype.createDiffieHellman = function () {\n\tif (this.type === 'rsa')\n\t\tthrow (new Error('RSA keys do not support Diffie-Hellman'));\n\n\treturn (new DiffieHellman(this));\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\n\nKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tif (k instanceof PrivateKey)\n\t\t\tk = k.toPublic();\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nKey.isKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Key, ver));\n};\n\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n * [1,7] -- spki hash types\n */\nKey.prototype._sshpkApiVersion = [1, 7];\n\nKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toBuffer);\n\tassert.func(obj.fingerprint);\n\tif (obj.createDH)\n\t\treturn ([1, 4]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 3]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 2]);\n\tif (obj.formats['pkcs1'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}