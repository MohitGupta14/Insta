{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof pubkey === 'string' || Buffer.isBuffer(pubkey)) pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type) return false;\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return v.verify(parsedSignature.params.signature, 'base64');\n  },\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac') return false;\n    var hashAlg = alg[1].toUpperCase();\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof h1 === 'string') return h1 === h2;\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals) return h1.toString('binary') === h2.toString('binary');\n    return h1.equals(h2);\n  }\n};","map":{"version":3,"names":["assert","require","crypto","sshpk","utils","HASH_ALGOS","PK_ALGOS","InvalidAlgorithmError","HttpSignatureError","validateAlgorithm","module","exports","verifySignature","parsedSignature","pubkey","object","Buffer","isBuffer","parseKey","ok","Key","isKey","alg","algorithm","type","v","createVerify","update","signingString","verify","params","signature","verifyHMAC","secret","string","hashAlg","toUpperCase","hmac","createHmac","h1","digest","h2","equals","toString"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/http-signature/lib/verify.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}