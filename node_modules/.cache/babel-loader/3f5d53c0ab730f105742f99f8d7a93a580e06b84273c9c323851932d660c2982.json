{"ast":null,"code":"// Copyright 2016 Joyent, Inc.\n\nvar x509 = require('./x509');\nmodule.exports = {\n  read: read,\n  verify: x509.verify,\n  sign: x509.sign,\n  write: write\n};\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\nfunction read(buf, options) {\n  if (typeof buf !== 'string') {\n    assert.buffer(buf, 'buf');\n    buf = buf.toString('ascii');\n  }\n  var lines = buf.trim().split(/[\\r\\n]+/g);\n  var m;\n  var si = -1;\n  while (!m && si < lines.length) {\n    m = lines[++si].match( /*JSSTYLED*/\n    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n  }\n  assert.ok(m, 'invalid PEM header');\n  var m2;\n  var ei = lines.length;\n  while (!m2 && ei > 0) {\n    m2 = lines[--ei].match( /*JSSTYLED*/\n    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n  }\n  assert.ok(m2, 'invalid PEM footer');\n  lines = lines.slice(si, ei + 1);\n  var headers = {};\n  while (true) {\n    lines = lines.slice(1);\n    m = lines[0].match( /*JSSTYLED*/\n    /^([A-Za-z0-9-]+): (.+)$/);\n    if (!m) break;\n    headers[m[1].toLowerCase()] = m[2];\n  }\n\n  /* Chop off the first and last lines */\n  lines = lines.slice(0, -1).join('');\n  buf = Buffer.from(lines, 'base64');\n  return x509.read(buf, options);\n}\nfunction write(cert, options) {\n  var dbuf = x509.write(cert, options);\n  var header = 'CERTIFICATE';\n  var tmp = dbuf.toString('base64');\n  var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n  var buf = Buffer.alloc(len);\n  var o = 0;\n  o += buf.write('-----BEGIN ' + header + '-----\\n', o);\n  for (var i = 0; i < tmp.length;) {\n    var limit = i + 64;\n    if (limit > tmp.length) limit = tmp.length;\n    o += buf.write(tmp.slice(i, limit), o);\n    buf[o++] = 10;\n    i = limit;\n  }\n  o += buf.write('-----END ' + header + '-----\\n', o);\n  return buf.slice(0, o);\n}","map":{"version":3,"names":["x509","require","module","exports","read","verify","sign","write","assert","asn1","Buffer","algs","utils","Key","PrivateKey","pem","Identity","Signature","Certificate","buf","options","buffer","toString","lines","trim","split","m","si","length","match","ok","m2","ei","slice","headers","toLowerCase","join","from","cert","dbuf","header","tmp","len","alloc","o","i","limit"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/formats/x509-pem.js"],"sourcesContent":["// Copyright 2016 Joyent, Inc.\n\nvar x509 = require('./x509');\n\nmodule.exports = {\n\tread: read,\n\tverify: x509.verify,\n\tsign: x509.sign,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split(/[\\r\\n]+/g);\n\n\tvar m;\n\tvar si = -1;\n\twhile (!m && si < lines.length) {\n\t\tm = lines[++si].match(/*JSSTYLED*/\n\t\t    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n\t}\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2;\n\tvar ei = lines.length;\n\twhile (!m2 && ei > 0) {\n\t\tm2 = lines[--ei].match(/*JSSTYLED*/\n\t\t    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n\t}\n\tassert.ok(m2, 'invalid PEM footer');\n\n\tlines = lines.slice(si, ei + 1);\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = Buffer.from(lines, 'base64');\n\n\treturn (x509.read(buf, options));\n}\n\nfunction write(cert, options) {\n\tvar dbuf = x509.write(cert, options);\n\n\tvar header = 'CERTIFICATE';\n\tvar tmp = dbuf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}