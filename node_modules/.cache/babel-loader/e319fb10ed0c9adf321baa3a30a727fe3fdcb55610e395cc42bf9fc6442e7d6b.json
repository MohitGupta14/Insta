{"ast":null,"code":"'use strict';\n\nfunction formatHostname(hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase();\n}\nfunction parseNoProxyZone(zone) {\n  zone = zone.trim().toLowerCase();\n  var zoneParts = zone.split(':', 2);\n  var zoneHost = formatHostname(zoneParts[0]);\n  var zonePort = zoneParts[1];\n  var hasPort = zone.indexOf(':') > -1;\n  return {\n    hostname: zoneHost,\n    port: zonePort,\n    hasPort: hasPort\n  };\n}\nfunction uriInNoProxy(uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80');\n  var hostname = formatHostname(uri.hostname);\n  var noProxyList = noProxy.split(',');\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname);\n    var hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched;\n    }\n    return hostnameMatched;\n  });\n}\nfunction getProxyFromURI(uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || '';\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null;\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null;\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY || process.env.http_proxy || null;\n  }\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null;\n}\nmodule.exports = getProxyFromURI;","map":{"version":3,"names":["formatHostname","hostname","replace","toLowerCase","parseNoProxyZone","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","noProxyZone","isMatchedAt","hostnameMatched","length","getProxyFromURI","process","env","NO_PROXY","no_proxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","module","exports"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/request/lib/getProxyFromURI.js"],"sourcesContent":["'use strict'\n\nfunction formatHostname (hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone (zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n  var zoneHost = formatHostname(zoneParts[0])\n  var zonePort = zoneParts[1]\n  var hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy (uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  var hostname = formatHostname(uri.hostname)\n  var noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    var hostnameMatched = (\n      isMatchedAt > -1 &&\n        (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n    )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI (uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY ||\n      process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,cAAcA,CAAEC,QAAQ,EAAE;EACjC;EACA,OAAOA,QAAQ,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,WAAW,EAAE;AACpD;AAEA,SAASC,gBAAgBA,CAAEC,IAAI,EAAE;EAC/BA,IAAI,GAAGA,IAAI,CAACC,IAAI,EAAE,CAACH,WAAW,EAAE;EAEhC,IAAII,SAAS,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;EAClC,IAAIC,QAAQ,GAAGT,cAAc,CAACO,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3C,IAAIG,QAAQ,GAAGH,SAAS,CAAC,CAAC,CAAC;EAC3B,IAAII,OAAO,GAAGN,IAAI,CAACO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAEpC,OAAO;IAACX,QAAQ,EAAEQ,QAAQ;IAAEI,IAAI,EAAEH,QAAQ;IAAEC,OAAO,EAAEA;EAAO,CAAC;AAC/D;AAEA,SAASG,YAAYA,CAAEC,GAAG,EAAEC,OAAO,EAAE;EACnC,IAAIH,IAAI,GAAGE,GAAG,CAACF,IAAI,KAAKE,GAAG,CAACE,QAAQ,KAAK,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC;EACjE,IAAIhB,QAAQ,GAAGD,cAAc,CAACe,GAAG,CAACd,QAAQ,CAAC;EAC3C,IAAIiB,WAAW,GAAGF,OAAO,CAACR,KAAK,CAAC,GAAG,CAAC;;EAEpC;EACA,OAAOU,WAAW,CAACC,GAAG,CAACf,gBAAgB,CAAC,CAACgB,IAAI,CAAC,UAAUC,WAAW,EAAE;IACnE,IAAIC,WAAW,GAAGrB,QAAQ,CAACW,OAAO,CAACS,WAAW,CAACpB,QAAQ,CAAC;IACxD,IAAIsB,eAAe,GACjBD,WAAW,GAAG,CAAC,CAAC,IACbA,WAAW,KAAKrB,QAAQ,CAACuB,MAAM,GAAGH,WAAW,CAACpB,QAAQ,CAACuB,MAC3D;IAED,IAAIH,WAAW,CAACV,OAAO,EAAE;MACvB,OAAQE,IAAI,KAAKQ,WAAW,CAACR,IAAI,IAAKU,eAAe;IACvD;IAEA,OAAOA,eAAe;EACxB,CAAC,CAAC;AACJ;AAEA,SAASE,eAAeA,CAAEV,GAAG,EAAE;EAC7B;EACA;EACA;;EAEA,IAAIC,OAAO,GAAGU,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAIF,OAAO,CAACC,GAAG,CAACE,QAAQ,IAAI,EAAE;;EAEhE;;EAEA,IAAIb,OAAO,KAAK,GAAG,EAAE;IACnB,OAAO,IAAI;EACb;;EAEA;;EAEA,IAAIA,OAAO,KAAK,EAAE,IAAIF,YAAY,CAACC,GAAG,EAAEC,OAAO,CAAC,EAAE;IAChD,OAAO,IAAI;EACb;;EAEA;;EAEA,IAAID,GAAG,CAACE,QAAQ,KAAK,OAAO,EAAE;IAC5B,OAAOS,OAAO,CAACC,GAAG,CAACG,UAAU,IAC3BJ,OAAO,CAACC,GAAG,CAACI,UAAU,IAAI,IAAI;EAClC;EAEA,IAAIhB,GAAG,CAACE,QAAQ,KAAK,QAAQ,EAAE;IAC7B,OAAOS,OAAO,CAACC,GAAG,CAACK,WAAW,IAC5BN,OAAO,CAACC,GAAG,CAACM,WAAW,IACvBP,OAAO,CAACC,GAAG,CAACG,UAAU,IACtBJ,OAAO,CAACC,GAAG,CAACI,UAAU,IAAI,IAAI;EAClC;;EAEA;EACA;;EAEA,OAAO,IAAI;AACb;AAEAG,MAAM,CAACC,OAAO,GAAGV,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}