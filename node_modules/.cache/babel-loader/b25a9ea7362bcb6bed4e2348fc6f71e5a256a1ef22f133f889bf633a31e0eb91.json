{"ast":null,"code":"'use strict';\n\nvar url = require('url'),\n  equal = require('fast-deep-equal'),\n  util = require('./util'),\n  SchemaObject = require('./schema_obj'),\n  traverse = require('json-schema-traverse');\nmodule.exports = resolve;\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];else return resolve.call(this, compile, root, refVal);\n  }\n  refVal = refVal || this._schemas[ref];\n  if (refVal instanceof SchemaObject) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);\n  }\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n  if (schema instanceof SchemaObject) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema !== undefined) {\n    v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);\n  }\n  return v;\n}\n\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = url.parse(ref, false, true),\n    refPath = _getFullPath(p),\n    baseId = getFullPath(this._getId(root.schema));\n  if (refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof SchemaObject) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n      if (refVal instanceof SchemaObject) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref)) return {\n          schema: refVal,\n          root: root,\n          baseId: baseId\n        };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n    if (!root.schema) return;\n    baseId = getFullPath(this._getId(root.schema));\n  }\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n\n/* @this Ajv */\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n    var id = this._getId(schema);\n    if (id) baseId = resolveUrl(baseId, id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.hash = parsedRef.hash || '';\n  if (parsedRef.hash.slice(0, 2) != '#/') return;\n  var parts = parsedRef.hash.split('/');\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (schema === undefined) break;\n      var id;\n      if (!PREVENT_SCOPE_CHANGE[part]) {\n        id = this._getId(schema);\n        if (id) baseId = resolveUrl(baseId, id);\n        if (schema.$ref) {\n          var $ref = resolveUrl(baseId, schema.$ref);\n          var res = resolveSchema.call(this, root, $ref);\n          if (res) {\n            schema = res.schema;\n            root = res.root;\n            baseId = res.baseId;\n          }\n        }\n      }\n    }\n  }\n  if (schema !== undefined && schema !== root.schema) return {\n    schema: schema,\n    root: root,\n    baseId: baseId\n  };\n}\nvar SIMPLE_INLINED = util.toHash(['type', 'format', 'pattern', 'maxLength', 'minLength', 'maxProperties', 'minProperties', 'maxItems', 'minItems', 'maximum', 'minimum', 'uniqueItems', 'multipleOf', 'required', 'enum']);\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);else if (limit) return countKeys(schema) <= limit;\n}\nfunction checkNoRef(schema) {\n  var item;\n  if (Array.isArray(schema)) {\n    for (var i = 0; i < schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n  return true;\n}\nfunction countKeys(schema) {\n  var count = 0,\n    item;\n  if (Array.isArray(schema)) {\n    for (var i = 0; i < schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n  return count;\n}\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = url.parse(id, false, true);\n  return _getFullPath(p);\n}\nfunction _getFullPath(p) {\n  var protocolSeparator = p.protocol || p.href.slice(0, 2) == '//' ? '//' : '';\n  return (p.protocol || '') + protocolSeparator + (p.host || '') + (p.path || '') + '#';\n}\nvar TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return url.resolve(baseId, id);\n}\n\n/* @this Ajv */\nfunction resolveIds(schema) {\n  var schemaId = normalizeId(this._getId(schema));\n  var baseIds = {\n    '': schemaId\n  };\n  var fullPaths = {\n    '': getFullPath(schemaId, false)\n  };\n  var localRefs = {};\n  var self = this;\n  traverse(schema, {\n    allKeys: true\n  }, function (sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (jsonPtr === '') return;\n    var id = self._getId(sch);\n    var baseId = baseIds[parentJsonPtr];\n    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\n    if (keyIndex !== undefined) fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\n    if (typeof id == 'string') {\n      id = baseId = normalizeId(baseId ? url.resolve(baseId, id) : id);\n      var refVal = self._refs[id];\n      if (typeof refVal == 'string') refVal = self._refs[refVal];\n      if (refVal && refVal.schema) {\n        if (!equal(sch, refVal.schema)) throw new Error('id \"' + id + '\" resolves to more than one schema');\n      } else if (id != normalizeId(fullPath)) {\n        if (id[0] == '#') {\n          if (localRefs[id] && !equal(sch, localRefs[id])) throw new Error('id \"' + id + '\" resolves to more than one schema');\n          localRefs[id] = sch;\n        } else {\n          self._refs[id] = fullPath;\n        }\n      }\n    }\n    baseIds[jsonPtr] = baseId;\n    fullPaths[jsonPtr] = fullPath;\n  });\n  return localRefs;\n}","map":{"version":3,"names":["url","require","equal","util","SchemaObject","traverse","module","exports","resolve","normalizeId","fullPath","getFullPath","resolveUrl","ids","resolveIds","inlineRef","schema","resolveSchema","compile","root","ref","refVal","_refs","call","_schemas","_opts","inlineRefs","validate","_compile","res","v","baseId","undefined","p","parse","refPath","_getFullPath","_getId","id","resolveRecursive","getJsonPointer","parsedRef","PREVENT_SCOPE_CHANGE","toHash","hash","slice","parts","split","i","length","part","unescapeFragment","$ref","SIMPLE_INLINED","limit","checkNoRef","countKeys","item","Array","isArray","key","count","Infinity","normalize","protocolSeparator","protocol","href","host","path","TRAILING_SLASH_HASH","replace","schemaId","baseIds","fullPaths","localRefs","self","allKeys","sch","jsonPtr","rootSchema","parentJsonPtr","parentKeyword","parentSchema","keyIndex","escapeFragment","Error"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/har-validator/node_modules/ajv/lib/compile/resolve.js"],"sourcesContent":["'use strict';\n\nvar url = require('url')\n  , equal = require('fast-deep-equal')\n  , util = require('./util')\n  , SchemaObject = require('./schema_obj')\n  , traverse = require('json-schema-traverse');\n\nmodule.exports = resolve;\n\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];\n    else return resolve.call(this, compile, root, refVal);\n  }\n\n  refVal = refVal || this._schemas[ref];\n  if (refVal instanceof SchemaObject) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs)\n            ? refVal.schema\n            : refVal.validate || this._compile(refVal);\n  }\n\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n\n  if (schema instanceof SchemaObject) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema !== undefined) {\n    v = inlineRef(schema, this._opts.inlineRefs)\n        ? schema\n        : compile.call(this, schema, root, undefined, baseId);\n  }\n\n  return v;\n}\n\n\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = url.parse(ref, false, true)\n    , refPath = _getFullPath(p)\n    , baseId = getFullPath(this._getId(root.schema));\n  if (refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof SchemaObject) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n      if (refVal instanceof SchemaObject) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref))\n          return { schema: refVal, root: root, baseId: baseId };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n    if (!root.schema) return;\n    baseId = getFullPath(this._getId(root.schema));\n  }\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n\n\n/* @this Ajv */\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n    var id = this._getId(schema);\n    if (id) baseId = resolveUrl(baseId, id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\n\n\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.hash = parsedRef.hash || '';\n  if (parsedRef.hash.slice(0,2) != '#/') return;\n  var parts = parsedRef.hash.split('/');\n\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (schema === undefined) break;\n      var id;\n      if (!PREVENT_SCOPE_CHANGE[part]) {\n        id = this._getId(schema);\n        if (id) baseId = resolveUrl(baseId, id);\n        if (schema.$ref) {\n          var $ref = resolveUrl(baseId, schema.$ref);\n          var res = resolveSchema.call(this, root, $ref);\n          if (res) {\n            schema = res.schema;\n            root = res.root;\n            baseId = res.baseId;\n          }\n        }\n      }\n    }\n  }\n  if (schema !== undefined && schema !== root.schema)\n    return { schema: schema, root: root, baseId: baseId };\n}\n\n\nvar SIMPLE_INLINED = util.toHash([\n  'type', 'format', 'pattern',\n  'maxLength', 'minLength',\n  'maxProperties', 'minProperties',\n  'maxItems', 'minItems',\n  'maximum', 'minimum',\n  'uniqueItems', 'multipleOf',\n  'required', 'enum'\n]);\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);\n  else if (limit) return countKeys(schema) <= limit;\n}\n\n\nfunction checkNoRef(schema) {\n  var item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n  return true;\n}\n\n\nfunction countKeys(schema) {\n  var count = 0, item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n  return count;\n}\n\n\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = url.parse(id, false, true);\n  return _getFullPath(p);\n}\n\n\nfunction _getFullPath(p) {\n  var protocolSeparator = p.protocol || p.href.slice(0,2) == '//' ? '//' : '';\n  return (p.protocol||'') + protocolSeparator + (p.host||'') + (p.path||'')  + '#';\n}\n\n\nvar TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\n\n\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return url.resolve(baseId, id);\n}\n\n\n/* @this Ajv */\nfunction resolveIds(schema) {\n  var schemaId = normalizeId(this._getId(schema));\n  var baseIds = {'': schemaId};\n  var fullPaths = {'': getFullPath(schemaId, false)};\n  var localRefs = {};\n  var self = this;\n\n  traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (jsonPtr === '') return;\n    var id = self._getId(sch);\n    var baseId = baseIds[parentJsonPtr];\n    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\n    if (keyIndex !== undefined)\n      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\n\n    if (typeof id == 'string') {\n      id = baseId = normalizeId(baseId ? url.resolve(baseId, id) : id);\n\n      var refVal = self._refs[id];\n      if (typeof refVal == 'string') refVal = self._refs[refVal];\n      if (refVal && refVal.schema) {\n        if (!equal(sch, refVal.schema))\n          throw new Error('id \"' + id + '\" resolves to more than one schema');\n      } else if (id != normalizeId(fullPath)) {\n        if (id[0] == '#') {\n          if (localRefs[id] && !equal(sch, localRefs[id]))\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\n          localRefs[id] = sch;\n        } else {\n          self._refs[id] = fullPath;\n        }\n      }\n    }\n    baseIds[jsonPtr] = baseId;\n    fullPaths[jsonPtr] = fullPath;\n  });\n\n  return localRefs;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}