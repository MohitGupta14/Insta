{"ast":null,"code":"// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar dhe = require('./dhe');\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat = require('./ed-compat');\nvar nacl = require('tweetnacl');\nvar Key = require('./key');\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['ssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\nformats['putty'] = require('./formats/putty');\nfunction PrivateKey(opts) {\n  assert.object(opts, 'options');\n  Key.call(this, opts);\n  this._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\nPrivateKey.formats = formats;\nPrivateKey.prototype.toBuffer = function (format, options) {\n  if (format === undefined) format = 'pkcs1';\n  assert.string(format, 'format');\n  assert.object(formats[format], 'formats[format]');\n  assert.optionalObject(options, 'options');\n  return formats[format].write(this, options);\n};\nPrivateKey.prototype.hash = function (algo, type) {\n  return this.toPublic().hash(algo, type);\n};\nPrivateKey.prototype.fingerprint = function (algo, type) {\n  return this.toPublic().fingerprint(algo, type);\n};\nPrivateKey.prototype.toPublic = function () {\n  if (this._pubCache) return this._pubCache;\n  var algInfo = algs.info[this.type];\n  var pubParts = [];\n  for (var i = 0; i < algInfo.parts.length; ++i) {\n    var p = algInfo.parts[i];\n    pubParts.push(this.part[p]);\n  }\n  this._pubCache = new Key({\n    type: this.type,\n    source: this,\n    parts: pubParts\n  });\n  if (this.comment) this._pubCache.comment = this.comment;\n  return this._pubCache;\n};\nPrivateKey.prototype.derive = function (newType) {\n  assert.string(newType, 'type');\n  var priv, pub, pair;\n  if (this.type === 'ed25519' && newType === 'curve25519') {\n    priv = this.part.k.data;\n    if (priv[0] === 0x00) priv = priv.slice(1);\n    pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n    pub = Buffer.from(pair.publicKey);\n    return new PrivateKey({\n      type: 'curve25519',\n      parts: [{\n        name: 'A',\n        data: utils.mpNormalize(pub)\n      }, {\n        name: 'k',\n        data: utils.mpNormalize(priv)\n      }]\n    });\n  } else if (this.type === 'curve25519' && newType === 'ed25519') {\n    priv = this.part.k.data;\n    if (priv[0] === 0x00) priv = priv.slice(1);\n    pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n    pub = Buffer.from(pair.publicKey);\n    return new PrivateKey({\n      type: 'ed25519',\n      parts: [{\n        name: 'A',\n        data: utils.mpNormalize(pub)\n      }, {\n        name: 'k',\n        data: utils.mpNormalize(priv)\n      }]\n    });\n  }\n  throw new Error('Key derivation not supported from ' + this.type + ' to ' + newType);\n};\nPrivateKey.prototype.createVerify = function (hashAlgo) {\n  return this.toPublic().createVerify(hashAlgo);\n};\nPrivateKey.prototype.createSign = function (hashAlgo) {\n  if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n  assert.string(hashAlgo, 'hash algorithm');\n\n  /* ED25519 is not supported by OpenSSL, use a javascript impl. */\n  if (this.type === 'ed25519' && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);\n  if (this.type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');\n  var v, nm, err;\n  try {\n    nm = hashAlgo.toUpperCase();\n    v = crypto.createSign(nm);\n  } catch (e) {\n    err = e;\n  }\n  if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n    nm = 'RSA-';\n    nm += hashAlgo.toUpperCase();\n    v = crypto.createSign(nm);\n  }\n  assert.ok(v, 'failed to create verifier');\n  var oldSign = v.sign.bind(v);\n  var key = this.toBuffer('pkcs1');\n  var type = this.type;\n  var curve = this.curve;\n  v.sign = function () {\n    var sig = oldSign(key);\n    if (typeof sig === 'string') sig = Buffer.from(sig, 'binary');\n    sig = Signature.parse(sig, type, 'asn1');\n    sig.hashAlgorithm = hashAlgo;\n    sig.curve = curve;\n    return sig;\n  };\n  return v;\n};\nPrivateKey.parse = function (data, format, options) {\n  if (typeof data !== 'string') assert.buffer(data, 'data');\n  if (format === undefined) format = 'auto';\n  assert.string(format, 'format');\n  if (typeof options === 'string') options = {\n    filename: options\n  };\n  assert.optionalObject(options, 'options');\n  if (options === undefined) options = {};\n  assert.optionalString(options.filename, 'options.filename');\n  if (options.filename === undefined) options.filename = '(unnamed)';\n  assert.object(formats[format], 'formats[format]');\n  try {\n    var k = formats[format].read(data, options);\n    assert.ok(k instanceof PrivateKey, 'key is not a private key');\n    if (!k.comment) k.comment = options.filename;\n    return k;\n  } catch (e) {\n    if (e.name === 'KeyEncryptedError') throw e;\n    throw new KeyParseError(options.filename, format, e);\n  }\n};\nPrivateKey.isPrivateKey = function (obj, ver) {\n  return utils.isCompatible(obj, PrivateKey, ver);\n};\nPrivateKey.generate = function (type, options) {\n  if (options === undefined) options = {};\n  assert.object(options, 'options');\n  switch (type) {\n    case 'ecdsa':\n      if (options.curve === undefined) options.curve = 'nistp256';\n      assert.string(options.curve, 'options.curve');\n      return generateECDSA(options.curve);\n    case 'ed25519':\n      return generateED25519();\n    default:\n      throw new Error('Key generation not supported with key ' + 'type \"' + type + '\"');\n  }\n};\n\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */\nPrivateKey.prototype._sshpkApiVersion = [1, 6];\nPrivateKey._oldVersionDetect = function (obj) {\n  assert.func(obj.toPublic);\n  assert.func(obj.createSign);\n  if (obj.derive) return [1, 3];\n  if (obj.defaultHashAlgorithm) return [1, 2];\n  if (obj.formats['auto']) return [1, 1];\n  return [1, 0];\n};","map":{"version":3,"names":["module","exports","PrivateKey","assert","require","Buffer","algs","crypto","Fingerprint","Signature","errs","util","utils","dhe","generateECDSA","generateED25519","edCompat","nacl","Key","InvalidAlgorithmError","KeyParseError","KeyEncryptedError","formats","opts","object","call","_pubCache","undefined","inherits","prototype","toBuffer","format","options","string","optionalObject","write","hash","algo","type","toPublic","fingerprint","algInfo","info","pubParts","i","parts","length","p","push","part","source","comment","derive","newType","priv","pub","pair","k","data","slice","box","keyPair","fromSecretKey","Uint8Array","from","publicKey","name","mpNormalize","sign","fromSeed","Error","createVerify","hashAlgo","createSign","defaultHashAlgorithm","Signer","v","nm","err","toUpperCase","e","message","match","ok","oldSign","bind","key","curve","sig","parse","hashAlgorithm","buffer","filename","optionalString","read","isPrivateKey","obj","ver","isCompatible","generate","_sshpkApiVersion","_oldVersionDetect","func"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/private-key.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar dhe = require('./dhe');\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat = require('./ed-compat');\nvar nacl = require('tweetnacl');\n\nvar Key = require('./key');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['ssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\nformats['putty'] = require('./formats/putty');\n\nfunction PrivateKey(opts) {\n\tassert.object(opts, 'options');\n\tKey.call(this, opts);\n\n\tthis._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\n\nPrivateKey.formats = formats;\n\nPrivateKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pkcs1';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nPrivateKey.prototype.hash = function (algo, type) {\n\treturn (this.toPublic().hash(algo, type));\n};\n\nPrivateKey.prototype.fingerprint = function (algo, type) {\n\treturn (this.toPublic().fingerprint(algo, type));\n};\n\nPrivateKey.prototype.toPublic = function () {\n\tif (this._pubCache)\n\t\treturn (this._pubCache);\n\n\tvar algInfo = algs.info[this.type];\n\tvar pubParts = [];\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = algInfo.parts[i];\n\t\tpubParts.push(this.part[p]);\n\t}\n\n\tthis._pubCache = new Key({\n\t\ttype: this.type,\n\t\tsource: this,\n\t\tparts: pubParts\n\t});\n\tif (this.comment)\n\t\tthis._pubCache.comment = this.comment;\n\treturn (this._pubCache);\n};\n\nPrivateKey.prototype.derive = function (newType) {\n\tassert.string(newType, 'type');\n\tvar priv, pub, pair;\n\n\tif (this.type === 'ed25519' && newType === 'curve25519') {\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n\t\tpub = Buffer.from(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t} else if (this.type === 'curve25519' && newType === 'ed25519') {\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n\t\tpub = Buffer.from(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'ed25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t}\n\tthrow (new Error('Key derivation not supported from ' + this.type +\n\t    ' to ' + newType));\n};\n\nPrivateKey.prototype.createVerify = function (hashAlgo) {\n\treturn (this.toPublic().createVerify(hashAlgo));\n};\n\nPrivateKey.prototype.createSign = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Signer(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldSign = v.sign.bind(v);\n\tvar key = this.toBuffer('pkcs1');\n\tvar type = this.type;\n\tvar curve = this.curve;\n\tv.sign = function () {\n\t\tvar sig = oldSign(key);\n\t\tif (typeof (sig) === 'string')\n\t\t\tsig = Buffer.from(sig, 'binary');\n\t\tsig = Signature.parse(sig, type, 'asn1');\n\t\tsig.hashAlgorithm = hashAlgo;\n\t\tsig.curve = curve;\n\t\treturn (sig);\n\t};\n\treturn (v);\n};\n\nPrivateKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tassert.ok(k instanceof PrivateKey, 'key is not a private key');\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nPrivateKey.isPrivateKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, PrivateKey, ver));\n};\n\nPrivateKey.generate = function (type, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.object(options, 'options');\n\n\tswitch (type) {\n\tcase 'ecdsa':\n\t\tif (options.curve === undefined)\n\t\t\toptions.curve = 'nistp256';\n\t\tassert.string(options.curve, 'options.curve');\n\t\treturn (generateECDSA(options.curve));\n\tcase 'ed25519':\n\t\treturn (generateED25519());\n\tdefault:\n\t\tthrow (new Error('Key generation not supported with key ' +\n\t\t    'type \"' + type + '\"'));\n\t}\n};\n\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */\nPrivateKey.prototype._sshpkApiVersion = [1, 6];\n\nPrivateKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toPublic);\n\tassert.func(obj.createSign);\n\tif (obj.derive)\n\t\treturn ([1, 3]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 2]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}