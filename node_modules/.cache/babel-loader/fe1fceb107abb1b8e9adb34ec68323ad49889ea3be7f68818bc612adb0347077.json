{"ast":null,"code":"// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = require('assert');\nvar Buffer = require('safer-buffer').Buffer;\nvar ASN1 = require('./types');\nvar errors = require('./errors');\n\n// --- Globals\n\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n\n// --- API\n\nfunction Reader(data) {\n  if (!data || !Buffer.isBuffer(data)) throw new TypeError('data must be a node Buffer');\n  this._buf = data;\n  this._size = data.length;\n\n  // These hold the \"current\" state\n  this._len = 0;\n  this._offset = 0;\n}\nObject.defineProperty(Reader.prototype, 'length', {\n  enumerable: true,\n  get: function () {\n    return this._len;\n  }\n});\nObject.defineProperty(Reader.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    return this._offset;\n  }\n});\nObject.defineProperty(Reader.prototype, 'remain', {\n  get: function () {\n    return this._size - this._offset;\n  }\n});\nObject.defineProperty(Reader.prototype, 'buffer', {\n  get: function () {\n    return this._buf.slice(this._offset);\n  }\n});\n\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */\nReader.prototype.readByte = function (peek) {\n  if (this._size - this._offset < 1) return null;\n  var b = this._buf[this._offset] & 0xff;\n  if (!peek) this._offset += 1;\n  return b;\n};\nReader.prototype.peek = function () {\n  return this.readByte(true);\n};\n\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */\nReader.prototype.readLength = function (offset) {\n  if (offset === undefined) offset = this._offset;\n  if (offset >= this._size) return null;\n  var lenB = this._buf[offset++] & 0xff;\n  if (lenB === null) return null;\n  if ((lenB & 0x80) === 0x80) {\n    lenB &= 0x7f;\n    if (lenB === 0) throw newInvalidAsn1Error('Indefinite length not supported');\n    if (lenB > 4) throw newInvalidAsn1Error('encoding too long');\n    if (this._size - offset < lenB) return null;\n    this._len = 0;\n    for (var i = 0; i < lenB; i++) this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n  } else {\n    // Wasn't a variable length\n    this._len = lenB;\n  }\n  return offset;\n};\n\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */\nReader.prototype.readSequence = function (tag) {\n  var seq = this.peek();\n  if (seq === null) return null;\n  if (tag !== undefined && tag !== seq) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + seq.toString(16));\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null) return null;\n  this._offset = o;\n  return seq;\n};\nReader.prototype.readInt = function () {\n  return this._readTag(ASN1.Integer);\n};\nReader.prototype.readBoolean = function () {\n  return this._readTag(ASN1.Boolean) === 0 ? false : true;\n};\nReader.prototype.readEnumeration = function () {\n  return this._readTag(ASN1.Enumeration);\n};\nReader.prototype.readString = function (tag, retbuf) {\n  if (!tag) tag = ASN1.OctetString;\n  var b = this.peek();\n  if (b === null) return null;\n  if (b !== tag) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));\n  var o = this.readLength(this._offset + 1); // stored in `length`\n\n  if (o === null) return null;\n  if (this.length > this._size - o) return null;\n  this._offset = o;\n  if (this.length === 0) return retbuf ? Buffer.alloc(0) : '';\n  var str = this._buf.slice(this._offset, this._offset + this.length);\n  this._offset += this.length;\n  return retbuf ? str : str.toString('utf8');\n};\nReader.prototype.readOID = function (tag) {\n  if (!tag) tag = ASN1.OID;\n  var b = this.readString(tag, true);\n  if (b === null) return null;\n  var values = [];\n  var value = 0;\n  for (var i = 0; i < b.length; i++) {\n    var byte = b[i] & 0xff;\n    value <<= 7;\n    value += byte & 0x7f;\n    if ((byte & 0x80) === 0) {\n      values.push(value);\n      value = 0;\n    }\n  }\n  value = values.shift();\n  values.unshift(value % 40);\n  values.unshift(value / 40 >> 0);\n  return values.join('.');\n};\nReader.prototype._readTag = function (tag) {\n  assert.ok(tag !== undefined);\n  var b = this.peek();\n  if (b === null) return null;\n  if (b !== tag) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null) return null;\n  if (this.length > 4) throw newInvalidAsn1Error('Integer too long: ' + this.length);\n  if (this.length > this._size - o) return null;\n  this._offset = o;\n  var fb = this._buf[this._offset];\n  var value = 0;\n  for (var i = 0; i < this.length; i++) {\n    value <<= 8;\n    value |= this._buf[this._offset++] & 0xff;\n  }\n  if ((fb & 0x80) === 0x80 && i !== 4) value -= 1 << i * 8;\n  return value >> 0;\n};\n\n// --- Exported API\n\nmodule.exports = Reader;","map":{"version":3,"names":["assert","require","Buffer","ASN1","errors","newInvalidAsn1Error","Reader","data","isBuffer","TypeError","_buf","_size","length","_len","_offset","Object","defineProperty","prototype","enumerable","get","slice","readByte","peek","b","readLength","offset","undefined","lenB","i","readSequence","tag","seq","toString","o","readInt","_readTag","Integer","readBoolean","Boolean","readEnumeration","Enumeration","readString","retbuf","OctetString","alloc","str","readOID","OID","values","value","byte","push","shift","unshift","join","ok","fb","module","exports"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/asn1/lib/ber/reader.js"],"sourcesContent":["// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = require('assert');\nvar Buffer = require('safer-buffer').Buffer;\n\nvar ASN1 = require('./types');\nvar errors = require('./errors');\n\n\n// --- Globals\n\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n\n\n\n// --- API\n\nfunction Reader(data) {\n  if (!data || !Buffer.isBuffer(data))\n    throw new TypeError('data must be a node Buffer');\n\n  this._buf = data;\n  this._size = data.length;\n\n  // These hold the \"current\" state\n  this._len = 0;\n  this._offset = 0;\n}\n\nObject.defineProperty(Reader.prototype, 'length', {\n  enumerable: true,\n  get: function () { return (this._len); }\n});\n\nObject.defineProperty(Reader.prototype, 'offset', {\n  enumerable: true,\n  get: function () { return (this._offset); }\n});\n\nObject.defineProperty(Reader.prototype, 'remain', {\n  get: function () { return (this._size - this._offset); }\n});\n\nObject.defineProperty(Reader.prototype, 'buffer', {\n  get: function () { return (this._buf.slice(this._offset)); }\n});\n\n\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */\nReader.prototype.readByte = function (peek) {\n  if (this._size - this._offset < 1)\n    return null;\n\n  var b = this._buf[this._offset] & 0xff;\n\n  if (!peek)\n    this._offset += 1;\n\n  return b;\n};\n\n\nReader.prototype.peek = function () {\n  return this.readByte(true);\n};\n\n\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */\nReader.prototype.readLength = function (offset) {\n  if (offset === undefined)\n    offset = this._offset;\n\n  if (offset >= this._size)\n    return null;\n\n  var lenB = this._buf[offset++] & 0xff;\n  if (lenB === null)\n    return null;\n\n  if ((lenB & 0x80) === 0x80) {\n    lenB &= 0x7f;\n\n    if (lenB === 0)\n      throw newInvalidAsn1Error('Indefinite length not supported');\n\n    if (lenB > 4)\n      throw newInvalidAsn1Error('encoding too long');\n\n    if (this._size - offset < lenB)\n      return null;\n\n    this._len = 0;\n    for (var i = 0; i < lenB; i++)\n      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n\n  } else {\n    // Wasn't a variable length\n    this._len = lenB;\n  }\n\n  return offset;\n};\n\n\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */\nReader.prototype.readSequence = function (tag) {\n  var seq = this.peek();\n  if (seq === null)\n    return null;\n  if (tag !== undefined && tag !== seq)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + seq.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null)\n    return null;\n\n  this._offset = o;\n  return seq;\n};\n\n\nReader.prototype.readInt = function () {\n  return this._readTag(ASN1.Integer);\n};\n\n\nReader.prototype.readBoolean = function () {\n  return (this._readTag(ASN1.Boolean) === 0 ? false : true);\n};\n\n\nReader.prototype.readEnumeration = function () {\n  return this._readTag(ASN1.Enumeration);\n};\n\n\nReader.prototype.readString = function (tag, retbuf) {\n  if (!tag)\n    tag = ASN1.OctetString;\n\n  var b = this.peek();\n  if (b === null)\n    return null;\n\n  if (b !== tag)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + b.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n\n  if (o === null)\n    return null;\n\n  if (this.length > this._size - o)\n    return null;\n\n  this._offset = o;\n\n  if (this.length === 0)\n    return retbuf ? Buffer.alloc(0) : '';\n\n  var str = this._buf.slice(this._offset, this._offset + this.length);\n  this._offset += this.length;\n\n  return retbuf ? str : str.toString('utf8');\n};\n\nReader.prototype.readOID = function (tag) {\n  if (!tag)\n    tag = ASN1.OID;\n\n  var b = this.readString(tag, true);\n  if (b === null)\n    return null;\n\n  var values = [];\n  var value = 0;\n\n  for (var i = 0; i < b.length; i++) {\n    var byte = b[i] & 0xff;\n\n    value <<= 7;\n    value += byte & 0x7f;\n    if ((byte & 0x80) === 0) {\n      values.push(value);\n      value = 0;\n    }\n  }\n\n  value = values.shift();\n  values.unshift(value % 40);\n  values.unshift((value / 40) >> 0);\n\n  return values.join('.');\n};\n\n\nReader.prototype._readTag = function (tag) {\n  assert.ok(tag !== undefined);\n\n  var b = this.peek();\n\n  if (b === null)\n    return null;\n\n  if (b !== tag)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + b.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null)\n    return null;\n\n  if (this.length > 4)\n    throw newInvalidAsn1Error('Integer too long: ' + this.length);\n\n  if (this.length > this._size - o)\n    return null;\n  this._offset = o;\n\n  var fb = this._buf[this._offset];\n  var value = 0;\n\n  for (var i = 0; i < this.length; i++) {\n    value <<= 8;\n    value |= (this._buf[this._offset++] & 0xff);\n  }\n\n  if ((fb & 0x80) === 0x80 && i !== 4)\n    value -= (1 << (i * 8));\n\n  return value >> 0;\n};\n\n\n\n// --- Exported API\n\nmodule.exports = Reader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}