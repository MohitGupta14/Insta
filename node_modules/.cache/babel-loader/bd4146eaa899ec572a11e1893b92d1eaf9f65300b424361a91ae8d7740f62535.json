{"ast":null,"code":"// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger;\nvar Barrett = BigInteger.prototype.Barrett;\n\n// ----------------\n// ECFieldElementFp\n\n// constructor\nfunction ECFieldElementFp(q, x) {\n  this.x = x;\n  // TODO if(x.compareTo(q) >= 0) error\n  this.q = q;\n}\nfunction feFpEquals(other) {\n  if (other == this) return true;\n  return this.q.equals(other.q) && this.x.equals(other.x);\n}\nfunction feFpToBigInteger() {\n  return this.x;\n}\nfunction feFpNegate() {\n  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\nfunction feFpAdd(b) {\n  return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSubtract(b) {\n  return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\nfunction feFpMultiply(b) {\n  return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSquare() {\n  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\nfunction feFpDivide(b) {\n  return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n\n// ----------------\n// ECPointFp\n\n// constructor\nfunction ECPointFp(curve, x, y, z) {\n  this.curve = curve;\n  this.x = x;\n  this.y = y;\n  // Projective coordinates: either zinv == null or z * zinv == 1\n  // z and zinv are just BigIntegers, not fieldElements\n  if (z == null) {\n    this.z = BigInteger.ONE;\n  } else {\n    this.z = z;\n  }\n  this.zinv = null;\n  //TODO: compression flag\n}\n\nfunction pointFpGetX() {\n  if (this.zinv == null) {\n    this.zinv = this.z.modInverse(this.curve.q);\n  }\n  var r = this.x.toBigInteger().multiply(this.zinv);\n  this.curve.reduce(r);\n  return this.curve.fromBigInteger(r);\n}\nfunction pointFpGetY() {\n  if (this.zinv == null) {\n    this.zinv = this.z.modInverse(this.curve.q);\n  }\n  var r = this.y.toBigInteger().multiply(this.zinv);\n  this.curve.reduce(r);\n  return this.curve.fromBigInteger(r);\n}\nfunction pointFpEquals(other) {\n  if (other == this) return true;\n  if (this.isInfinity()) return other.isInfinity();\n  if (other.isInfinity()) return this.isInfinity();\n  var u, v;\n  // u = Y2 * Z1 - Y1 * Z2\n  u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n  if (!u.equals(BigInteger.ZERO)) return false;\n  // v = X2 * Z1 - X1 * Z2\n  v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n  return v.equals(BigInteger.ZERO);\n}\nfunction pointFpIsInfinity() {\n  if (this.x == null && this.y == null) return true;\n  return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\nfunction pointFpNegate() {\n  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\nfunction pointFpAdd(b) {\n  if (this.isInfinity()) return b;\n  if (b.isInfinity()) return this;\n\n  // u = Y2 * Z1 - Y1 * Z2\n  var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n  // v = X2 * Z1 - X1 * Z2\n  var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n  if (BigInteger.ZERO.equals(v)) {\n    if (BigInteger.ZERO.equals(u)) {\n      return this.twice(); // this == b, so double\n    }\n\n    return this.curve.getInfinity(); // this = -b, so infinity\n  }\n\n  var THREE = new BigInteger(\"3\");\n  var x1 = this.x.toBigInteger();\n  var y1 = this.y.toBigInteger();\n  var x2 = b.x.toBigInteger();\n  var y2 = b.y.toBigInteger();\n  var v2 = v.square();\n  var v3 = v2.multiply(v);\n  var x1v2 = x1.multiply(v2);\n  var zu2 = u.square().multiply(this.z);\n\n  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n  // z3 = v^3 * z1 * z2\n  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n  return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\nfunction pointFpTwice() {\n  if (this.isInfinity()) return this;\n  if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n\n  // TODO: optimized handling of constants\n  var THREE = new BigInteger(\"3\");\n  var x1 = this.x.toBigInteger();\n  var y1 = this.y.toBigInteger();\n  var y1z1 = y1.multiply(this.z);\n  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n  var a = this.curve.a.toBigInteger();\n\n  // w = 3 * x1^2 + a * z1^2\n  var w = x1.square().multiply(THREE);\n  if (!BigInteger.ZERO.equals(a)) {\n    w = w.add(this.z.square().multiply(a));\n  }\n  w = w.mod(this.curve.q);\n  //this.curve.reduce(w);\n  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n  // z3 = 8 * (y1 * z1)^3\n  var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n  return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n  if (this.isInfinity()) return this;\n  if (k.signum() == 0) return this.curve.getInfinity();\n  var e = k;\n  var h = e.multiply(new BigInteger(\"3\"));\n  var neg = this.negate();\n  var R = this;\n  var i;\n  for (i = h.bitLength() - 2; i > 0; --i) {\n    R = R.twice();\n    var hBit = h.testBit(i);\n    var eBit = e.testBit(i);\n    if (hBit != eBit) {\n      R = R.add(hBit ? this : neg);\n    }\n  }\n  return R;\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j, x, k) {\n  var i;\n  if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;else i = k.bitLength() - 1;\n  var R = this.curve.getInfinity();\n  var both = this.add(x);\n  while (i >= 0) {\n    R = R.twice();\n    if (j.testBit(i)) {\n      if (k.testBit(i)) {\n        R = R.add(both);\n      } else {\n        R = R.add(this);\n      }\n    } else {\n      if (k.testBit(i)) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n  return R;\n}\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n\n// ----------------\n// ECCurveFp\n\n// constructor\nfunction ECCurveFp(q, a, b) {\n  this.q = q;\n  this.a = this.fromBigInteger(a);\n  this.b = this.fromBigInteger(b);\n  this.infinity = new ECPointFp(this, null, null);\n  this.reducer = new Barrett(this.q);\n}\nfunction curveFpGetQ() {\n  return this.q;\n}\nfunction curveFpGetA() {\n  return this.a;\n}\nfunction curveFpGetB() {\n  return this.b;\n}\nfunction curveFpEquals(other) {\n  if (other == this) return true;\n  return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);\n}\nfunction curveFpGetInfinity() {\n  return this.infinity;\n}\nfunction curveFpFromBigInteger(x) {\n  return new ECFieldElementFp(this.q, x);\n}\nfunction curveReduce(x) {\n  this.reducer.reduce(x);\n}\n\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n  switch (parseInt(s.substr(0, 2), 16)) {\n    // first byte\n    case 0:\n      return this.infinity;\n    case 2:\n    case 3:\n      // point compression not supported yet\n      return null;\n    case 4:\n    case 6:\n    case 7:\n      var len = (s.length - 2) / 2;\n      var xHex = s.substr(2, len);\n      var yHex = s.substr(len + 2, len);\n      return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n    default:\n      // unsupported\n      return null;\n  }\n}\nfunction curveFpEncodePointHex(p) {\n  if (p.isInfinity()) return \"00\";\n  var xHex = p.getX().toBigInteger().toString(16);\n  var yHex = p.getY().toBigInteger().toString(16);\n  var oLen = this.getQ().toString(16).length;\n  if (oLen % 2 != 0) oLen++;\n  while (xHex.length < oLen) {\n    xHex = \"0\" + xHex;\n  }\n  while (yHex.length < oLen) {\n    yHex = \"0\" + yHex;\n  }\n  return \"04\" + xHex + yHex;\n}\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function (s) {\n  var yIsEven;\n  switch (parseInt(s.substr(0, 2), 16)) {\n    // first byte\n    case 0:\n      return this.infinity;\n    case 2:\n      yIsEven = false;\n    case 3:\n      if (yIsEven == undefined) yIsEven = true;\n      var len = s.length - 2;\n      var xHex = s.substr(2, len);\n      var x = this.fromBigInteger(new BigInteger(xHex, 16));\n      var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n      var beta = alpha.sqrt();\n      if (beta == null) throw \"Invalid point compression\";\n      var betaValue = beta.toBigInteger();\n      if (betaValue.testBit(0) != yIsEven) {\n        // Use the other root\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n      }\n      return new ECPointFp(this, x, beta);\n    case 4:\n    case 6:\n    case 7:\n      var len = (s.length - 2) / 2;\n      var xHex = s.substr(2, len);\n      var yHex = s.substr(len + 2, len);\n      return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n    default:\n      // unsupported\n      return null;\n  }\n};\nECCurveFp.prototype.encodeCompressedPointHex = function (p) {\n  if (p.isInfinity()) return \"00\";\n  var xHex = p.getX().toBigInteger().toString(16);\n  var oLen = this.getQ().toString(16).length;\n  if (oLen % 2 != 0) oLen++;\n  while (xHex.length < oLen) xHex = \"0\" + xHex;\n  var yPrefix;\n  if (p.getY().toBigInteger().isEven()) yPrefix = \"02\";else yPrefix = \"03\";\n  return yPrefix + xHex;\n};\nECFieldElementFp.prototype.getR = function () {\n  if (this.r != undefined) return this.r;\n  this.r = null;\n  var bitLength = this.q.bitLength();\n  if (bitLength > 128) {\n    var firstWord = this.q.shiftRight(bitLength - 64);\n    if (firstWord.intValue() == -1) {\n      this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n    }\n  }\n  return this.r;\n};\nECFieldElementFp.prototype.modMult = function (x1, x2) {\n  return this.modReduce(x1.multiply(x2));\n};\nECFieldElementFp.prototype.modReduce = function (x) {\n  if (this.getR() != null) {\n    var qLen = q.bitLength();\n    while (x.bitLength() > qLen + 1) {\n      var u = x.shiftRight(qLen);\n      var v = x.subtract(u.shiftLeft(qLen));\n      if (!this.getR().equals(BigInteger.ONE)) {\n        u = u.multiply(this.getR());\n      }\n      x = u.add(v);\n    }\n    while (x.compareTo(q) >= 0) {\n      x = x.subtract(q);\n    }\n  } else {\n    x = x.mod(q);\n  }\n  return x;\n};\nECFieldElementFp.prototype.sqrt = function () {\n  if (!this.q.testBit(0)) throw \"unsupported\";\n\n  // p mod 4 == 3\n  if (this.q.testBit(1)) {\n    var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));\n    return z.square().equals(this) ? z : null;\n  }\n\n  // p mod 4 == 1\n  var qMinusOne = this.q.subtract(BigInteger.ONE);\n  var legendreExponent = qMinusOne.shiftRight(1);\n  if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {\n    return null;\n  }\n  var u = qMinusOne.shiftRight(2);\n  var k = u.shiftLeft(1).add(BigInteger.ONE);\n  var Q = this.x;\n  var fourQ = modDouble(modDouble(Q));\n  var U, V;\n  do {\n    var P;\n    do {\n      P = new BigInteger(this.q.bitLength(), new SecureRandom());\n    } while (P.compareTo(this.q) >= 0 || !P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne));\n    var result = this.lucasSequence(P, Q, k);\n    U = result[0];\n    V = result[1];\n    if (this.modMult(V, V).equals(fourQ)) {\n      // Integer division by 2, mod q\n      if (V.testBit(0)) {\n        V = V.add(q);\n      }\n      V = V.shiftRight(1);\n      return new ECFieldElementFp(q, V);\n    }\n  } while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n  return null;\n};\nECFieldElementFp.prototype.lucasSequence = function (P, Q, k) {\n  var n = k.bitLength();\n  var s = k.getLowestSetBit();\n  var Uh = BigInteger.ONE;\n  var Vl = BigInteger.TWO;\n  var Vh = P;\n  var Ql = BigInteger.ONE;\n  var Qh = BigInteger.ONE;\n  for (var j = n - 1; j >= s + 1; --j) {\n    Ql = this.modMult(Ql, Qh);\n    if (k.testBit(j)) {\n      Qh = this.modMult(Ql, Q);\n      Uh = this.modMult(Uh, Vh);\n      Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n      Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n    } else {\n      Qh = Ql;\n      Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n      Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n      Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n    }\n  }\n  Ql = this.modMult(Ql, Qh);\n  Qh = this.modMult(Ql, Q);\n  Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n  Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n  Ql = this.modMult(Ql, Qh);\n  for (var j = 1; j <= s; ++j) {\n    Uh = this.modMult(Uh, Vl);\n    Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n    Ql = this.modMult(Ql, Ql);\n  }\n  return [Uh, Vl];\n};\nvar exports = {\n  ECCurveFp: ECCurveFp,\n  ECPointFp: ECPointFp,\n  ECFieldElementFp: ECFieldElementFp\n};\nmodule.exports = exports;","map":{"version":3,"names":["BigInteger","require","Barrett","prototype","ECFieldElementFp","q","x","feFpEquals","other","equals","feFpToBigInteger","feFpNegate","negate","mod","feFpAdd","b","add","toBigInteger","feFpSubtract","subtract","feFpMultiply","multiply","feFpSquare","square","feFpDivide","modInverse","divide","ECPointFp","curve","y","z","ONE","zinv","pointFpGetX","r","reduce","fromBigInteger","pointFpGetY","pointFpEquals","isInfinity","u","v","ZERO","pointFpIsInfinity","pointFpNegate","pointFpAdd","twice","getInfinity","THREE","x1","y1","x2","y2","v2","v3","x1v2","zu2","x3","shiftLeft","y3","z3","pointFpTwice","signum","y1z1","y1sqz1","a","w","pointFpMultiply","k","e","h","neg","R","i","bitLength","hBit","testBit","eBit","pointFpMultiplyTwo","j","both","getX","getY","multiplyTwo","ECCurveFp","infinity","reducer","curveFpGetQ","curveFpGetA","curveFpGetB","curveFpEquals","curveFpGetInfinity","curveFpFromBigInteger","curveReduce","curveFpDecodePointHex","s","parseInt","substr","len","length","xHex","yHex","curveFpEncodePointHex","p","toString","oLen","getQ","getA","getB","encodePointHex","decodePointHex","yIsEven","undefined","alpha","beta","sqrt","betaValue","encodeCompressedPointHex","yPrefix","isEven","getR","firstWord","shiftRight","intValue","modMult","modReduce","qLen","compareTo","modPow","qMinusOne","legendreExponent","Q","fourQ","modDouble","U","V","P","SecureRandom","result","lucasSequence","n","getLowestSetBit","Uh","Vl","TWO","Vh","Ql","Qh","exports","module"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/ecc-jsbn/lib/ec.js"],"sourcesContent":["// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger\nvar Barrett = BigInteger.prototype.Barrett\n\n// ----------------\n// ECFieldElementFp\n\n// constructor\nfunction ECFieldElementFp(q,x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q;\n}\n\nfunction feFpEquals(other) {\n    if(other == this) return true;\n    return (this.q.equals(other.q) && this.x.equals(other.x));\n}\n\nfunction feFpToBigInteger() {\n    return this.x;\n}\n\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\n\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\n\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\n\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n\n// ----------------\n// ECPointFp\n\n// constructor\nfunction ECPointFp(curve,x,y,z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if(z == null) {\n      this.z = BigInteger.ONE;\n    }\n    else {\n      this.z = z;\n    }\n    this.zinv = null;\n    //TODO: compression flag\n}\n\nfunction pointFpGetX() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpGetY() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpEquals(other) {\n    if(other == this) return true;\n    if(this.isInfinity()) return other.isInfinity();\n    if(other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if(!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\n\nfunction pointFpIsInfinity() {\n    if((this.x == null) && (this.y == null)) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\n\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\n\nfunction pointFpAdd(b) {\n    if(this.isInfinity()) return b;\n    if(b.isInfinity()) return this;\n\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n\n    if(BigInteger.ZERO.equals(v)) {\n        if(BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n\treturn this.curve.getInfinity(); // this = -b, so infinity\n    }\n\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\nfunction pointFpTwice() {\n    if(this.isInfinity()) return this;\n    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if(!BigInteger.ZERO.equals(a)) {\n      w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if(this.isInfinity()) return this;\n    if(k.signum() == 0) return this.curve.getInfinity();\n\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n\n    var neg = this.negate();\n    var R = this;\n\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i) {\n\tR = R.twice();\n\n\tvar hBit = h.testBit(i);\n\tvar eBit = e.testBit(i);\n\n\tif (hBit != eBit) {\n\t    R = R.add(hBit ? this : neg);\n\t}\n    }\n\n    return R;\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j,x,k) {\n  var i;\n  if(j.bitLength() > k.bitLength())\n    i = j.bitLength() - 1;\n  else\n    i = k.bitLength() - 1;\n\n  var R = this.curve.getInfinity();\n  var both = this.add(x);\n  while(i >= 0) {\n    R = R.twice();\n    if(j.testBit(i)) {\n      if(k.testBit(i)) {\n        R = R.add(both);\n      }\n      else {\n        R = R.add(this);\n      }\n    }\n    else {\n      if(k.testBit(i)) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n\n  return R;\n}\n\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n\n// ----------------\n// ECCurveFp\n\n// constructor\nfunction ECCurveFp(q,a,b) {\n    this.q = q;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\n\nfunction curveFpGetQ() {\n    return this.q;\n}\n\nfunction curveFpGetA() {\n    return this.a;\n}\n\nfunction curveFpGetB() {\n    return this.b;\n}\n\nfunction curveFpEquals(other) {\n    if(other == this) return true;\n    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\n}\n\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\n\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\n\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n    case 3:\n\t// point compression not supported yet\n\treturn null;\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\n\nfunction curveFpEncodePointHex(p) {\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar yHex = p.getY().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen) {\n\t\txHex = \"0\" + xHex;\n\t}\n\twhile (yHex.length < oLen) {\n\t\tyHex = \"0\" + yHex;\n\t}\n\treturn \"04\" + xHex + yHex;\n}\n\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s)\n{\n\tvar yIsEven;\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n\tyIsEven = false;\n    case 3:\n\tif(yIsEven == undefined) yIsEven = true;\n\tvar len = s.length - 2;\n\tvar xHex = s.substr(2, len);\n\tvar x = this.fromBigInteger(new BigInteger(xHex,16));\n\tvar alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n\tvar beta = alpha.sqrt();\n\n    if (beta == null) throw \"Invalid point compression\";\n\n    var betaValue = beta.toBigInteger();\n    if (betaValue.testBit(0) != yIsEven)\n    {\n        // Use the other root\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n    }\n    return new ECPointFp(this,x,beta);\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\nECCurveFp.prototype.encodeCompressedPointHex = function(p)\n{\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen)\n\t\txHex = \"0\" + xHex;\n\tvar yPrefix;\n\tif(p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n\telse                                 yPrefix = \"03\";\n\n\treturn yPrefix + xHex;\n}\n\n\nECFieldElementFp.prototype.getR = function()\n{\n\tif(this.r != undefined) return this.r;\n\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128)\n    {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1)\n        {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n}\nECFieldElementFp.prototype.modMult = function(x1,x2)\n{\n    return this.modReduce(x1.multiply(x2));\n}\nECFieldElementFp.prototype.modReduce = function(x)\n{\n    if (this.getR() != null)\n    {\n        var qLen = q.bitLength();\n        while (x.bitLength() > (qLen + 1))\n        {\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE))\n            {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v); \n        }\n        while (x.compareTo(q) >= 0)\n        {\n            x = x.subtract(q);\n        }\n    }\n    else\n    {\n        x = x.mod(q);\n    }\n    return x;\n}\nECFieldElementFp.prototype.sqrt = function()\n{\n    if (!this.q.testBit(0)) throw \"unsupported\";\n\n    // p mod 4 == 3\n    if (this.q.testBit(1))\n    {\n    \tvar z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));\n    \treturn z.square().equals(this) ? z : null;\n    }\n\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))\n    {\n        return null;\n    }\n\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n\n    var U, V;\n    do\n    {\n        var P;\n        do\n        {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }\n        while (P.compareTo(this.q) >= 0\n            || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));\n\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n\n        if (this.modMult(V, V).equals(fourQ))\n        {\n            // Integer division by 2, mod q\n            if (V.testBit(0))\n            {\n                V = V.add(q);\n            }\n\n            V = V.shiftRight(1);\n\n            return new ECFieldElementFp(q,V);\n        }\n    }\n    while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n\n    return null;\n}\nECFieldElementFp.prototype.lucasSequence = function(P,Q,k)\n{\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n\n    for (var j = n - 1; j >= s + 1; --j)\n    {\n        Ql = this.modMult(Ql, Qh);\n\n        if (k.testBit(j))\n        {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        }\n        else\n        {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n\n    for (var j = 1; j <= s; ++j)\n    {\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n\n    return [ Uh, Vl ];\n}\n\nvar exports = {\n  ECCurveFp: ECCurveFp,\n  ECPointFp: ECPointFp,\n  ECFieldElementFp: ECFieldElementFp\n}\n\nmodule.exports = exports\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}