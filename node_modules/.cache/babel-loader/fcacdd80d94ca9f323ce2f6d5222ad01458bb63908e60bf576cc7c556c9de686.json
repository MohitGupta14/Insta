{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n  read: read.bind(undefined, false, undefined),\n  readType: read.bind(undefined, false),\n  write: write,\n  /* semi-private api, used by sshpk-agent */\n  readPartial: read.bind(undefined, true),\n  /* shared with ssh format */\n  readInternal: read,\n  keyTypeToAlg: keyTypeToAlg,\n  algToKeyType: algToKeyType\n};\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar SSHBuffer = require('../ssh-buffer');\nfunction algToKeyType(alg) {\n  assert.string(alg);\n  if (alg === 'ssh-dss') return 'dsa';else if (alg === 'ssh-rsa') return 'rsa';else if (alg === 'ssh-ed25519') return 'ed25519';else if (alg === 'ssh-curve25519') return 'curve25519';else if (alg.match(/^ecdsa-sha2-/)) return 'ecdsa';else throw new Error('Unknown algorithm ' + alg);\n}\nfunction keyTypeToAlg(key) {\n  assert.object(key);\n  if (key.type === 'dsa') return 'ssh-dss';else if (key.type === 'rsa') return 'ssh-rsa';else if (key.type === 'ed25519') return 'ssh-ed25519';else if (key.type === 'curve25519') return 'ssh-curve25519';else if (key.type === 'ecdsa') return 'ecdsa-sha2-' + key.part.curve.data.toString();else throw new Error('Unknown key type ' + key.type);\n}\nfunction read(partial, type, buf, options) {\n  if (typeof buf === 'string') buf = Buffer.from(buf);\n  assert.buffer(buf, 'buf');\n  var key = {};\n  var parts = key.parts = [];\n  var sshbuf = new SSHBuffer({\n    buffer: buf\n  });\n  var alg = sshbuf.readString();\n  assert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n  key.type = algToKeyType(alg);\n  var partCount = algs.info[key.type].parts.length;\n  if (type && type === 'private') partCount = algs.privInfo[key.type].parts.length;\n  while (!sshbuf.atEnd() && parts.length < partCount) parts.push(sshbuf.readPart());\n  while (!partial && !sshbuf.atEnd()) parts.push(sshbuf.readPart());\n  assert.ok(parts.length >= 1, 'key must have at least one part');\n  assert.ok(partial || sshbuf.atEnd(), 'leftover bytes at end of key');\n  var Constructor = Key;\n  var algInfo = algs.info[key.type];\n  if (type === 'private' || algInfo.parts.length !== parts.length) {\n    algInfo = algs.privInfo[key.type];\n    Constructor = PrivateKey;\n  }\n  assert.strictEqual(algInfo.parts.length, parts.length);\n  if (key.type === 'ecdsa') {\n    var res = /^ecdsa-sha2-(.+)$/.exec(alg);\n    assert.ok(res !== null);\n    assert.strictEqual(res[1], parts[0].data.toString());\n  }\n  var normalized = true;\n  for (var i = 0; i < algInfo.parts.length; ++i) {\n    var p = parts[i];\n    p.name = algInfo.parts[i];\n    /*\n     * OpenSSH stores ed25519 \"private\" keys as seed + public key\n     * concat'd together (k followed by A). We want to keep them\n     * separate for other formats that don't do this.\n     */\n    if (key.type === 'ed25519' && p.name === 'k') p.data = p.data.slice(0, 32);\n    if (p.name !== 'curve' && algInfo.normalize !== false) {\n      var nd;\n      if (key.type === 'ed25519') {\n        nd = utils.zeroPadToLength(p.data, 32);\n      } else {\n        nd = utils.mpNormalize(p.data);\n      }\n      if (nd.toString('binary') !== p.data.toString('binary')) {\n        p.data = nd;\n        normalized = false;\n      }\n    }\n  }\n  if (normalized) key._rfc4253Cache = sshbuf.toBuffer();\n  if (partial && typeof partial === 'object') {\n    partial.remainder = sshbuf.remainder();\n    partial.consumed = sshbuf._offset;\n  }\n  return new Constructor(key);\n}\nfunction write(key, options) {\n  assert.object(key);\n  var alg = keyTypeToAlg(key);\n  var i;\n  var algInfo = algs.info[key.type];\n  if (PrivateKey.isPrivateKey(key)) algInfo = algs.privInfo[key.type];\n  var parts = algInfo.parts;\n  var buf = new SSHBuffer({});\n  buf.writeString(alg);\n  for (i = 0; i < parts.length; ++i) {\n    var data = key.part[parts[i]].data;\n    if (algInfo.normalize !== false) {\n      if (key.type === 'ed25519') data = utils.zeroPadToLength(data, 32);else data = utils.mpNormalize(data);\n    }\n    if (key.type === 'ed25519' && parts[i] === 'k') data = Buffer.concat([data, key.part.A.data]);\n    buf.writeBuffer(data);\n  }\n  return buf.toBuffer();\n}","map":{"version":3,"names":["module","exports","read","bind","undefined","readType","write","readPartial","readInternal","keyTypeToAlg","algToKeyType","assert","require","Buffer","algs","utils","Key","PrivateKey","SSHBuffer","alg","string","match","Error","key","object","type","part","curve","data","toString","partial","buf","options","from","buffer","parts","sshbuf","readString","ok","atEnd","partCount","info","length","privInfo","push","readPart","Constructor","algInfo","strictEqual","res","exec","normalized","i","p","name","slice","normalize","nd","zeroPadToLength","mpNormalize","_rfc4253Cache","toBuffer","remainder","consumed","_offset","isPrivateKey","writeString","concat","A","writeBuffer"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/formats/rfc4253.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read.bind(undefined, false, undefined),\n\treadType: read.bind(undefined, false),\n\twrite: write,\n\t/* semi-private api, used by sshpk-agent */\n\treadPartial: read.bind(undefined, true),\n\n\t/* shared with ssh format */\n\treadInternal: read,\n\tkeyTypeToAlg: keyTypeToAlg,\n\talgToKeyType: algToKeyType\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction algToKeyType(alg) {\n\tassert.string(alg);\n\tif (alg === 'ssh-dss')\n\t\treturn ('dsa');\n\telse if (alg === 'ssh-rsa')\n\t\treturn ('rsa');\n\telse if (alg === 'ssh-ed25519')\n\t\treturn ('ed25519');\n\telse if (alg === 'ssh-curve25519')\n\t\treturn ('curve25519');\n\telse if (alg.match(/^ecdsa-sha2-/))\n\t\treturn ('ecdsa');\n\telse\n\t\tthrow (new Error('Unknown algorithm ' + alg));\n}\n\nfunction keyTypeToAlg(key) {\n\tassert.object(key);\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss');\n\telse if (key.type === 'rsa')\n\t\treturn ('ssh-rsa');\n\telse if (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519');\n\telse if (key.type === 'curve25519')\n\t\treturn ('ssh-curve25519');\n\telse if (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\telse\n\t\tthrow (new Error('Unknown key type ' + key.type));\n}\n\nfunction read(partial, type, buf, options) {\n\tif (typeof (buf) === 'string')\n\t\tbuf = Buffer.from(buf);\n\tassert.buffer(buf, 'buf');\n\n\tvar key = {};\n\n\tvar parts = key.parts = [];\n\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\tvar alg = sshbuf.readString();\n\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\tkey.type = algToKeyType(alg);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\tif (type && type === 'private')\n\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\twhile (!partial && !sshbuf.atEnd())\n\t\tparts.push(sshbuf.readPart());\n\n\tassert.ok(parts.length >= 1,\n\t    'key must have at least one part');\n\tassert.ok(partial || sshbuf.atEnd(),\n\t    'leftover bytes at end of key');\n\n\tvar Constructor = Key;\n\tvar algInfo = algs.info[key.type];\n\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\talgInfo = algs.privInfo[key.type];\n\t\tConstructor = PrivateKey;\n\t}\n\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\tif (key.type === 'ecdsa') {\n\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tvar normalized = true;\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = parts[i];\n\t\tp.name = algInfo.parts[i];\n\t\t/*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */\n\t\tif (key.type === 'ed25519' && p.name === 'k')\n\t\t\tp.data = p.data.slice(0, 32);\n\n\t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n\t\t\tvar nd;\n\t\t\tif (key.type === 'ed25519') {\n\t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n\t\t\t} else {\n\t\t\t\tnd = utils.mpNormalize(p.data);\n\t\t\t}\n\t\t\tif (nd.toString('binary') !==\n\t\t\t    p.data.toString('binary')) {\n\t\t\t\tp.data = nd;\n\t\t\t\tnormalized = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (normalized)\n\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\tif (partial && typeof (partial) === 'object') {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Constructor(key));\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\n\tvar alg = keyTypeToAlg(key);\n\tvar i;\n\n\tvar algInfo = algs.info[key.type];\n\tif (PrivateKey.isPrivateKey(key))\n\t\talgInfo = algs.privInfo[key.type];\n\tvar parts = algInfo.parts;\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeString(alg);\n\n\tfor (i = 0; i < parts.length; ++i) {\n\t\tvar data = key.part[parts[i]].data;\n\t\tif (algInfo.normalize !== false) {\n\t\t\tif (key.type === 'ed25519')\n\t\t\t\tdata = utils.zeroPadToLength(data, 32);\n\t\t\telse\n\t\t\t\tdata = utils.mpNormalize(data);\n\t\t}\n\t\tif (key.type === 'ed25519' && parts[i] === 'k')\n\t\t\tdata = Buffer.concat([data, key.part.A.data]);\n\t\tbuf.writeBuffer(data);\n\t}\n\n\treturn (buf.toBuffer());\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAO,GAAG;EAChBC,IAAI,EAAEA,IAAI,CAACC,IAAI,CAACC,SAAS,EAAE,KAAK,EAAEA,SAAS,CAAC;EAC5CC,QAAQ,EAAEH,IAAI,CAACC,IAAI,CAACC,SAAS,EAAE,KAAK,CAAC;EACrCE,KAAK,EAAEA,KAAK;EACZ;EACAC,WAAW,EAAEL,IAAI,CAACC,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC;EAEvC;EACAI,YAAY,EAAEN,IAAI;EAClBO,YAAY,EAAEA,YAAY;EAC1BC,YAAY,EAAEA;AACf,CAAC;AAED,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAc,CAAC,CAACC,MAAM;AAC3C,IAAIC,IAAI,GAAGF,OAAO,CAAC,SAAS,CAAC;AAC7B,IAAIG,KAAK,GAAGH,OAAO,CAAC,UAAU,CAAC;AAC/B,IAAII,GAAG,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAC3B,IAAIK,UAAU,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AAC1C,IAAIM,SAAS,GAAGN,OAAO,CAAC,eAAe,CAAC;AAExC,SAASF,YAAYA,CAACS,GAAG,EAAE;EAC1BR,MAAM,CAACS,MAAM,CAACD,GAAG,CAAC;EAClB,IAAIA,GAAG,KAAK,SAAS,EACpB,OAAQ,KAAK,CAAE,KACX,IAAIA,GAAG,KAAK,SAAS,EACzB,OAAQ,KAAK,CAAE,KACX,IAAIA,GAAG,KAAK,aAAa,EAC7B,OAAQ,SAAS,CAAE,KACf,IAAIA,GAAG,KAAK,gBAAgB,EAChC,OAAQ,YAAY,CAAE,KAClB,IAAIA,GAAG,CAACE,KAAK,CAAC,cAAc,CAAC,EACjC,OAAQ,OAAO,CAAE,KAEjB,MAAO,IAAIC,KAAK,CAAC,oBAAoB,GAAGH,GAAG,CAAC;AAC9C;AAEA,SAASV,YAAYA,CAACc,GAAG,EAAE;EAC1BZ,MAAM,CAACa,MAAM,CAACD,GAAG,CAAC;EAClB,IAAIA,GAAG,CAACE,IAAI,KAAK,KAAK,EACrB,OAAQ,SAAS,CAAE,KACf,IAAIF,GAAG,CAACE,IAAI,KAAK,KAAK,EAC1B,OAAQ,SAAS,CAAE,KACf,IAAIF,GAAG,CAACE,IAAI,KAAK,SAAS,EAC9B,OAAQ,aAAa,CAAE,KACnB,IAAIF,GAAG,CAACE,IAAI,KAAK,YAAY,EACjC,OAAQ,gBAAgB,CAAE,KACtB,IAAIF,GAAG,CAACE,IAAI,KAAK,OAAO,EAC5B,OAAQ,aAAa,GAAGF,GAAG,CAACG,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,QAAQ,EAAE,CAAE,KAExD,MAAO,IAAIP,KAAK,CAAC,mBAAmB,GAAGC,GAAG,CAACE,IAAI,CAAC;AAClD;AAEA,SAASvB,IAAIA,CAAC4B,OAAO,EAAEL,IAAI,EAAEM,GAAG,EAAEC,OAAO,EAAE;EAC1C,IAAI,OAAQD,GAAI,KAAK,QAAQ,EAC5BA,GAAG,GAAGlB,MAAM,CAACoB,IAAI,CAACF,GAAG,CAAC;EACvBpB,MAAM,CAACuB,MAAM,CAACH,GAAG,EAAE,KAAK,CAAC;EAEzB,IAAIR,GAAG,GAAG,CAAC,CAAC;EAEZ,IAAIY,KAAK,GAAGZ,GAAG,CAACY,KAAK,GAAG,EAAE;EAC1B,IAAIC,MAAM,GAAG,IAAIlB,SAAS,CAAC;IAACgB,MAAM,EAAEH;EAAG,CAAC,CAAC;EAEzC,IAAIZ,GAAG,GAAGiB,MAAM,CAACC,UAAU,EAAE;EAC7B1B,MAAM,CAAC2B,EAAE,CAAC,CAACF,MAAM,CAACG,KAAK,EAAE,EAAE,iCAAiC,CAAC;EAE7DhB,GAAG,CAACE,IAAI,GAAGf,YAAY,CAACS,GAAG,CAAC;EAE5B,IAAIqB,SAAS,GAAG1B,IAAI,CAAC2B,IAAI,CAAClB,GAAG,CAACE,IAAI,CAAC,CAACU,KAAK,CAACO,MAAM;EAChD,IAAIjB,IAAI,IAAIA,IAAI,KAAK,SAAS,EAC7Be,SAAS,GAAG1B,IAAI,CAAC6B,QAAQ,CAACpB,GAAG,CAACE,IAAI,CAAC,CAACU,KAAK,CAACO,MAAM;EAEjD,OAAO,CAACN,MAAM,CAACG,KAAK,EAAE,IAAIJ,KAAK,CAACO,MAAM,GAAGF,SAAS,EACjDL,KAAK,CAACS,IAAI,CAACR,MAAM,CAACS,QAAQ,EAAE,CAAC;EAC9B,OAAO,CAACf,OAAO,IAAI,CAACM,MAAM,CAACG,KAAK,EAAE,EACjCJ,KAAK,CAACS,IAAI,CAACR,MAAM,CAACS,QAAQ,EAAE,CAAC;EAE9BlC,MAAM,CAAC2B,EAAE,CAACH,KAAK,CAACO,MAAM,IAAI,CAAC,EACvB,iCAAiC,CAAC;EACtC/B,MAAM,CAAC2B,EAAE,CAACR,OAAO,IAAIM,MAAM,CAACG,KAAK,EAAE,EAC/B,8BAA8B,CAAC;EAEnC,IAAIO,WAAW,GAAG9B,GAAG;EACrB,IAAI+B,OAAO,GAAGjC,IAAI,CAAC2B,IAAI,CAAClB,GAAG,CAACE,IAAI,CAAC;EACjC,IAAIA,IAAI,KAAK,SAAS,IAAIsB,OAAO,CAACZ,KAAK,CAACO,MAAM,KAAKP,KAAK,CAACO,MAAM,EAAE;IAChEK,OAAO,GAAGjC,IAAI,CAAC6B,QAAQ,CAACpB,GAAG,CAACE,IAAI,CAAC;IACjCqB,WAAW,GAAG7B,UAAU;EACzB;EACAN,MAAM,CAACqC,WAAW,CAACD,OAAO,CAACZ,KAAK,CAACO,MAAM,EAAEP,KAAK,CAACO,MAAM,CAAC;EAEtD,IAAInB,GAAG,CAACE,IAAI,KAAK,OAAO,EAAE;IACzB,IAAIwB,GAAG,GAAG,mBAAmB,CAACC,IAAI,CAAC/B,GAAG,CAAC;IACvCR,MAAM,CAAC2B,EAAE,CAACW,GAAG,KAAK,IAAI,CAAC;IACvBtC,MAAM,CAACqC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAC,EAAEd,KAAK,CAAC,CAAC,CAAC,CAACP,IAAI,CAACC,QAAQ,EAAE,CAAC;EACrD;EAEA,IAAIsB,UAAU,GAAG,IAAI;EACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACZ,KAAK,CAACO,MAAM,EAAE,EAAEU,CAAC,EAAE;IAC9C,IAAIC,CAAC,GAAGlB,KAAK,CAACiB,CAAC,CAAC;IAChBC,CAAC,CAACC,IAAI,GAAGP,OAAO,CAACZ,KAAK,CAACiB,CAAC,CAAC;IACzB;AACF;AACA;AACA;AACA;IACE,IAAI7B,GAAG,CAACE,IAAI,KAAK,SAAS,IAAI4B,CAAC,CAACC,IAAI,KAAK,GAAG,EAC3CD,CAAC,CAACzB,IAAI,GAAGyB,CAAC,CAACzB,IAAI,CAAC2B,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAE7B,IAAIF,CAAC,CAACC,IAAI,KAAK,OAAO,IAAIP,OAAO,CAACS,SAAS,KAAK,KAAK,EAAE;MACtD,IAAIC,EAAE;MACN,IAAIlC,GAAG,CAACE,IAAI,KAAK,SAAS,EAAE;QAC3BgC,EAAE,GAAG1C,KAAK,CAAC2C,eAAe,CAACL,CAAC,CAACzB,IAAI,EAAE,EAAE,CAAC;MACvC,CAAC,MAAM;QACN6B,EAAE,GAAG1C,KAAK,CAAC4C,WAAW,CAACN,CAAC,CAACzB,IAAI,CAAC;MAC/B;MACA,IAAI6B,EAAE,CAAC5B,QAAQ,CAAC,QAAQ,CAAC,KACrBwB,CAAC,CAACzB,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC9BwB,CAAC,CAACzB,IAAI,GAAG6B,EAAE;QACXN,UAAU,GAAG,KAAK;MACnB;IACD;EACD;EAEA,IAAIA,UAAU,EACb5B,GAAG,CAACqC,aAAa,GAAGxB,MAAM,CAACyB,QAAQ,EAAE;EAEtC,IAAI/B,OAAO,IAAI,OAAQA,OAAQ,KAAK,QAAQ,EAAE;IAC7CA,OAAO,CAACgC,SAAS,GAAG1B,MAAM,CAAC0B,SAAS,EAAE;IACtChC,OAAO,CAACiC,QAAQ,GAAG3B,MAAM,CAAC4B,OAAO;EAClC;EAEA,OAAQ,IAAIlB,WAAW,CAACvB,GAAG,CAAC;AAC7B;AAEA,SAASjB,KAAKA,CAACiB,GAAG,EAAES,OAAO,EAAE;EAC5BrB,MAAM,CAACa,MAAM,CAACD,GAAG,CAAC;EAElB,IAAIJ,GAAG,GAAGV,YAAY,CAACc,GAAG,CAAC;EAC3B,IAAI6B,CAAC;EAEL,IAAIL,OAAO,GAAGjC,IAAI,CAAC2B,IAAI,CAAClB,GAAG,CAACE,IAAI,CAAC;EACjC,IAAIR,UAAU,CAACgD,YAAY,CAAC1C,GAAG,CAAC,EAC/BwB,OAAO,GAAGjC,IAAI,CAAC6B,QAAQ,CAACpB,GAAG,CAACE,IAAI,CAAC;EAClC,IAAIU,KAAK,GAAGY,OAAO,CAACZ,KAAK;EAEzB,IAAIJ,GAAG,GAAG,IAAIb,SAAS,CAAC,CAAC,CAAC,CAAC;EAE3Ba,GAAG,CAACmC,WAAW,CAAC/C,GAAG,CAAC;EAEpB,KAAKiC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,KAAK,CAACO,MAAM,EAAE,EAAEU,CAAC,EAAE;IAClC,IAAIxB,IAAI,GAAGL,GAAG,CAACG,IAAI,CAACS,KAAK,CAACiB,CAAC,CAAC,CAAC,CAACxB,IAAI;IAClC,IAAImB,OAAO,CAACS,SAAS,KAAK,KAAK,EAAE;MAChC,IAAIjC,GAAG,CAACE,IAAI,KAAK,SAAS,EACzBG,IAAI,GAAGb,KAAK,CAAC2C,eAAe,CAAC9B,IAAI,EAAE,EAAE,CAAC,CAAC,KAEvCA,IAAI,GAAGb,KAAK,CAAC4C,WAAW,CAAC/B,IAAI,CAAC;IAChC;IACA,IAAIL,GAAG,CAACE,IAAI,KAAK,SAAS,IAAIU,KAAK,CAACiB,CAAC,CAAC,KAAK,GAAG,EAC7CxB,IAAI,GAAGf,MAAM,CAACsD,MAAM,CAAC,CAACvC,IAAI,EAAEL,GAAG,CAACG,IAAI,CAAC0C,CAAC,CAACxC,IAAI,CAAC,CAAC;IAC9CG,GAAG,CAACsC,WAAW,CAACzC,IAAI,CAAC;EACtB;EAEA,OAAQG,GAAG,CAAC8B,QAAQ,EAAE;AACvB"},"metadata":{},"sourceType":"script","externalDependencies":[]}