{"ast":null,"code":"// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n  DiffieHellman: DiffieHellman,\n  generateECDSA: generateECDSA,\n  generateED25519: generateED25519\n};\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar utils = require('./utils');\nvar nacl = require('tweetnacl');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar CRYPTO_HAVE_ECDH = crypto.createECDH !== undefined;\nvar ecdh = require('ecc-jsbn');\nvar ec = require('ecc-jsbn/lib/ec');\nvar jsbn = require('jsbn').BigInteger;\nfunction DiffieHellman(key) {\n  utils.assertCompatible(key, Key, [1, 4], 'key');\n  this._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);\n  this._algo = key.type;\n  this._curve = key.curve;\n  this._key = key;\n  if (key.type === 'dsa') {\n    if (!CRYPTO_HAVE_ECDH) {\n      throw new Error('Due to bugs in the node 0.10 ' + 'crypto API, node 0.12.x or later is required ' + 'to use DH');\n    }\n    this._dh = crypto.createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);\n    this._p = key.part.p;\n    this._g = key.part.g;\n    if (this._isPriv) this._dh.setPrivateKey(key.part.x.data);\n    this._dh.setPublicKey(key.part.y.data);\n  } else if (key.type === 'ecdsa') {\n    if (!CRYPTO_HAVE_ECDH) {\n      this._ecParams = new X9ECParameters(this._curve);\n      if (this._isPriv) {\n        this._priv = new ECPrivate(this._ecParams, key.part.d.data);\n      }\n      return;\n    }\n    var curve = {\n      'nistp256': 'prime256v1',\n      'nistp384': 'secp384r1',\n      'nistp521': 'secp521r1'\n    }[key.curve];\n    this._dh = crypto.createECDH(curve);\n    if (typeof this._dh !== 'object' || typeof this._dh.setPrivateKey !== 'function') {\n      CRYPTO_HAVE_ECDH = false;\n      DiffieHellman.call(this, key);\n      return;\n    }\n    if (this._isPriv) this._dh.setPrivateKey(key.part.d.data);\n    this._dh.setPublicKey(key.part.Q.data);\n  } else if (key.type === 'curve25519') {\n    if (this._isPriv) {\n      utils.assertCompatible(key, PrivateKey, [1, 5], 'key');\n      this._priv = key.part.k.data;\n    }\n  } else {\n    throw new Error('DH not supported for ' + key.type + ' keys');\n  }\n}\nDiffieHellman.prototype.getPublicKey = function () {\n  if (this._isPriv) return this._key.toPublic();\n  return this._key;\n};\nDiffieHellman.prototype.getPrivateKey = function () {\n  if (this._isPriv) return this._key;else return undefined;\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\nDiffieHellman.prototype._keyCheck = function (pk, isPub) {\n  assert.object(pk, 'key');\n  if (!isPub) utils.assertCompatible(pk, PrivateKey, [1, 3], 'key');\n  utils.assertCompatible(pk, Key, [1, 4], 'key');\n  if (pk.type !== this._algo) {\n    throw new Error('A ' + pk.type + ' key cannot be used in ' + this._algo + ' Diffie-Hellman');\n  }\n  if (pk.curve !== this._curve) {\n    throw new Error('A key from the ' + pk.curve + ' curve ' + 'cannot be used with a ' + this._curve + ' Diffie-Hellman');\n  }\n  if (pk.type === 'dsa') {\n    assert.deepEqual(pk.part.p, this._p, 'DSA key prime does not match');\n    assert.deepEqual(pk.part.g, this._g, 'DSA key generator does not match');\n  }\n};\nDiffieHellman.prototype.setKey = function (pk) {\n  this._keyCheck(pk);\n  if (pk.type === 'dsa') {\n    this._dh.setPrivateKey(pk.part.x.data);\n    this._dh.setPublicKey(pk.part.y.data);\n  } else if (pk.type === 'ecdsa') {\n    if (CRYPTO_HAVE_ECDH) {\n      this._dh.setPrivateKey(pk.part.d.data);\n      this._dh.setPublicKey(pk.part.Q.data);\n    } else {\n      this._priv = new ECPrivate(this._ecParams, pk.part.d.data);\n    }\n  } else if (pk.type === 'curve25519') {\n    var k = pk.part.k;\n    if (!pk.part.k) k = pk.part.r;\n    this._priv = k.data;\n    if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);\n    this._priv = this._priv.slice(0, 32);\n  }\n  this._key = pk;\n  this._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\nDiffieHellman.prototype.computeSecret = function (otherpk) {\n  this._keyCheck(otherpk, true);\n  if (!this._isPriv) throw new Error('DH exchange has not been initialized with ' + 'a private key yet');\n  var pub;\n  if (this._algo === 'dsa') {\n    return this._dh.computeSecret(otherpk.part.y.data);\n  } else if (this._algo === 'ecdsa') {\n    if (CRYPTO_HAVE_ECDH) {\n      return this._dh.computeSecret(otherpk.part.Q.data);\n    } else {\n      pub = new ECPublic(this._ecParams, otherpk.part.Q.data);\n      return this._priv.deriveSharedSecret(pub);\n    }\n  } else if (this._algo === 'curve25519') {\n    pub = otherpk.part.A.data;\n    while (pub[0] === 0x00 && pub.length > 32) pub = pub.slice(1);\n    var priv = this._priv;\n    assert.strictEqual(pub.length, 32);\n    assert.strictEqual(priv.length, 32);\n    var secret = nacl.box.before(new Uint8Array(pub), new Uint8Array(priv));\n    return Buffer.from(secret);\n  }\n  throw new Error('Invalid algorithm: ' + this._algo);\n};\nDiffieHellman.prototype.generateKey = function () {\n  var parts = [];\n  var priv, pub;\n  if (this._algo === 'dsa') {\n    this._dh.generateKeys();\n    parts.push({\n      name: 'p',\n      data: this._p.data\n    });\n    parts.push({\n      name: 'q',\n      data: this._key.part.q.data\n    });\n    parts.push({\n      name: 'g',\n      data: this._g.data\n    });\n    parts.push({\n      name: 'y',\n      data: this._dh.getPublicKey()\n    });\n    parts.push({\n      name: 'x',\n      data: this._dh.getPrivateKey()\n    });\n    this._key = new PrivateKey({\n      type: 'dsa',\n      parts: parts\n    });\n    this._isPriv = true;\n    return this._key;\n  } else if (this._algo === 'ecdsa') {\n    if (CRYPTO_HAVE_ECDH) {\n      this._dh.generateKeys();\n      parts.push({\n        name: 'curve',\n        data: Buffer.from(this._curve)\n      });\n      parts.push({\n        name: 'Q',\n        data: this._dh.getPublicKey()\n      });\n      parts.push({\n        name: 'd',\n        data: this._dh.getPrivateKey()\n      });\n      this._key = new PrivateKey({\n        type: 'ecdsa',\n        curve: this._curve,\n        parts: parts\n      });\n      this._isPriv = true;\n      return this._key;\n    } else {\n      var n = this._ecParams.getN();\n      var r = new jsbn(crypto.randomBytes(n.bitLength()));\n      var n1 = n.subtract(jsbn.ONE);\n      priv = r.mod(n1).add(jsbn.ONE);\n      pub = this._ecParams.getG().multiply(priv);\n      priv = Buffer.from(priv.toByteArray());\n      pub = Buffer.from(this._ecParams.getCurve().encodePointHex(pub), 'hex');\n      this._priv = new ECPrivate(this._ecParams, priv);\n      parts.push({\n        name: 'curve',\n        data: Buffer.from(this._curve)\n      });\n      parts.push({\n        name: 'Q',\n        data: pub\n      });\n      parts.push({\n        name: 'd',\n        data: priv\n      });\n      this._key = new PrivateKey({\n        type: 'ecdsa',\n        curve: this._curve,\n        parts: parts\n      });\n      this._isPriv = true;\n      return this._key;\n    }\n  } else if (this._algo === 'curve25519') {\n    var pair = nacl.box.keyPair();\n    priv = Buffer.from(pair.secretKey);\n    pub = Buffer.from(pair.publicKey);\n    priv = Buffer.concat([priv, pub]);\n    assert.strictEqual(priv.length, 64);\n    assert.strictEqual(pub.length, 32);\n    parts.push({\n      name: 'A',\n      data: pub\n    });\n    parts.push({\n      name: 'k',\n      data: priv\n    });\n    this._key = new PrivateKey({\n      type: 'curve25519',\n      parts: parts\n    });\n    this._isPriv = true;\n    return this._key;\n  }\n  throw new Error('Invalid algorithm: ' + this._algo);\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */\n\nfunction X9ECParameters(name) {\n  var params = algs.curves[name];\n  assert.object(params);\n  var p = new jsbn(params.p);\n  var a = new jsbn(params.a);\n  var b = new jsbn(params.b);\n  var n = new jsbn(params.n);\n  var h = jsbn.ONE;\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(params.G.toString('hex'));\n  this.curve = curve;\n  this.g = G;\n  this.n = n;\n  this.h = h;\n}\nX9ECParameters.prototype.getCurve = function () {\n  return this.curve;\n};\nX9ECParameters.prototype.getG = function () {\n  return this.g;\n};\nX9ECParameters.prototype.getN = function () {\n  return this.n;\n};\nX9ECParameters.prototype.getH = function () {\n  return this.h;\n};\nfunction ECPublic(params, buffer) {\n  this._params = params;\n  if (buffer[0] === 0x00) buffer = buffer.slice(1);\n  this._pub = params.getCurve().decodePointHex(buffer.toString('hex'));\n}\nfunction ECPrivate(params, buffer) {\n  this._params = params;\n  this._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function (pubKey) {\n  assert.ok(pubKey instanceof ECPublic);\n  var S = pubKey._pub.multiply(this._priv);\n  return Buffer.from(S.getX().toBigInteger().toByteArray());\n};\nfunction generateED25519() {\n  var pair = nacl.sign.keyPair();\n  var priv = Buffer.from(pair.secretKey);\n  var pub = Buffer.from(pair.publicKey);\n  assert.strictEqual(priv.length, 64);\n  assert.strictEqual(pub.length, 32);\n  var parts = [];\n  parts.push({\n    name: 'A',\n    data: pub\n  });\n  parts.push({\n    name: 'k',\n    data: priv.slice(0, 32)\n  });\n  var key = new PrivateKey({\n    type: 'ed25519',\n    parts: parts\n  });\n  return key;\n}\n\n/* Generates a new ECDSA private key on a given curve. */\nfunction generateECDSA(curve) {\n  var parts = [];\n  var key;\n  if (CRYPTO_HAVE_ECDH) {\n    /*\n     * Node crypto doesn't expose key generation directly, but the\n     * ECDH instances can generate keys. It turns out this just\n     * calls into the OpenSSL generic key generator, and we can\n     * read its output happily without doing an actual DH. So we\n     * use that here.\n     */\n    var osCurve = {\n      'nistp256': 'prime256v1',\n      'nistp384': 'secp384r1',\n      'nistp521': 'secp521r1'\n    }[curve];\n    var dh = crypto.createECDH(osCurve);\n    dh.generateKeys();\n    parts.push({\n      name: 'curve',\n      data: Buffer.from(curve)\n    });\n    parts.push({\n      name: 'Q',\n      data: dh.getPublicKey()\n    });\n    parts.push({\n      name: 'd',\n      data: dh.getPrivateKey()\n    });\n    key = new PrivateKey({\n      type: 'ecdsa',\n      curve: curve,\n      parts: parts\n    });\n    return key;\n  } else {\n    var ecParams = new X9ECParameters(curve);\n\n    /* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */\n    var n = ecParams.getN();\n    /*\n     * The crypto.randomBytes() function can only give us whole\n     * bytes, so taking a nod from X9.62, we round up.\n     */\n    var cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n    var c = new jsbn(crypto.randomBytes(cByteLen));\n    var n1 = n.subtract(jsbn.ONE);\n    var priv = c.mod(n1).add(jsbn.ONE);\n    var pub = ecParams.getG().multiply(priv);\n    priv = Buffer.from(priv.toByteArray());\n    pub = Buffer.from(ecParams.getCurve().encodePointHex(pub), 'hex');\n    parts.push({\n      name: 'curve',\n      data: Buffer.from(curve)\n    });\n    parts.push({\n      name: 'Q',\n      data: pub\n    });\n    parts.push({\n      name: 'd',\n      data: priv\n    });\n    key = new PrivateKey({\n      type: 'ecdsa',\n      curve: curve,\n      parts: parts\n    });\n    return key;\n  }\n}","map":{"version":3,"names":["module","exports","DiffieHellman","generateECDSA","generateED25519","assert","require","crypto","Buffer","algs","utils","nacl","Key","PrivateKey","CRYPTO_HAVE_ECDH","createECDH","undefined","ecdh","ec","jsbn","BigInteger","key","assertCompatible","_isPriv","isPrivateKey","_algo","type","_curve","curve","_key","Error","_dh","createDiffieHellman","part","p","data","g","_p","_g","setPrivateKey","x","setPublicKey","y","_ecParams","X9ECParameters","_priv","ECPrivate","d","call","Q","k","prototype","getPublicKey","toPublic","getPrivateKey","getKey","_keyCheck","pk","isPub","object","deepEqual","setKey","r","slice","computeSecret","otherpk","pub","ECPublic","deriveSharedSecret","A","length","priv","strictEqual","secret","box","before","Uint8Array","from","generateKey","parts","generateKeys","push","name","q","n","getN","randomBytes","bitLength","n1","subtract","ONE","mod","add","getG","multiply","toByteArray","getCurve","encodePointHex","pair","keyPair","secretKey","publicKey","concat","params","curves","a","b","h","ECCurveFp","G","decodePointHex","toString","getH","buffer","_params","_pub","mpNormalize","pubKey","ok","S","getX","toBigInteger","sign","osCurve","dh","ecParams","cByteLen","Math","ceil","c"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/dhe.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tDiffieHellman: DiffieHellman,\n\tgenerateECDSA: generateECDSA,\n\tgenerateED25519: generateED25519\n};\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar utils = require('./utils');\nvar nacl = require('tweetnacl');\n\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\n\nvar CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);\n\nvar ecdh = require('ecc-jsbn');\nvar ec = require('ecc-jsbn/lib/ec');\nvar jsbn = require('jsbn').BigInteger;\n\nfunction DiffieHellman(key) {\n\tutils.assertCompatible(key, Key, [1, 4], 'key');\n\tthis._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);\n\tthis._algo = key.type;\n\tthis._curve = key.curve;\n\tthis._key = key;\n\tif (key.type === 'dsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tthrow (new Error('Due to bugs in the node 0.10 ' +\n\t\t\t    'crypto API, node 0.12.x or later is required ' +\n\t\t\t    'to use DH'));\n\t\t}\n\t\tthis._dh = crypto.createDiffieHellman(\n\t\t    key.part.p.data, undefined,\n\t\t    key.part.g.data, undefined);\n\t\tthis._p = key.part.p;\n\t\tthis._g = key.part.g;\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.x.data);\n\t\tthis._dh.setPublicKey(key.part.y.data);\n\n\t} else if (key.type === 'ecdsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tthis._ecParams = new X9ECParameters(this._curve);\n\n\t\t\tif (this._isPriv) {\n\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t    this._ecParams, key.part.d.data);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar curve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[key.curve];\n\t\tthis._dh = crypto.createECDH(curve);\n\t\tif (typeof (this._dh) !== 'object' ||\n\t\t    typeof (this._dh.setPrivateKey) !== 'function') {\n\t\t\tCRYPTO_HAVE_ECDH = false;\n\t\t\tDiffieHellman.call(this, key);\n\t\t\treturn;\n\t\t}\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.d.data);\n\t\tthis._dh.setPublicKey(key.part.Q.data);\n\n\t} else if (key.type === 'curve25519') {\n\t\tif (this._isPriv) {\n\t\t\tutils.assertCompatible(key, PrivateKey, [1, 5], 'key');\n\t\t\tthis._priv = key.part.k.data;\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('DH not supported for ' + key.type + ' keys'));\n\t}\n}\n\nDiffieHellman.prototype.getPublicKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key.toPublic());\n\treturn (this._key);\n};\n\nDiffieHellman.prototype.getPrivateKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key);\n\telse\n\t\treturn (undefined);\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\n\nDiffieHellman.prototype._keyCheck = function (pk, isPub) {\n\tassert.object(pk, 'key');\n\tif (!isPub)\n\t\tutils.assertCompatible(pk, PrivateKey, [1, 3], 'key');\n\tutils.assertCompatible(pk, Key, [1, 4], 'key');\n\n\tif (pk.type !== this._algo) {\n\t\tthrow (new Error('A ' + pk.type + ' key cannot be used in ' +\n\t\t    this._algo + ' Diffie-Hellman'));\n\t}\n\n\tif (pk.curve !== this._curve) {\n\t\tthrow (new Error('A key from the ' + pk.curve + ' curve ' +\n\t\t    'cannot be used with a ' + this._curve +\n\t\t    ' Diffie-Hellman'));\n\t}\n\n\tif (pk.type === 'dsa') {\n\t\tassert.deepEqual(pk.part.p, this._p,\n\t\t    'DSA key prime does not match');\n\t\tassert.deepEqual(pk.part.g, this._g,\n\t\t    'DSA key generator does not match');\n\t}\n};\n\nDiffieHellman.prototype.setKey = function (pk) {\n\tthis._keyCheck(pk);\n\n\tif (pk.type === 'dsa') {\n\t\tthis._dh.setPrivateKey(pk.part.x.data);\n\t\tthis._dh.setPublicKey(pk.part.y.data);\n\n\t} else if (pk.type === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.setPrivateKey(pk.part.d.data);\n\t\t\tthis._dh.setPublicKey(pk.part.Q.data);\n\t\t} else {\n\t\t\tthis._priv = new ECPrivate(\n\t\t\t    this._ecParams, pk.part.d.data);\n\t\t}\n\n\t} else if (pk.type === 'curve25519') {\n\t\tvar k = pk.part.k;\n\t\tif (!pk.part.k)\n\t\t\tk = pk.part.r;\n\t\tthis._priv = k.data;\n\t\tif (this._priv[0] === 0x00)\n\t\t\tthis._priv = this._priv.slice(1);\n\t\tthis._priv = this._priv.slice(0, 32);\n\t}\n\tthis._key = pk;\n\tthis._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\n\nDiffieHellman.prototype.computeSecret = function (otherpk) {\n\tthis._keyCheck(otherpk, true);\n\tif (!this._isPriv)\n\t\tthrow (new Error('DH exchange has not been initialized with ' +\n\t\t    'a private key yet'));\n\n\tvar pub;\n\tif (this._algo === 'dsa') {\n\t\treturn (this._dh.computeSecret(\n\t\t    otherpk.part.y.data));\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\treturn (this._dh.computeSecret(\n\t\t\t    otherpk.part.Q.data));\n\t\t} else {\n\t\t\tpub = new ECPublic(\n\t\t\t    this._ecParams, otherpk.part.Q.data);\n\t\t\treturn (this._priv.deriveSharedSecret(pub));\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tpub = otherpk.part.A.data;\n\t\twhile (pub[0] === 0x00 && pub.length > 32)\n\t\t\tpub = pub.slice(1);\n\t\tvar priv = this._priv;\n\t\tassert.strictEqual(pub.length, 32);\n\t\tassert.strictEqual(priv.length, 32);\n\n\t\tvar secret = nacl.box.before(new Uint8Array(pub),\n\t\t    new Uint8Array(priv));\n\n\t\treturn (Buffer.from(secret));\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\n\nDiffieHellman.prototype.generateKey = function () {\n\tvar parts = [];\n\tvar priv, pub;\n\tif (this._algo === 'dsa') {\n\t\tthis._dh.generateKeys();\n\n\t\tparts.push({name: 'p', data: this._p.data});\n\t\tparts.push({name: 'q', data: this._key.part.q.data});\n\t\tparts.push({name: 'g', data: this._g.data});\n\t\tparts.push({name: 'y', data: this._dh.getPublicKey()});\n\t\tparts.push({name: 'x', data: this._dh.getPrivateKey()});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'dsa',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.generateKeys();\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(this._curve)});\n\t\t\tparts.push({name: 'Q', data: this._dh.getPublicKey()});\n\t\t\tparts.push({name: 'd', data: this._dh.getPrivateKey()});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\n\t\t} else {\n\t\t\tvar n = this._ecParams.getN();\n\t\t\tvar r = new jsbn(crypto.randomBytes(n.bitLength()));\n\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\tpriv = r.mod(n1).add(jsbn.ONE);\n\t\t\tpub = this._ecParams.getG().multiply(priv);\n\n\t\t\tpriv = Buffer.from(priv.toByteArray());\n\t\t\tpub = Buffer.from(this._ecParams.getCurve().\n\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\tthis._priv = new ECPrivate(this._ecParams, priv);\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(this._curve)});\n\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tvar pair = nacl.box.keyPair();\n\t\tpriv = Buffer.from(pair.secretKey);\n\t\tpub = Buffer.from(pair.publicKey);\n\t\tpriv = Buffer.concat([priv, pub]);\n\t\tassert.strictEqual(priv.length, 64);\n\t\tassert.strictEqual(pub.length, 32);\n\n\t\tparts.push({name: 'A', data: pub});\n\t\tparts.push({name: 'k', data: priv});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */\n\nfunction X9ECParameters(name) {\n\tvar params = algs.curves[name];\n\tassert.object(params);\n\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar n = new jsbn(params.n);\n\tvar h = jsbn.ONE;\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tthis.curve = curve;\n\tthis.g = G;\n\tthis.n = n;\n\tthis.h = h;\n}\nX9ECParameters.prototype.getCurve = function () { return (this.curve); };\nX9ECParameters.prototype.getG = function () { return (this.g); };\nX9ECParameters.prototype.getN = function () { return (this.n); };\nX9ECParameters.prototype.getH = function () { return (this.h); };\n\nfunction ECPublic(params, buffer) {\n\tthis._params = params;\n\tif (buffer[0] === 0x00)\n\t\tbuffer = buffer.slice(1);\n\tthis._pub = params.getCurve().decodePointHex(buffer.toString('hex'));\n}\n\nfunction ECPrivate(params, buffer) {\n\tthis._params = params;\n\tthis._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function (pubKey) {\n\tassert.ok(pubKey instanceof ECPublic);\n\tvar S = pubKey._pub.multiply(this._priv);\n\treturn (Buffer.from(S.getX().toBigInteger().toByteArray()));\n};\n\nfunction generateED25519() {\n\tvar pair = nacl.sign.keyPair();\n\tvar priv = Buffer.from(pair.secretKey);\n\tvar pub = Buffer.from(pair.publicKey);\n\tassert.strictEqual(priv.length, 64);\n\tassert.strictEqual(pub.length, 32);\n\n\tvar parts = [];\n\tparts.push({name: 'A', data: pub});\n\tparts.push({name: 'k', data: priv.slice(0, 32)});\n\tvar key = new PrivateKey({\n\t\ttype: 'ed25519',\n\t\tparts: parts\n\t});\n\treturn (key);\n}\n\n/* Generates a new ECDSA private key on a given curve. */\nfunction generateECDSA(curve) {\n\tvar parts = [];\n\tvar key;\n\n\tif (CRYPTO_HAVE_ECDH) {\n\t\t/*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */\n\t\tvar osCurve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[curve];\n\n\t\tvar dh = crypto.createECDH(osCurve);\n\t\tdh.generateKeys();\n\n\t\tparts.push({name: 'curve',\n\t\t    data: Buffer.from(curve)});\n\t\tparts.push({name: 'Q', data: dh.getPublicKey()});\n\t\tparts.push({name: 'd', data: dh.getPrivateKey()});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t} else {\n\n\t\tvar ecParams = new X9ECParameters(curve);\n\n\t\t/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */\n\t\tvar n = ecParams.getN();\n\t\t/*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */\n\t\tvar cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n\t\tvar c = new jsbn(crypto.randomBytes(cByteLen));\n\n\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\tvar priv = c.mod(n1).add(jsbn.ONE);\n\t\tvar pub = ecParams.getG().multiply(priv);\n\n\t\tpriv = Buffer.from(priv.toByteArray());\n\t\tpub = Buffer.from(ecParams.getCurve().\n\t\t    encodePointHex(pub), 'hex');\n\n\t\tparts.push({name: 'curve', data: Buffer.from(curve)});\n\t\tparts.push({name: 'Q', data: pub});\n\t\tparts.push({name: 'd', data: priv});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}