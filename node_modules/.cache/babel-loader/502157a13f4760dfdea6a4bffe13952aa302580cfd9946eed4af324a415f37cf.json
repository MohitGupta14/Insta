{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n  read: read,\n  readSSHPrivate: readSSHPrivate,\n  write: write\n};\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\nvar errors = require('../errors');\nvar bcrypt;\nfunction read(buf, options) {\n  return pem.read(buf, options);\n}\nvar MAGIC = 'openssh-key-v1';\nfunction readSSHPrivate(type, buf, options) {\n  buf = new SSHBuffer({\n    buffer: buf\n  });\n  var magic = buf.readCString();\n  assert.strictEqual(magic, MAGIC, 'bad magic string');\n  var cipher = buf.readString();\n  var kdf = buf.readString();\n  var kdfOpts = buf.readBuffer();\n  var nkeys = buf.readInt();\n  if (nkeys !== 1) {\n    throw new Error('OpenSSH-format key file contains ' + 'multiple keys: this is unsupported.');\n  }\n  var pubKey = buf.readBuffer();\n  if (type === 'public') {\n    assert.ok(buf.atEnd(), 'excess bytes left after key');\n    return rfc4253.read(pubKey);\n  }\n  var privKeyBlob = buf.readBuffer();\n  assert.ok(buf.atEnd(), 'excess bytes left after key');\n  var kdfOptsBuf = new SSHBuffer({\n    buffer: kdfOpts\n  });\n  switch (kdf) {\n    case 'none':\n      if (cipher !== 'none') {\n        throw new Error('OpenSSH-format key uses KDF \"none\" ' + 'but specifies a cipher other than \"none\"');\n      }\n      break;\n    case 'bcrypt':\n      var salt = kdfOptsBuf.readBuffer();\n      var rounds = kdfOptsBuf.readInt();\n      var cinf = utils.opensshCipherInfo(cipher);\n      if (bcrypt === undefined) {\n        bcrypt = require('bcrypt-pbkdf');\n      }\n      if (typeof options.passphrase === 'string') {\n        options.passphrase = Buffer.from(options.passphrase, 'utf-8');\n      }\n      if (!Buffer.isBuffer(options.passphrase)) {\n        throw new errors.KeyEncryptedError(options.filename, 'OpenSSH');\n      }\n      var pass = new Uint8Array(options.passphrase);\n      var salti = new Uint8Array(salt);\n      /* Use the pbkdf to derive both the key and the IV. */\n      var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n      var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n      if (res !== 0) {\n        throw new Error('bcrypt_pbkdf function returned ' + 'failure, parameters invalid');\n      }\n      out = Buffer.from(out);\n      var ckey = out.slice(0, cinf.keySize);\n      var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n      var cipherStream = crypto.createDecipheriv(cinf.opensslName, ckey, iv);\n      cipherStream.setAutoPadding(false);\n      var chunk,\n        chunks = [];\n      cipherStream.once('error', function (e) {\n        if (e.toString().indexOf('bad decrypt') !== -1) {\n          throw new Error('Incorrect passphrase ' + 'supplied, could not decrypt key');\n        }\n        throw e;\n      });\n      cipherStream.write(privKeyBlob);\n      cipherStream.end();\n      while ((chunk = cipherStream.read()) !== null) chunks.push(chunk);\n      privKeyBlob = Buffer.concat(chunks);\n      break;\n    default:\n      throw new Error('OpenSSH-format key uses unknown KDF \"' + kdf + '\"');\n  }\n  buf = new SSHBuffer({\n    buffer: privKeyBlob\n  });\n  var checkInt1 = buf.readInt();\n  var checkInt2 = buf.readInt();\n  if (checkInt1 !== checkInt2) {\n    throw new Error('Incorrect passphrase supplied, could not ' + 'decrypt key');\n  }\n  var ret = {};\n  var key = rfc4253.readInternal(ret, 'private', buf.remainder());\n  buf.skip(ret.consumed);\n  var comment = buf.readString();\n  key.comment = comment;\n  return key;\n}\nfunction write(key, options) {\n  var pubKey;\n  if (PrivateKey.isPrivateKey(key)) pubKey = key.toPublic();else pubKey = key;\n  var cipher = 'none';\n  var kdf = 'none';\n  var kdfopts = Buffer.alloc(0);\n  var cinf = {\n    blockSize: 8\n  };\n  var passphrase;\n  if (options !== undefined) {\n    passphrase = options.passphrase;\n    if (typeof passphrase === 'string') passphrase = Buffer.from(passphrase, 'utf-8');\n    if (passphrase !== undefined) {\n      assert.buffer(passphrase, 'options.passphrase');\n      assert.optionalString(options.cipher, 'options.cipher');\n      cipher = options.cipher;\n      if (cipher === undefined) cipher = 'aes128-ctr';\n      cinf = utils.opensshCipherInfo(cipher);\n      kdf = 'bcrypt';\n    }\n  }\n  var privBuf;\n  if (PrivateKey.isPrivateKey(key)) {\n    privBuf = new SSHBuffer({});\n    var checkInt = crypto.randomBytes(4).readUInt32BE(0);\n    privBuf.writeInt(checkInt);\n    privBuf.writeInt(checkInt);\n    privBuf.write(key.toBuffer('rfc4253'));\n    privBuf.writeString(key.comment || '');\n    var n = 1;\n    while (privBuf._offset % cinf.blockSize !== 0) privBuf.writeChar(n++);\n    privBuf = privBuf.toBuffer();\n  }\n  switch (kdf) {\n    case 'none':\n      break;\n    case 'bcrypt':\n      var salt = crypto.randomBytes(16);\n      var rounds = 16;\n      var kdfssh = new SSHBuffer({});\n      kdfssh.writeBuffer(salt);\n      kdfssh.writeInt(rounds);\n      kdfopts = kdfssh.toBuffer();\n      if (bcrypt === undefined) {\n        bcrypt = require('bcrypt-pbkdf');\n      }\n      var pass = new Uint8Array(passphrase);\n      var salti = new Uint8Array(salt);\n      /* Use the pbkdf to derive both the key and the IV. */\n      var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n      var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n      if (res !== 0) {\n        throw new Error('bcrypt_pbkdf function returned ' + 'failure, parameters invalid');\n      }\n      out = Buffer.from(out);\n      var ckey = out.slice(0, cinf.keySize);\n      var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n      var cipherStream = crypto.createCipheriv(cinf.opensslName, ckey, iv);\n      cipherStream.setAutoPadding(false);\n      var chunk,\n        chunks = [];\n      cipherStream.once('error', function (e) {\n        throw e;\n      });\n      cipherStream.write(privBuf);\n      cipherStream.end();\n      while ((chunk = cipherStream.read()) !== null) chunks.push(chunk);\n      privBuf = Buffer.concat(chunks);\n      break;\n    default:\n      throw new Error('Unsupported kdf ' + kdf);\n  }\n  var buf = new SSHBuffer({});\n  buf.writeCString(MAGIC);\n  buf.writeString(cipher); /* cipher */\n  buf.writeString(kdf); /* kdf */\n  buf.writeBuffer(kdfopts); /* kdfoptions */\n\n  buf.writeInt(1); /* nkeys */\n  buf.writeBuffer(pubKey.toBuffer('rfc4253'));\n  if (privBuf) buf.writeBuffer(privBuf);\n  buf = buf.toBuffer();\n  var header;\n  if (PrivateKey.isPrivateKey(key)) header = 'OPENSSH PRIVATE KEY';else header = 'OPENSSH PUBLIC KEY';\n  var tmp = buf.toString('base64');\n  var len = tmp.length + tmp.length / 70 + 18 + 16 + header.length * 2 + 10;\n  buf = Buffer.alloc(len);\n  var o = 0;\n  o += buf.write('-----BEGIN ' + header + '-----\\n', o);\n  for (var i = 0; i < tmp.length;) {\n    var limit = i + 70;\n    if (limit > tmp.length) limit = tmp.length;\n    o += buf.write(tmp.slice(i, limit), o);\n    buf[o++] = 10;\n    i = limit;\n  }\n  o += buf.write('-----END ' + header + '-----\\n', o);\n  return buf.slice(0, o);\n}","map":{"version":3,"names":["module","exports","read","readSSHPrivate","write","assert","require","asn1","Buffer","algs","utils","crypto","Key","PrivateKey","pem","rfc4253","SSHBuffer","errors","bcrypt","buf","options","MAGIC","type","buffer","magic","readCString","strictEqual","cipher","readString","kdf","kdfOpts","readBuffer","nkeys","readInt","Error","pubKey","ok","atEnd","privKeyBlob","kdfOptsBuf","salt","rounds","cinf","opensshCipherInfo","undefined","passphrase","from","isBuffer","KeyEncryptedError","filename","pass","Uint8Array","salti","out","keySize","blockSize","res","pbkdf","length","ckey","slice","iv","cipherStream","createDecipheriv","opensslName","setAutoPadding","chunk","chunks","once","e","toString","indexOf","end","push","concat","checkInt1","checkInt2","ret","key","readInternal","remainder","skip","consumed","comment","isPrivateKey","toPublic","kdfopts","alloc","optionalString","privBuf","checkInt","randomBytes","readUInt32BE","writeInt","toBuffer","writeString","n","_offset","writeChar","kdfssh","writeBuffer","createCipheriv","writeCString","header","tmp","len","o","i","limit"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/formats/ssh-private.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\nvar errors = require('../errors');\n\nvar bcrypt;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf, options) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\tvar kdfOpts = buf.readBuffer();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n\tswitch (kdf) {\n\tcase 'none':\n\t\tif (cipher !== 'none') {\n\t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n\t\t\t     'but specifies a cipher other than \"none\"'));\n\t\t}\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = kdfOptsBuf.readBuffer();\n\t\tvar rounds = kdfOptsBuf.readInt();\n\t\tvar cinf = utils.opensshCipherInfo(cipher);\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\n\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\toptions.passphrase = Buffer.from(options.passphrase,\n\t\t\t    'utf-8');\n\t\t}\n\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t    options.filename, 'OpenSSH'));\n\t\t}\n\n\t\tvar pass = new Uint8Array(options.passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privKeyBlob);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivKeyBlob = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n\t}\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tif (checkInt1 !== checkInt2) {\n\t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n\t\t    'decrypt key'));\n\t}\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar cipher = 'none';\n\tvar kdf = 'none';\n\tvar kdfopts = Buffer.alloc(0);\n\tvar cinf = { blockSize: 8 };\n\tvar passphrase;\n\tif (options !== undefined) {\n\t\tpassphrase = options.passphrase;\n\t\tif (typeof (passphrase) === 'string')\n\t\t\tpassphrase = Buffer.from(passphrase, 'utf-8');\n\t\tif (passphrase !== undefined) {\n\t\t\tassert.buffer(passphrase, 'options.passphrase');\n\t\t\tassert.optionalString(options.cipher, 'options.cipher');\n\t\t\tcipher = options.cipher;\n\t\t\tif (cipher === undefined)\n\t\t\t\tcipher = 'aes128-ctr';\n\t\t\tcinf = utils.opensshCipherInfo(cipher);\n\t\t\tkdf = 'bcrypt';\n\t\t}\n\t}\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % cinf.blockSize !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t\tprivBuf = privBuf.toBuffer();\n\t}\n\n\tswitch (kdf) {\n\tcase 'none':\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = crypto.randomBytes(16);\n\t\tvar rounds = 16;\n\t\tvar kdfssh = new SSHBuffer({});\n\t\tkdfssh.writeBuffer(salt);\n\t\tkdfssh.writeInt(rounds);\n\t\tkdfopts = kdfssh.toBuffer();\n\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\t\tvar pass = new Uint8Array(passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n\t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privBuf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivBuf = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported kdf ' + kdf));\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString(cipher);\t/* cipher */\n\tbuf.writeString(kdf);\t\t/* kdf */\n\tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf);\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}