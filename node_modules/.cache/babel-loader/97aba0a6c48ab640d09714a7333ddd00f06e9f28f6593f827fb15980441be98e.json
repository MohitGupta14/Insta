{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar asn1 = require('asn1');\nvar SSHBuffer = require('./ssh-buffer');\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\nfunction Signature(opts) {\n  assert.object(opts, 'options');\n  assert.arrayOfObject(opts.parts, 'options.parts');\n  assert.string(opts.type, 'options.type');\n  var partLookup = {};\n  for (var i = 0; i < opts.parts.length; ++i) {\n    var part = opts.parts[i];\n    partLookup[part.name] = part;\n  }\n  this.type = opts.type;\n  this.hashAlgorithm = opts.hashAlgo;\n  this.curve = opts.curve;\n  this.parts = opts.parts;\n  this.part = partLookup;\n}\nSignature.prototype.toBuffer = function (format) {\n  if (format === undefined) format = 'asn1';\n  assert.string(format, 'format');\n  var buf;\n  var stype = 'ssh-' + this.type;\n  switch (this.type) {\n    case 'rsa':\n      switch (this.hashAlgorithm) {\n        case 'sha256':\n          stype = 'rsa-sha2-256';\n          break;\n        case 'sha512':\n          stype = 'rsa-sha2-512';\n          break;\n        case 'sha1':\n        case undefined:\n          break;\n        default:\n          throw new Error('SSH signature ' + 'format does not support hash ' + 'algorithm ' + this.hashAlgorithm);\n      }\n      if (format === 'ssh') {\n        buf = new SSHBuffer({});\n        buf.writeString(stype);\n        buf.writePart(this.part.sig);\n        return buf.toBuffer();\n      } else {\n        return this.part.sig.data;\n      }\n      break;\n    case 'ed25519':\n      if (format === 'ssh') {\n        buf = new SSHBuffer({});\n        buf.writeString(stype);\n        buf.writePart(this.part.sig);\n        return buf.toBuffer();\n      } else {\n        return this.part.sig.data;\n      }\n      break;\n    case 'dsa':\n    case 'ecdsa':\n      var r, s;\n      if (format === 'asn1') {\n        var der = new asn1.BerWriter();\n        der.startSequence();\n        r = utils.mpNormalize(this.part.r.data);\n        s = utils.mpNormalize(this.part.s.data);\n        der.writeBuffer(r, asn1.Ber.Integer);\n        der.writeBuffer(s, asn1.Ber.Integer);\n        der.endSequence();\n        return der.buffer;\n      } else if (format === 'ssh' && this.type === 'dsa') {\n        buf = new SSHBuffer({});\n        buf.writeString('ssh-dss');\n        r = this.part.r.data;\n        if (r.length > 20 && r[0] === 0x00) r = r.slice(1);\n        s = this.part.s.data;\n        if (s.length > 20 && s[0] === 0x00) s = s.slice(1);\n        if (this.hashAlgorithm && this.hashAlgorithm !== 'sha1' || r.length + s.length !== 40) {\n          throw new Error('OpenSSH only supports ' + 'DSA signatures with SHA1 hash');\n        }\n        buf.writeBuffer(Buffer.concat([r, s]));\n        return buf.toBuffer();\n      } else if (format === 'ssh' && this.type === 'ecdsa') {\n        var inner = new SSHBuffer({});\n        r = this.part.r.data;\n        inner.writeBuffer(r);\n        inner.writePart(this.part.s);\n        buf = new SSHBuffer({});\n        /* XXX: find a more proper way to do this? */\n        var curve;\n        if (r[0] === 0x00) r = r.slice(1);\n        var sz = r.length * 8;\n        if (sz === 256) curve = 'nistp256';else if (sz === 384) curve = 'nistp384';else if (sz === 528) curve = 'nistp521';\n        buf.writeString('ecdsa-sha2-' + curve);\n        buf.writeBuffer(inner.toBuffer());\n        return buf.toBuffer();\n      }\n      throw new Error('Invalid signature format');\n    default:\n      throw new Error('Invalid signature data');\n  }\n};\nSignature.prototype.toString = function (format) {\n  assert.optionalString(format, 'format');\n  return this.toBuffer(format).toString('base64');\n};\nSignature.parse = function (data, type, format) {\n  if (typeof data === 'string') data = Buffer.from(data, 'base64');\n  assert.buffer(data, 'data');\n  assert.string(format, 'format');\n  assert.string(type, 'type');\n  var opts = {};\n  opts.type = type.toLowerCase();\n  opts.parts = [];\n  try {\n    assert.ok(data.length > 0, 'signature must not be empty');\n    switch (opts.type) {\n      case 'rsa':\n        return parseOneNum(data, type, format, opts);\n      case 'ed25519':\n        return parseOneNum(data, type, format, opts);\n      case 'dsa':\n      case 'ecdsa':\n        if (format === 'asn1') return parseDSAasn1(data, type, format, opts);else if (opts.type === 'dsa') return parseDSA(data, type, format, opts);else return parseECDSA(data, type, format, opts);\n      default:\n        throw new InvalidAlgorithmError(type);\n    }\n  } catch (e) {\n    if (e instanceof InvalidAlgorithmError) throw e;\n    throw new SignatureParseError(type, format, e);\n  }\n};\nfunction parseOneNum(data, type, format, opts) {\n  if (format === 'ssh') {\n    try {\n      var buf = new SSHBuffer({\n        buffer: data\n      });\n      var head = buf.readString();\n    } catch (e) {\n      /* fall through */\n    }\n    if (buf !== undefined) {\n      var msg = 'SSH signature does not match expected ' + 'type (expected ' + type + ', got ' + head + ')';\n      switch (head) {\n        case 'ssh-rsa':\n          assert.strictEqual(type, 'rsa', msg);\n          opts.hashAlgo = 'sha1';\n          break;\n        case 'rsa-sha2-256':\n          assert.strictEqual(type, 'rsa', msg);\n          opts.hashAlgo = 'sha256';\n          break;\n        case 'rsa-sha2-512':\n          assert.strictEqual(type, 'rsa', msg);\n          opts.hashAlgo = 'sha512';\n          break;\n        case 'ssh-ed25519':\n          assert.strictEqual(type, 'ed25519', msg);\n          opts.hashAlgo = 'sha512';\n          break;\n        default:\n          throw new Error('Unknown SSH signature ' + 'type: ' + head);\n      }\n      var sig = buf.readPart();\n      assert.ok(buf.atEnd(), 'extra trailing bytes');\n      sig.name = 'sig';\n      opts.parts.push(sig);\n      return new Signature(opts);\n    }\n  }\n  opts.parts.push({\n    name: 'sig',\n    data: data\n  });\n  return new Signature(opts);\n}\nfunction parseDSAasn1(data, type, format, opts) {\n  var der = new asn1.BerReader(data);\n  der.readSequence();\n  var r = der.readString(asn1.Ber.Integer, true);\n  var s = der.readString(asn1.Ber.Integer, true);\n  opts.parts.push({\n    name: 'r',\n    data: utils.mpNormalize(r)\n  });\n  opts.parts.push({\n    name: 's',\n    data: utils.mpNormalize(s)\n  });\n  return new Signature(opts);\n}\nfunction parseDSA(data, type, format, opts) {\n  if (data.length != 40) {\n    var buf = new SSHBuffer({\n      buffer: data\n    });\n    var d = buf.readBuffer();\n    if (d.toString('ascii') === 'ssh-dss') d = buf.readBuffer();\n    assert.ok(buf.atEnd(), 'extra trailing bytes');\n    assert.strictEqual(d.length, 40, 'invalid inner length');\n    data = d;\n  }\n  opts.parts.push({\n    name: 'r',\n    data: data.slice(0, 20)\n  });\n  opts.parts.push({\n    name: 's',\n    data: data.slice(20, 40)\n  });\n  return new Signature(opts);\n}\nfunction parseECDSA(data, type, format, opts) {\n  var buf = new SSHBuffer({\n    buffer: data\n  });\n  var r, s;\n  var inner = buf.readBuffer();\n  var stype = inner.toString('ascii');\n  if (stype.slice(0, 6) === 'ecdsa-') {\n    var parts = stype.split('-');\n    assert.strictEqual(parts[0], 'ecdsa');\n    assert.strictEqual(parts[1], 'sha2');\n    opts.curve = parts[2];\n    switch (opts.curve) {\n      case 'nistp256':\n        opts.hashAlgo = 'sha256';\n        break;\n      case 'nistp384':\n        opts.hashAlgo = 'sha384';\n        break;\n      case 'nistp521':\n        opts.hashAlgo = 'sha512';\n        break;\n      default:\n        throw new Error('Unsupported ECDSA curve: ' + opts.curve);\n    }\n    inner = buf.readBuffer();\n    assert.ok(buf.atEnd(), 'extra trailing bytes on outer');\n    buf = new SSHBuffer({\n      buffer: inner\n    });\n    r = buf.readPart();\n  } else {\n    r = {\n      data: inner\n    };\n  }\n  s = buf.readPart();\n  assert.ok(buf.atEnd(), 'extra trailing bytes');\n  r.name = 'r';\n  s.name = 's';\n  opts.parts.push(r);\n  opts.parts.push(s);\n  return new Signature(opts);\n}\nSignature.isSignature = function (obj, ver) {\n  return utils.isCompatible(obj, Signature, ver);\n};\n\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */\nSignature.prototype._sshpkApiVersion = [2, 1];\nSignature._oldVersionDetect = function (obj) {\n  assert.func(obj.toBuffer);\n  if (obj.hasOwnProperty('hashAlgorithm')) return [2, 0];\n  return [1, 0];\n};","map":{"version":3,"names":["module","exports","Signature","assert","require","Buffer","algs","crypto","errs","utils","asn1","SSHBuffer","InvalidAlgorithmError","SignatureParseError","opts","object","arrayOfObject","parts","string","type","partLookup","i","length","part","name","hashAlgorithm","hashAlgo","curve","prototype","toBuffer","format","undefined","buf","stype","Error","writeString","writePart","sig","data","r","s","der","BerWriter","startSequence","mpNormalize","writeBuffer","Ber","Integer","endSequence","buffer","slice","concat","inner","sz","toString","optionalString","parse","from","toLowerCase","ok","parseOneNum","parseDSAasn1","parseDSA","parseECDSA","e","head","readString","msg","strictEqual","readPart","atEnd","push","BerReader","readSequence","d","readBuffer","split","isSignature","obj","ver","isCompatible","_sshpkApiVersion","_oldVersionDetect","func","hasOwnProperty"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/sshpk/lib/signature.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar asn1 = require('asn1');\nvar SSHBuffer = require('./ssh-buffer');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\n\nfunction Signature(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.parts, 'options.parts');\n\tassert.string(opts.type, 'options.type');\n\n\tvar partLookup = {};\n\tfor (var i = 0; i < opts.parts.length; ++i) {\n\t\tvar part = opts.parts[i];\n\t\tpartLookup[part.name] = part;\n\t}\n\n\tthis.type = opts.type;\n\tthis.hashAlgorithm = opts.hashAlgo;\n\tthis.curve = opts.curve;\n\tthis.parts = opts.parts;\n\tthis.part = partLookup;\n}\n\nSignature.prototype.toBuffer = function (format) {\n\tif (format === undefined)\n\t\tformat = 'asn1';\n\tassert.string(format, 'format');\n\n\tvar buf;\n\tvar stype = 'ssh-' + this.type;\n\n\tswitch (this.type) {\n\tcase 'rsa':\n\t\tswitch (this.hashAlgorithm) {\n\t\tcase 'sha256':\n\t\t\tstype = 'rsa-sha2-256';\n\t\t\tbreak;\n\t\tcase 'sha512':\n\t\t\tstype = 'rsa-sha2-512';\n\t\t\tbreak;\n\t\tcase 'sha1':\n\t\tcase undefined:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('SSH signature ' +\n\t\t\t    'format does not support hash ' +\n\t\t\t    'algorithm ' + this.hashAlgorithm));\n\t\t}\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'ed25519':\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'dsa':\n\tcase 'ecdsa':\n\t\tvar r, s;\n\t\tif (format === 'asn1') {\n\t\t\tvar der = new asn1.BerWriter();\n\t\t\tder.startSequence();\n\t\t\tr = utils.mpNormalize(this.part.r.data);\n\t\t\ts = utils.mpNormalize(this.part.s.data);\n\t\t\tder.writeBuffer(r, asn1.Ber.Integer);\n\t\t\tder.writeBuffer(s, asn1.Ber.Integer);\n\t\t\tder.endSequence();\n\t\t\treturn (der.buffer);\n\t\t} else if (format === 'ssh' && this.type === 'dsa') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString('ssh-dss');\n\t\t\tr = this.part.r.data;\n\t\t\tif (r.length > 20 && r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\ts = this.part.s.data;\n\t\t\tif (s.length > 20 && s[0] === 0x00)\n\t\t\t\ts = s.slice(1);\n\t\t\tif ((this.hashAlgorithm &&\n\t\t\t    this.hashAlgorithm !== 'sha1') ||\n\t\t\t    r.length + s.length !== 40) {\n\t\t\t\tthrow (new Error('OpenSSH only supports ' +\n\t\t\t\t    'DSA signatures with SHA1 hash'));\n\t\t\t}\n\t\t\tbuf.writeBuffer(Buffer.concat([r, s]));\n\t\t\treturn (buf.toBuffer());\n\t\t} else if (format === 'ssh' && this.type === 'ecdsa') {\n\t\t\tvar inner = new SSHBuffer({});\n\t\t\tr = this.part.r.data;\n\t\t\tinner.writeBuffer(r);\n\t\t\tinner.writePart(this.part.s);\n\n\t\t\tbuf = new SSHBuffer({});\n\t\t\t/* XXX: find a more proper way to do this? */\n\t\t\tvar curve;\n\t\t\tif (r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\tvar sz = r.length * 8;\n\t\t\tif (sz === 256)\n\t\t\t\tcurve = 'nistp256';\n\t\t\telse if (sz === 384)\n\t\t\t\tcurve = 'nistp384';\n\t\t\telse if (sz === 528)\n\t\t\t\tcurve = 'nistp521';\n\t\t\tbuf.writeString('ecdsa-sha2-' + curve);\n\t\t\tbuf.writeBuffer(inner.toBuffer());\n\t\t\treturn (buf.toBuffer());\n\t\t}\n\t\tthrow (new Error('Invalid signature format'));\n\tdefault:\n\t\tthrow (new Error('Invalid signature data'));\n\t}\n};\n\nSignature.prototype.toString = function (format) {\n\tassert.optionalString(format, 'format');\n\treturn (this.toBuffer(format).toString('base64'));\n};\n\nSignature.parse = function (data, type, format) {\n\tif (typeof (data) === 'string')\n\t\tdata = Buffer.from(data, 'base64');\n\tassert.buffer(data, 'data');\n\tassert.string(format, 'format');\n\tassert.string(type, 'type');\n\n\tvar opts = {};\n\topts.type = type.toLowerCase();\n\topts.parts = [];\n\n\ttry {\n\t\tassert.ok(data.length > 0, 'signature must not be empty');\n\t\tswitch (opts.type) {\n\t\tcase 'rsa':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\t\tcase 'ed25519':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\n\t\tcase 'dsa':\n\t\tcase 'ecdsa':\n\t\t\tif (format === 'asn1')\n\t\t\t\treturn (parseDSAasn1(data, type, format, opts));\n\t\t\telse if (opts.type === 'dsa')\n\t\t\t\treturn (parseDSA(data, type, format, opts));\n\t\t\telse\n\t\t\t\treturn (parseECDSA(data, type, format, opts));\n\n\t\tdefault:\n\t\t\tthrow (new InvalidAlgorithmError(type));\n\t\t}\n\n\t} catch (e) {\n\t\tif (e instanceof InvalidAlgorithmError)\n\t\t\tthrow (e);\n\t\tthrow (new SignatureParseError(type, format, e));\n\t}\n};\n\nfunction parseOneNum(data, type, format, opts) {\n\tif (format === 'ssh') {\n\t\ttry {\n\t\t\tvar buf = new SSHBuffer({buffer: data});\n\t\t\tvar head = buf.readString();\n\t\t} catch (e) {\n\t\t\t/* fall through */\n\t\t}\n\t\tif (buf !== undefined) {\n\t\t\tvar msg = 'SSH signature does not match expected ' +\n\t\t\t    'type (expected ' + type + ', got ' + head + ')';\n\t\t\tswitch (head) {\n\t\t\tcase 'ssh-rsa':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha1';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-256':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha256';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-512':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tcase 'ssh-ed25519':\n\t\t\t\tassert.strictEqual(type, 'ed25519', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow (new Error('Unknown SSH signature ' +\n\t\t\t\t    'type: ' + head));\n\t\t\t}\n\t\t\tvar sig = buf.readPart();\n\t\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\t\tsig.name = 'sig';\n\t\t\topts.parts.push(sig);\n\t\t\treturn (new Signature(opts));\n\t\t}\n\t}\n\topts.parts.push({name: 'sig', data: data});\n\treturn (new Signature(opts));\n}\n\nfunction parseDSAasn1(data, type, format, opts) {\n\tvar der = new asn1.BerReader(data);\n\tder.readSequence();\n\tvar r = der.readString(asn1.Ber.Integer, true);\n\tvar s = der.readString(asn1.Ber.Integer, true);\n\n\topts.parts.push({name: 'r', data: utils.mpNormalize(r)});\n\topts.parts.push({name: 's', data: utils.mpNormalize(s)});\n\n\treturn (new Signature(opts));\n}\n\nfunction parseDSA(data, type, format, opts) {\n\tif (data.length != 40) {\n\t\tvar buf = new SSHBuffer({buffer: data});\n\t\tvar d = buf.readBuffer();\n\t\tif (d.toString('ascii') === 'ssh-dss')\n\t\t\td = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\tassert.strictEqual(d.length, 40, 'invalid inner length');\n\t\tdata = d;\n\t}\n\topts.parts.push({name: 'r', data: data.slice(0, 20)});\n\topts.parts.push({name: 's', data: data.slice(20, 40)});\n\treturn (new Signature(opts));\n}\n\nfunction parseECDSA(data, type, format, opts) {\n\tvar buf = new SSHBuffer({buffer: data});\n\n\tvar r, s;\n\tvar inner = buf.readBuffer();\n\tvar stype = inner.toString('ascii');\n\tif (stype.slice(0, 6) === 'ecdsa-') {\n\t\tvar parts = stype.split('-');\n\t\tassert.strictEqual(parts[0], 'ecdsa');\n\t\tassert.strictEqual(parts[1], 'sha2');\n\t\topts.curve = parts[2];\n\t\tswitch (opts.curve) {\n\t\tcase 'nistp256':\n\t\t\topts.hashAlgo = 'sha256';\n\t\t\tbreak;\n\t\tcase 'nistp384':\n\t\t\topts.hashAlgo = 'sha384';\n\t\t\tbreak;\n\t\tcase 'nistp521':\n\t\t\topts.hashAlgo = 'sha512';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('Unsupported ECDSA curve: ' +\n\t\t\t    opts.curve));\n\t\t}\n\t\tinner = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes on outer');\n\t\tbuf = new SSHBuffer({buffer: inner});\n\t\tr = buf.readPart();\n\t} else {\n\t\tr = {data: inner};\n\t}\n\n\ts = buf.readPart();\n\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\n\tr.name = 'r';\n\ts.name = 's';\n\n\topts.parts.push(r);\n\topts.parts.push(s);\n\treturn (new Signature(opts));\n}\n\nSignature.isSignature = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Signature, ver));\n};\n\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */\nSignature.prototype._sshpkApiVersion = [2, 1];\n\nSignature._oldVersionDetect = function (obj) {\n\tassert.func(obj.toBuffer);\n\tif (obj.hasOwnProperty('hashAlgorithm'))\n\t\treturn ([2, 0]);\n\treturn ([1, 0]);\n};\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAO,GAAGC,SAAS;AAE1B,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAc,CAAC,CAACC,MAAM;AAC3C,IAAIC,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAII,IAAI,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAC9B,IAAIK,KAAK,GAAGL,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIM,IAAI,GAAGN,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIO,SAAS,GAAGP,OAAO,CAAC,cAAc,CAAC;AAEvC,IAAIQ,qBAAqB,GAAGJ,IAAI,CAACI,qBAAqB;AACtD,IAAIC,mBAAmB,GAAGL,IAAI,CAACK,mBAAmB;AAElD,SAASX,SAASA,CAACY,IAAI,EAAE;EACxBX,MAAM,CAACY,MAAM,CAACD,IAAI,EAAE,SAAS,CAAC;EAC9BX,MAAM,CAACa,aAAa,CAACF,IAAI,CAACG,KAAK,EAAE,eAAe,CAAC;EACjDd,MAAM,CAACe,MAAM,CAACJ,IAAI,CAACK,IAAI,EAAE,cAAc,CAAC;EAExC,IAAIC,UAAU,GAAG,CAAC,CAAC;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACG,KAAK,CAACK,MAAM,EAAE,EAAED,CAAC,EAAE;IAC3C,IAAIE,IAAI,GAAGT,IAAI,CAACG,KAAK,CAACI,CAAC,CAAC;IACxBD,UAAU,CAACG,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI;EAC7B;EAEA,IAAI,CAACJ,IAAI,GAAGL,IAAI,CAACK,IAAI;EACrB,IAAI,CAACM,aAAa,GAAGX,IAAI,CAACY,QAAQ;EAClC,IAAI,CAACC,KAAK,GAAGb,IAAI,CAACa,KAAK;EACvB,IAAI,CAACV,KAAK,GAAGH,IAAI,CAACG,KAAK;EACvB,IAAI,CAACM,IAAI,GAAGH,UAAU;AACvB;AAEAlB,SAAS,CAAC0B,SAAS,CAACC,QAAQ,GAAG,UAAUC,MAAM,EAAE;EAChD,IAAIA,MAAM,KAAKC,SAAS,EACvBD,MAAM,GAAG,MAAM;EAChB3B,MAAM,CAACe,MAAM,CAACY,MAAM,EAAE,QAAQ,CAAC;EAE/B,IAAIE,GAAG;EACP,IAAIC,KAAK,GAAG,MAAM,GAAG,IAAI,CAACd,IAAI;EAE9B,QAAQ,IAAI,CAACA,IAAI;IACjB,KAAK,KAAK;MACT,QAAQ,IAAI,CAACM,aAAa;QAC1B,KAAK,QAAQ;UACZQ,KAAK,GAAG,cAAc;UACtB;QACD,KAAK,QAAQ;UACZA,KAAK,GAAG,cAAc;UACtB;QACD,KAAK,MAAM;QACX,KAAKF,SAAS;UACb;QACD;UACC,MAAO,IAAIG,KAAK,CAAC,gBAAgB,GAC7B,+BAA+B,GAC/B,YAAY,GAAG,IAAI,CAACT,aAAa,CAAC;MAAE;MAEzC,IAAIK,MAAM,KAAK,KAAK,EAAE;QACrBE,GAAG,GAAG,IAAIrB,SAAS,CAAC,CAAC,CAAC,CAAC;QACvBqB,GAAG,CAACG,WAAW,CAACF,KAAK,CAAC;QACtBD,GAAG,CAACI,SAAS,CAAC,IAAI,CAACb,IAAI,CAACc,GAAG,CAAC;QAC5B,OAAQL,GAAG,CAACH,QAAQ,EAAE;MACvB,CAAC,MAAM;QACN,OAAQ,IAAI,CAACN,IAAI,CAACc,GAAG,CAACC,IAAI;MAC3B;MACA;IAED,KAAK,SAAS;MACb,IAAIR,MAAM,KAAK,KAAK,EAAE;QACrBE,GAAG,GAAG,IAAIrB,SAAS,CAAC,CAAC,CAAC,CAAC;QACvBqB,GAAG,CAACG,WAAW,CAACF,KAAK,CAAC;QACtBD,GAAG,CAACI,SAAS,CAAC,IAAI,CAACb,IAAI,CAACc,GAAG,CAAC;QAC5B,OAAQL,GAAG,CAACH,QAAQ,EAAE;MACvB,CAAC,MAAM;QACN,OAAQ,IAAI,CAACN,IAAI,CAACc,GAAG,CAACC,IAAI;MAC3B;MACA;IAED,KAAK,KAAK;IACV,KAAK,OAAO;MACX,IAAIC,CAAC,EAAEC,CAAC;MACR,IAAIV,MAAM,KAAK,MAAM,EAAE;QACtB,IAAIW,GAAG,GAAG,IAAI/B,IAAI,CAACgC,SAAS,EAAE;QAC9BD,GAAG,CAACE,aAAa,EAAE;QACnBJ,CAAC,GAAG9B,KAAK,CAACmC,WAAW,CAAC,IAAI,CAACrB,IAAI,CAACgB,CAAC,CAACD,IAAI,CAAC;QACvCE,CAAC,GAAG/B,KAAK,CAACmC,WAAW,CAAC,IAAI,CAACrB,IAAI,CAACiB,CAAC,CAACF,IAAI,CAAC;QACvCG,GAAG,CAACI,WAAW,CAACN,CAAC,EAAE7B,IAAI,CAACoC,GAAG,CAACC,OAAO,CAAC;QACpCN,GAAG,CAACI,WAAW,CAACL,CAAC,EAAE9B,IAAI,CAACoC,GAAG,CAACC,OAAO,CAAC;QACpCN,GAAG,CAACO,WAAW,EAAE;QACjB,OAAQP,GAAG,CAACQ,MAAM;MACnB,CAAC,MAAM,IAAInB,MAAM,KAAK,KAAK,IAAI,IAAI,CAACX,IAAI,KAAK,KAAK,EAAE;QACnDa,GAAG,GAAG,IAAIrB,SAAS,CAAC,CAAC,CAAC,CAAC;QACvBqB,GAAG,CAACG,WAAW,CAAC,SAAS,CAAC;QAC1BI,CAAC,GAAG,IAAI,CAAChB,IAAI,CAACgB,CAAC,CAACD,IAAI;QACpB,IAAIC,CAAC,CAACjB,MAAM,GAAG,EAAE,IAAIiB,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EACjCA,CAAC,GAAGA,CAAC,CAACW,KAAK,CAAC,CAAC,CAAC;QACfV,CAAC,GAAG,IAAI,CAACjB,IAAI,CAACiB,CAAC,CAACF,IAAI;QACpB,IAAIE,CAAC,CAAClB,MAAM,GAAG,EAAE,IAAIkB,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EACjCA,CAAC,GAAGA,CAAC,CAACU,KAAK,CAAC,CAAC,CAAC;QACf,IAAK,IAAI,CAACzB,aAAa,IACnB,IAAI,CAACA,aAAa,KAAK,MAAM,IAC7Bc,CAAC,CAACjB,MAAM,GAAGkB,CAAC,CAAClB,MAAM,KAAK,EAAE,EAAE;UAC/B,MAAO,IAAIY,KAAK,CAAC,wBAAwB,GACrC,+BAA+B,CAAC;QACrC;QACAF,GAAG,CAACa,WAAW,CAACxC,MAAM,CAAC8C,MAAM,CAAC,CAACZ,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC;QACtC,OAAQR,GAAG,CAACH,QAAQ,EAAE;MACvB,CAAC,MAAM,IAAIC,MAAM,KAAK,KAAK,IAAI,IAAI,CAACX,IAAI,KAAK,OAAO,EAAE;QACrD,IAAIiC,KAAK,GAAG,IAAIzC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7B4B,CAAC,GAAG,IAAI,CAAChB,IAAI,CAACgB,CAAC,CAACD,IAAI;QACpBc,KAAK,CAACP,WAAW,CAACN,CAAC,CAAC;QACpBa,KAAK,CAAChB,SAAS,CAAC,IAAI,CAACb,IAAI,CAACiB,CAAC,CAAC;QAE5BR,GAAG,GAAG,IAAIrB,SAAS,CAAC,CAAC,CAAC,CAAC;QACvB;QACA,IAAIgB,KAAK;QACT,IAAIY,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAChBA,CAAC,GAAGA,CAAC,CAACW,KAAK,CAAC,CAAC,CAAC;QACf,IAAIG,EAAE,GAAGd,CAAC,CAACjB,MAAM,GAAG,CAAC;QACrB,IAAI+B,EAAE,KAAK,GAAG,EACb1B,KAAK,GAAG,UAAU,CAAC,KACf,IAAI0B,EAAE,KAAK,GAAG,EAClB1B,KAAK,GAAG,UAAU,CAAC,KACf,IAAI0B,EAAE,KAAK,GAAG,EAClB1B,KAAK,GAAG,UAAU;QACnBK,GAAG,CAACG,WAAW,CAAC,aAAa,GAAGR,KAAK,CAAC;QACtCK,GAAG,CAACa,WAAW,CAACO,KAAK,CAACvB,QAAQ,EAAE,CAAC;QACjC,OAAQG,GAAG,CAACH,QAAQ,EAAE;MACvB;MACA,MAAO,IAAIK,KAAK,CAAC,0BAA0B,CAAC;IAC7C;MACC,MAAO,IAAIA,KAAK,CAAC,wBAAwB,CAAC;EAAE;AAE9C,CAAC;AAEDhC,SAAS,CAAC0B,SAAS,CAAC0B,QAAQ,GAAG,UAAUxB,MAAM,EAAE;EAChD3B,MAAM,CAACoD,cAAc,CAACzB,MAAM,EAAE,QAAQ,CAAC;EACvC,OAAQ,IAAI,CAACD,QAAQ,CAACC,MAAM,CAAC,CAACwB,QAAQ,CAAC,QAAQ,CAAC;AACjD,CAAC;AAEDpD,SAAS,CAACsD,KAAK,GAAG,UAAUlB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAE;EAC/C,IAAI,OAAQQ,IAAK,KAAK,QAAQ,EAC7BA,IAAI,GAAGjC,MAAM,CAACoD,IAAI,CAACnB,IAAI,EAAE,QAAQ,CAAC;EACnCnC,MAAM,CAAC8C,MAAM,CAACX,IAAI,EAAE,MAAM,CAAC;EAC3BnC,MAAM,CAACe,MAAM,CAACY,MAAM,EAAE,QAAQ,CAAC;EAC/B3B,MAAM,CAACe,MAAM,CAACC,IAAI,EAAE,MAAM,CAAC;EAE3B,IAAIL,IAAI,GAAG,CAAC,CAAC;EACbA,IAAI,CAACK,IAAI,GAAGA,IAAI,CAACuC,WAAW,EAAE;EAC9B5C,IAAI,CAACG,KAAK,GAAG,EAAE;EAEf,IAAI;IACHd,MAAM,CAACwD,EAAE,CAACrB,IAAI,CAAChB,MAAM,GAAG,CAAC,EAAE,6BAA6B,CAAC;IACzD,QAAQR,IAAI,CAACK,IAAI;MACjB,KAAK,KAAK;QACT,OAAQyC,WAAW,CAACtB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,CAAC;MAC9C,KAAK,SAAS;QACb,OAAQ8C,WAAW,CAACtB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,CAAC;MAE9C,KAAK,KAAK;MACV,KAAK,OAAO;QACX,IAAIgB,MAAM,KAAK,MAAM,EACpB,OAAQ+B,YAAY,CAACvB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,CAAC,CAAE,KAC5C,IAAIA,IAAI,CAACK,IAAI,KAAK,KAAK,EAC3B,OAAQ2C,QAAQ,CAACxB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,CAAC,CAAE,KAE5C,OAAQiD,UAAU,CAACzB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,CAAC;MAE9C;QACC,MAAO,IAAIF,qBAAqB,CAACO,IAAI,CAAC;IAAE;EAG1C,CAAC,CAAC,OAAO6C,CAAC,EAAE;IACX,IAAIA,CAAC,YAAYpD,qBAAqB,EACrC,MAAOoD,CAAC;IACT,MAAO,IAAInD,mBAAmB,CAACM,IAAI,EAAEW,MAAM,EAAEkC,CAAC,CAAC;EAChD;AACD,CAAC;AAED,SAASJ,WAAWA,CAACtB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,EAAE;EAC9C,IAAIgB,MAAM,KAAK,KAAK,EAAE;IACrB,IAAI;MACH,IAAIE,GAAG,GAAG,IAAIrB,SAAS,CAAC;QAACsC,MAAM,EAAEX;MAAI,CAAC,CAAC;MACvC,IAAI2B,IAAI,GAAGjC,GAAG,CAACkC,UAAU,EAAE;IAC5B,CAAC,CAAC,OAAOF,CAAC,EAAE;MACX;IAAA;IAED,IAAIhC,GAAG,KAAKD,SAAS,EAAE;MACtB,IAAIoC,GAAG,GAAG,wCAAwC,GAC9C,iBAAiB,GAAGhD,IAAI,GAAG,QAAQ,GAAG8C,IAAI,GAAG,GAAG;MACpD,QAAQA,IAAI;QACZ,KAAK,SAAS;UACb9D,MAAM,CAACiE,WAAW,CAACjD,IAAI,EAAE,KAAK,EAAEgD,GAAG,CAAC;UACpCrD,IAAI,CAACY,QAAQ,GAAG,MAAM;UACtB;QACD,KAAK,cAAc;UAClBvB,MAAM,CAACiE,WAAW,CAACjD,IAAI,EAAE,KAAK,EAAEgD,GAAG,CAAC;UACpCrD,IAAI,CAACY,QAAQ,GAAG,QAAQ;UACxB;QACD,KAAK,cAAc;UAClBvB,MAAM,CAACiE,WAAW,CAACjD,IAAI,EAAE,KAAK,EAAEgD,GAAG,CAAC;UACpCrD,IAAI,CAACY,QAAQ,GAAG,QAAQ;UACxB;QACD,KAAK,aAAa;UACjBvB,MAAM,CAACiE,WAAW,CAACjD,IAAI,EAAE,SAAS,EAAEgD,GAAG,CAAC;UACxCrD,IAAI,CAACY,QAAQ,GAAG,QAAQ;UACxB;QACD;UACC,MAAO,IAAIQ,KAAK,CAAC,wBAAwB,GACrC,QAAQ,GAAG+B,IAAI,CAAC;MAAE;MAEvB,IAAI5B,GAAG,GAAGL,GAAG,CAACqC,QAAQ,EAAE;MACxBlE,MAAM,CAACwD,EAAE,CAAC3B,GAAG,CAACsC,KAAK,EAAE,EAAE,sBAAsB,CAAC;MAC9CjC,GAAG,CAACb,IAAI,GAAG,KAAK;MAChBV,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAClC,GAAG,CAAC;MACpB,OAAQ,IAAInC,SAAS,CAACY,IAAI,CAAC;IAC5B;EACD;EACAA,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAC;IAAC/C,IAAI,EAAE,KAAK;IAAEc,IAAI,EAAEA;EAAI,CAAC,CAAC;EAC1C,OAAQ,IAAIpC,SAAS,CAACY,IAAI,CAAC;AAC5B;AAEA,SAAS+C,YAAYA,CAACvB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,EAAE;EAC/C,IAAI2B,GAAG,GAAG,IAAI/B,IAAI,CAAC8D,SAAS,CAAClC,IAAI,CAAC;EAClCG,GAAG,CAACgC,YAAY,EAAE;EAClB,IAAIlC,CAAC,GAAGE,GAAG,CAACyB,UAAU,CAACxD,IAAI,CAACoC,GAAG,CAACC,OAAO,EAAE,IAAI,CAAC;EAC9C,IAAIP,CAAC,GAAGC,GAAG,CAACyB,UAAU,CAACxD,IAAI,CAACoC,GAAG,CAACC,OAAO,EAAE,IAAI,CAAC;EAE9CjC,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAC;IAAC/C,IAAI,EAAE,GAAG;IAAEc,IAAI,EAAE7B,KAAK,CAACmC,WAAW,CAACL,CAAC;EAAC,CAAC,CAAC;EACxDzB,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAC;IAAC/C,IAAI,EAAE,GAAG;IAAEc,IAAI,EAAE7B,KAAK,CAACmC,WAAW,CAACJ,CAAC;EAAC,CAAC,CAAC;EAExD,OAAQ,IAAItC,SAAS,CAACY,IAAI,CAAC;AAC5B;AAEA,SAASgD,QAAQA,CAACxB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,EAAE;EAC3C,IAAIwB,IAAI,CAAChB,MAAM,IAAI,EAAE,EAAE;IACtB,IAAIU,GAAG,GAAG,IAAIrB,SAAS,CAAC;MAACsC,MAAM,EAAEX;IAAI,CAAC,CAAC;IACvC,IAAIoC,CAAC,GAAG1C,GAAG,CAAC2C,UAAU,EAAE;IACxB,IAAID,CAAC,CAACpB,QAAQ,CAAC,OAAO,CAAC,KAAK,SAAS,EACpCoB,CAAC,GAAG1C,GAAG,CAAC2C,UAAU,EAAE;IACrBxE,MAAM,CAACwD,EAAE,CAAC3B,GAAG,CAACsC,KAAK,EAAE,EAAE,sBAAsB,CAAC;IAC9CnE,MAAM,CAACiE,WAAW,CAACM,CAAC,CAACpD,MAAM,EAAE,EAAE,EAAE,sBAAsB,CAAC;IACxDgB,IAAI,GAAGoC,CAAC;EACT;EACA5D,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAC;IAAC/C,IAAI,EAAE,GAAG;IAAEc,IAAI,EAAEA,IAAI,CAACY,KAAK,CAAC,CAAC,EAAE,EAAE;EAAC,CAAC,CAAC;EACrDpC,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAC;IAAC/C,IAAI,EAAE,GAAG;IAAEc,IAAI,EAAEA,IAAI,CAACY,KAAK,CAAC,EAAE,EAAE,EAAE;EAAC,CAAC,CAAC;EACtD,OAAQ,IAAIhD,SAAS,CAACY,IAAI,CAAC;AAC5B;AAEA,SAASiD,UAAUA,CAACzB,IAAI,EAAEnB,IAAI,EAAEW,MAAM,EAAEhB,IAAI,EAAE;EAC7C,IAAIkB,GAAG,GAAG,IAAIrB,SAAS,CAAC;IAACsC,MAAM,EAAEX;EAAI,CAAC,CAAC;EAEvC,IAAIC,CAAC,EAAEC,CAAC;EACR,IAAIY,KAAK,GAAGpB,GAAG,CAAC2C,UAAU,EAAE;EAC5B,IAAI1C,KAAK,GAAGmB,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC;EACnC,IAAIrB,KAAK,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,EAAE;IACnC,IAAIjC,KAAK,GAAGgB,KAAK,CAAC2C,KAAK,CAAC,GAAG,CAAC;IAC5BzE,MAAM,CAACiE,WAAW,CAACnD,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;IACrCd,MAAM,CAACiE,WAAW,CAACnD,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;IACpCH,IAAI,CAACa,KAAK,GAAGV,KAAK,CAAC,CAAC,CAAC;IACrB,QAAQH,IAAI,CAACa,KAAK;MAClB,KAAK,UAAU;QACdb,IAAI,CAACY,QAAQ,GAAG,QAAQ;QACxB;MACD,KAAK,UAAU;QACdZ,IAAI,CAACY,QAAQ,GAAG,QAAQ;QACxB;MACD,KAAK,UAAU;QACdZ,IAAI,CAACY,QAAQ,GAAG,QAAQ;QACxB;MACD;QACC,MAAO,IAAIQ,KAAK,CAAC,2BAA2B,GACxCpB,IAAI,CAACa,KAAK,CAAC;IAAE;IAElByB,KAAK,GAAGpB,GAAG,CAAC2C,UAAU,EAAE;IACxBxE,MAAM,CAACwD,EAAE,CAAC3B,GAAG,CAACsC,KAAK,EAAE,EAAE,+BAA+B,CAAC;IACvDtC,GAAG,GAAG,IAAIrB,SAAS,CAAC;MAACsC,MAAM,EAAEG;IAAK,CAAC,CAAC;IACpCb,CAAC,GAAGP,GAAG,CAACqC,QAAQ,EAAE;EACnB,CAAC,MAAM;IACN9B,CAAC,GAAG;MAACD,IAAI,EAAEc;IAAK,CAAC;EAClB;EAEAZ,CAAC,GAAGR,GAAG,CAACqC,QAAQ,EAAE;EAClBlE,MAAM,CAACwD,EAAE,CAAC3B,GAAG,CAACsC,KAAK,EAAE,EAAE,sBAAsB,CAAC;EAE9C/B,CAAC,CAACf,IAAI,GAAG,GAAG;EACZgB,CAAC,CAAChB,IAAI,GAAG,GAAG;EAEZV,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAChC,CAAC,CAAC;EAClBzB,IAAI,CAACG,KAAK,CAACsD,IAAI,CAAC/B,CAAC,CAAC;EAClB,OAAQ,IAAItC,SAAS,CAACY,IAAI,CAAC;AAC5B;AAEAZ,SAAS,CAAC2E,WAAW,GAAG,UAAUC,GAAG,EAAEC,GAAG,EAAE;EAC3C,OAAQtE,KAAK,CAACuE,YAAY,CAACF,GAAG,EAAE5E,SAAS,EAAE6E,GAAG,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA7E,SAAS,CAAC0B,SAAS,CAACqD,gBAAgB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAE7C/E,SAAS,CAACgF,iBAAiB,GAAG,UAAUJ,GAAG,EAAE;EAC5C3E,MAAM,CAACgF,IAAI,CAACL,GAAG,CAACjD,QAAQ,CAAC;EACzB,IAAIiD,GAAG,CAACM,cAAc,CAAC,eAAe,CAAC,EACtC,OAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EACf,OAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}