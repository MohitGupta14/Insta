{"ast":null,"code":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar util = require('util');\nvar utils = require('./utils');\n\n///--- Globals\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\nvar State = {\n  New: 0,\n  Params: 1\n};\nvar ParamsState = {\n  Name: 0,\n  Quote: 1,\n  Value: 2,\n  Comma: 3\n};\n\n///--- Specific Errors\n\nfunction ExpiredRequestError(message) {\n  HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\nfunction InvalidHeaderError(message) {\n  HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\nfunction InvalidParamsError(message) {\n  HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */\n  parseRequest: function parseRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(request.headers, 'request.headers');\n    if (options === undefined) {\n      options = {};\n    }\n    if (options.headers === undefined) {\n      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];\n    }\n    assert.object(options, 'options');\n    assert.arrayOfString(options.headers, 'options.headers');\n    assert.optionalFinite(options.clockSkew, 'options.clockSkew');\n    var authzHeaderName = options.authorizationHeaderName || 'authorization';\n    if (!request.headers[authzHeaderName]) {\n      throw new MissingHeaderError('no ' + authzHeaderName + ' header ' + 'present in the request');\n    }\n    options.clockSkew = options.clockSkew || 300;\n    var i = 0;\n    var state = State.New;\n    var substate = ParamsState.Name;\n    var tmpName = '';\n    var tmpValue = '';\n    var parsed = {\n      scheme: '',\n      params: {},\n      signingString: ''\n    };\n    var authz = request.headers[authzHeaderName];\n    for (i = 0; i < authz.length; i++) {\n      var c = authz.charAt(i);\n      switch (Number(state)) {\n        case State.New:\n          if (c !== ' ') parsed.scheme += c;else state = State.Params;\n          break;\n        case State.Params:\n          switch (Number(substate)) {\n            case ParamsState.Name:\n              var code = c.charCodeAt(0);\n              // restricted name of A-Z / a-z\n              if (code >= 0x41 && code <= 0x5a ||\n              // A-Z\n              code >= 0x61 && code <= 0x7a) {\n                // a-z\n                tmpName += c;\n              } else if (c === '=') {\n                if (tmpName.length === 0) throw new InvalidHeaderError('bad param format');\n                substate = ParamsState.Quote;\n              } else {\n                throw new InvalidHeaderError('bad param format');\n              }\n              break;\n            case ParamsState.Quote:\n              if (c === '\"') {\n                tmpValue = '';\n                substate = ParamsState.Value;\n              } else {\n                throw new InvalidHeaderError('bad param format');\n              }\n              break;\n            case ParamsState.Value:\n              if (c === '\"') {\n                parsed.params[tmpName] = tmpValue;\n                substate = ParamsState.Comma;\n              } else {\n                tmpValue += c;\n              }\n              break;\n            case ParamsState.Comma:\n              if (c === ',') {\n                tmpName = '';\n                substate = ParamsState.Name;\n              } else {\n                throw new InvalidHeaderError('bad param format');\n              }\n              break;\n            default:\n              throw new Error('Invalid substate');\n          }\n          break;\n        default:\n          throw new Error('Invalid substate');\n      }\n    }\n    if (!parsed.params.headers || parsed.params.headers === '') {\n      if (request.headers['x-date']) {\n        parsed.params.headers = ['x-date'];\n      } else {\n        parsed.params.headers = ['date'];\n      }\n    } else {\n      parsed.params.headers = parsed.params.headers.split(' ');\n    }\n\n    // Minimally validate the parsed object\n    if (!parsed.scheme || parsed.scheme !== 'Signature') throw new InvalidHeaderError('scheme was not \"Signature\"');\n    if (!parsed.params.keyId) throw new InvalidHeaderError('keyId was not specified');\n    if (!parsed.params.algorithm) throw new InvalidHeaderError('algorithm was not specified');\n    if (!parsed.params.signature) throw new InvalidHeaderError('signature was not specified');\n\n    // Check the algorithm against the official list\n    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n    try {\n      validateAlgorithm(parsed.params.algorithm);\n    } catch (e) {\n      if (e instanceof InvalidAlgorithmError) throw new InvalidParamsError(parsed.params.algorithm + ' is not ' + 'supported');else throw e;\n    }\n\n    // Build the signingString\n    for (i = 0; i < parsed.params.headers.length; i++) {\n      var h = parsed.params.headers[i].toLowerCase();\n      parsed.params.headers[i] = h;\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          parsed.signingString += request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.');\n        }\n      } else if (h === '(request-target)') {\n        parsed.signingString += '(request-target): ' + request.method.toLowerCase() + ' ' + request.url;\n      } else {\n        var value = request.headers[h];\n        if (value === undefined) throw new MissingHeaderError(h + ' was not in the request');\n        parsed.signingString += h + ': ' + value;\n      }\n      if (i + 1 < parsed.params.headers.length) parsed.signingString += '\\n';\n    }\n\n    // Check against the constraints\n    var date;\n    if (request.headers.date || request.headers['x-date']) {\n      if (request.headers['x-date']) {\n        date = new Date(request.headers['x-date']);\n      } else {\n        date = new Date(request.headers.date);\n      }\n      var now = new Date();\n      var skew = Math.abs(now.getTime() - date.getTime());\n      if (skew > options.clockSkew * 1000) {\n        throw new ExpiredRequestError('clock skew of ' + skew / 1000 + 's was greater than ' + options.clockSkew + 's');\n      }\n    }\n    options.headers.forEach(function (hdr) {\n      // Remember that we already checked any headers in the params\n      // were in the request, so if this passes we're good.\n      if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0) throw new MissingHeaderError(hdr + ' was not a signed header');\n    });\n    if (options.algorithms) {\n      if (options.algorithms.indexOf(parsed.params.algorithm) === -1) throw new InvalidParamsError(parsed.params.algorithm + ' is not a supported algorithm');\n    }\n    parsed.algorithm = parsed.params.algorithm.toUpperCase();\n    parsed.keyId = parsed.params.keyId;\n    return parsed;\n  }\n};","map":{"version":3,"names":["assert","require","util","utils","HASH_ALGOS","PK_ALGOS","HttpSignatureError","InvalidAlgorithmError","validateAlgorithm","State","New","Params","ParamsState","Name","Quote","Value","Comma","ExpiredRequestError","message","call","inherits","InvalidHeaderError","InvalidParamsError","MissingHeaderError","StrictParsingError","module","exports","parseRequest","request","options","object","headers","undefined","arrayOfString","optionalFinite","clockSkew","authzHeaderName","authorizationHeaderName","i","state","substate","tmpName","tmpValue","parsed","scheme","params","signingString","authz","length","c","charAt","Number","code","charCodeAt","Error","split","keyId","algorithm","signature","toLowerCase","e","h","strict","method","url","httpVersion","value","date","Date","now","skew","Math","abs","getTime","forEach","hdr","indexOf","algorithms","toUpperCase"],"sources":["/Users/mohitgupta/Downloads/orgs/Clone/inst/node_modules/http-signature/lib/parser.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar util = require('util');\nvar utils = require('./utils');\n\n\n\n///--- Globals\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\nvar State = {\n  New: 0,\n  Params: 1\n};\n\nvar ParamsState = {\n  Name: 0,\n  Quote: 1,\n  Value: 2,\n  Comma: 3\n};\n\n\n///--- Specific Errors\n\n\nfunction ExpiredRequestError(message) {\n  HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\n\n\nfunction InvalidHeaderError(message) {\n  HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\n\n\nfunction InvalidParamsError(message) {\n  HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\n\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */\n  parseRequest: function parseRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(request.headers, 'request.headers');\n    if (options === undefined) {\n      options = {};\n    }\n    if (options.headers === undefined) {\n      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];\n    }\n    assert.object(options, 'options');\n    assert.arrayOfString(options.headers, 'options.headers');\n    assert.optionalFinite(options.clockSkew, 'options.clockSkew');\n\n    var authzHeaderName = options.authorizationHeaderName || 'authorization';\n\n    if (!request.headers[authzHeaderName]) {\n      throw new MissingHeaderError('no ' + authzHeaderName + ' header ' +\n                                   'present in the request');\n    }\n\n    options.clockSkew = options.clockSkew || 300;\n\n\n    var i = 0;\n    var state = State.New;\n    var substate = ParamsState.Name;\n    var tmpName = '';\n    var tmpValue = '';\n\n    var parsed = {\n      scheme: '',\n      params: {},\n      signingString: ''\n    };\n\n    var authz = request.headers[authzHeaderName];\n    for (i = 0; i < authz.length; i++) {\n      var c = authz.charAt(i);\n\n      switch (Number(state)) {\n\n      case State.New:\n        if (c !== ' ') parsed.scheme += c;\n        else state = State.Params;\n        break;\n\n      case State.Params:\n        switch (Number(substate)) {\n\n        case ParamsState.Name:\n          var code = c.charCodeAt(0);\n          // restricted name of A-Z / a-z\n          if ((code >= 0x41 && code <= 0x5a) || // A-Z\n              (code >= 0x61 && code <= 0x7a)) { // a-z\n            tmpName += c;\n          } else if (c === '=') {\n            if (tmpName.length === 0)\n              throw new InvalidHeaderError('bad param format');\n            substate = ParamsState.Quote;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        case ParamsState.Quote:\n          if (c === '\"') {\n            tmpValue = '';\n            substate = ParamsState.Value;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        case ParamsState.Value:\n          if (c === '\"') {\n            parsed.params[tmpName] = tmpValue;\n            substate = ParamsState.Comma;\n          } else {\n            tmpValue += c;\n          }\n          break;\n\n        case ParamsState.Comma:\n          if (c === ',') {\n            tmpName = '';\n            substate = ParamsState.Name;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        default:\n          throw new Error('Invalid substate');\n        }\n        break;\n\n      default:\n        throw new Error('Invalid substate');\n      }\n\n    }\n\n    if (!parsed.params.headers || parsed.params.headers === '') {\n      if (request.headers['x-date']) {\n        parsed.params.headers = ['x-date'];\n      } else {\n        parsed.params.headers = ['date'];\n      }\n    } else {\n      parsed.params.headers = parsed.params.headers.split(' ');\n    }\n\n    // Minimally validate the parsed object\n    if (!parsed.scheme || parsed.scheme !== 'Signature')\n      throw new InvalidHeaderError('scheme was not \"Signature\"');\n\n    if (!parsed.params.keyId)\n      throw new InvalidHeaderError('keyId was not specified');\n\n    if (!parsed.params.algorithm)\n      throw new InvalidHeaderError('algorithm was not specified');\n\n    if (!parsed.params.signature)\n      throw new InvalidHeaderError('signature was not specified');\n\n    // Check the algorithm against the official list\n    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n    try {\n      validateAlgorithm(parsed.params.algorithm);\n    } catch (e) {\n      if (e instanceof InvalidAlgorithmError)\n        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +\n          'supported'));\n      else\n        throw (e);\n    }\n\n    // Build the signingString\n    for (i = 0; i < parsed.params.headers.length; i++) {\n      var h = parsed.params.headers[i].toLowerCase();\n      parsed.params.headers[i] = h;\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          parsed.signingString +=\n            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        parsed.signingString +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.url;\n      } else {\n        var value = request.headers[h];\n        if (value === undefined)\n          throw new MissingHeaderError(h + ' was not in the request');\n        parsed.signingString += h + ': ' + value;\n      }\n\n      if ((i + 1) < parsed.params.headers.length)\n        parsed.signingString += '\\n';\n    }\n\n    // Check against the constraints\n    var date;\n    if (request.headers.date || request.headers['x-date']) {\n        if (request.headers['x-date']) {\n          date = new Date(request.headers['x-date']);\n        } else {\n          date = new Date(request.headers.date);\n        }\n      var now = new Date();\n      var skew = Math.abs(now.getTime() - date.getTime());\n\n      if (skew > options.clockSkew * 1000) {\n        throw new ExpiredRequestError('clock skew of ' +\n                                      (skew / 1000) +\n                                      's was greater than ' +\n                                      options.clockSkew + 's');\n      }\n    }\n\n    options.headers.forEach(function (hdr) {\n      // Remember that we already checked any headers in the params\n      // were in the request, so if this passes we're good.\n      if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0)\n        throw new MissingHeaderError(hdr + ' was not a signed header');\n    });\n\n    if (options.algorithms) {\n      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)\n        throw new InvalidParamsError(parsed.params.algorithm +\n                                     ' is not a supported algorithm');\n    }\n\n    parsed.algorithm = parsed.params.algorithm.toUpperCase();\n    parsed.keyId = parsed.params.keyId;\n    return parsed;\n  }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}